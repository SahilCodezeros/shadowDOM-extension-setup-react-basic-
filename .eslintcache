[{"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/Content.js":"1","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/mySubscription.js":"2","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/common.js":"3","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/TrailSettingsModal.js":"4","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/createModalComponent.js":"5","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/tooltip.js":"6","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/myExtensionRootFlip.js":"7","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/common-index.js":"8","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/videoTour.js":"9","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/audioTour.js":"10","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/CreateNewTrailTab.js":"11","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/textEditor.js":"12","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/signer.js":"13","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/account.js":"14","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/index.js":"15","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/web.js":"16","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/serialize.js":"17","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/keystore.js":"18","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/browser_local_storage_key_store.js":"19","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/code/getBalance.js":"20","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userCUSD.js":"21","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userProfileEdit.js":"22","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/validation.js":"23","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/defaultButton.js":"24","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/draggable.js":"25","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/ContinueTourConfirmation.js":"26","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/settingsComponents.js":"27","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/wallet-account.js":"28","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/connection.js":"29","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/transaction.js":"30","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/enums.js":"31","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/format.js":"32","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/json-rpc-provider.js":"33","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/generated/rpc_error_types.js":"34","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/unencrypted_file_system_keystore.js":"35","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userProfileList.js":"36","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/AppUtill.js":"37","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/tooltip.js":"38","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/webUserTour.js":"39","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/targetNotFound.js":"40","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/CreateTourConfirmationModal.js":"41","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/interceptor.js":"42","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/stopePlayingMedia.js":"43","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/account_creator.js":"44","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/key_pair.js":"45","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/textEditor.js":"46","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/exponential-backoff.js":"47","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/index.js":"48","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/socket.js":"49","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/CreateNewTrailModal.js":"50","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/main.js":"51","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/mainflip.js":"52","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/code/sendtx.js":"53","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/contract.js":"54","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/errors.js":"55","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/provider.js":"56","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/network.js":"57","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/celo/index.js":"58"},{"size":158612,"mtime":1620188685018,"results":"59","hashOfConfig":"60"},{"size":1938,"mtime":1620122227418,"results":"61","hashOfConfig":"60"},{"size":22214,"mtime":1620122227394,"results":"62","hashOfConfig":"60"},{"size":1536,"mtime":1620122227322,"results":"63","hashOfConfig":"60"},{"size":7341,"mtime":1620122227338,"results":"64","hashOfConfig":"60"},{"size":1443,"mtime":1620122227442,"results":"65","hashOfConfig":"60"},{"size":55516,"mtime":1620122227434,"results":"66","hashOfConfig":"60"},{"size":827,"mtime":1606982944446,"results":"67","hashOfConfig":"60"},{"size":5747,"mtime":1620122227442,"results":"68","hashOfConfig":"60"},{"size":13283,"mtime":1620122227418,"results":"69","hashOfConfig":"60"},{"size":2281,"mtime":1607059703331,"results":"70","hashOfConfig":"60"},{"size":10145,"mtime":1620122227306,"results":"71","hashOfConfig":"60"},{"size":3148,"mtime":1606982944482,"results":"72","hashOfConfig":"60"},{"size":18770,"mtime":1606982944430,"results":"73","hashOfConfig":"60"},{"size":290,"mtime":1606982944474,"results":"74","hashOfConfig":"60"},{"size":3368,"mtime":1606982944498,"results":"75","hashOfConfig":"60"},{"size":10911,"mtime":1606982944498,"results":"76","hashOfConfig":"60"},{"size":79,"mtime":1606982944470,"results":"77","hashOfConfig":"60"},{"size":4661,"mtime":1606982944470,"results":"78","hashOfConfig":"60"},{"size":893,"mtime":1620122227290,"results":"79","hashOfConfig":"60"},{"size":2939,"mtime":1620122227362,"results":"80","hashOfConfig":"60"},{"size":12111,"mtime":1620189411791,"results":"81","hashOfConfig":"60"},{"size":1291,"mtime":1620189437364,"results":"82","hashOfConfig":"60"},{"size":23280,"mtime":1620122227422,"results":"83","hashOfConfig":"60"},{"size":1351,"mtime":1612252112038,"results":"84","hashOfConfig":"60"},{"size":1934,"mtime":1620122227314,"results":"85","hashOfConfig":"60"},{"size":2528,"mtime":1620122227418,"results":"86","hashOfConfig":"60"},{"size":13274,"mtime":1606982944502,"results":"87","hashOfConfig":"60"},{"size":1335,"mtime":1606982944450,"results":"88","hashOfConfig":"60"},{"size":8620,"mtime":1606982944482,"results":"89","hashOfConfig":"60"},{"size":477,"mtime":1606982944482,"results":"90","hashOfConfig":"60"},{"size":3712,"mtime":1606982944486,"results":"91","hashOfConfig":"60"},{"size":8301,"mtime":1606982944478,"results":"92","hashOfConfig":"60"},{"size":4925,"mtime":1606982944462,"results":"93","hashOfConfig":"60"},{"size":5827,"mtime":1606982944474,"results":"94","hashOfConfig":"60"},{"size":14354,"mtime":1620122227362,"results":"95","hashOfConfig":"60"},{"size":4548,"mtime":1620122227266,"results":"96","hashOfConfig":"60"},{"size":7422,"mtime":1620122227418,"results":"97","hashOfConfig":"60"},{"size":18527,"mtime":1620122227418,"results":"98","hashOfConfig":"60"},{"size":7662,"mtime":1620122227358,"results":"99","hashOfConfig":"60"},{"size":11687,"mtime":1620122227314,"results":"100","hashOfConfig":"60"},{"size":1284,"mtime":1620122227306,"results":"101","hashOfConfig":"60"},{"size":2845,"mtime":1614347016236,"results":"102","hashOfConfig":"60"},{"size":2500,"mtime":1606982944438,"results":"103","hashOfConfig":"60"},{"size":3856,"mtime":1606982944490,"results":"104","hashOfConfig":"60"},{"size":2763,"mtime":1620122227438,"results":"105","hashOfConfig":"60"},{"size":1318,"mtime":1606982944486,"results":"106","hashOfConfig":"60"},{"size":428,"mtime":1606982944470,"results":"107","hashOfConfig":"60"},{"size":169,"mtime":1620122227306,"results":"108","hashOfConfig":"60"},{"size":4406,"mtime":1620122227306,"results":"109","hashOfConfig":"60"},{"size":12596,"mtime":1620122227430,"results":"110","hashOfConfig":"60"},{"size":1126,"mtime":1614347016300,"results":"111","hashOfConfig":"60"},{"size":4189,"mtime":1606982944602,"results":"112","hashOfConfig":"60"},{"size":3352,"mtime":1606982944450,"results":"113","hashOfConfig":"60"},{"size":722,"mtime":1606982944486,"results":"114","hashOfConfig":"60"},{"size":1139,"mtime":1606982944478,"results":"115","hashOfConfig":"60"},{"size":0,"mtime":1606982944490,"results":"116","hashOfConfig":"60"},{"size":582,"mtime":1606982944342,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},"v5ikia",{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"121"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"121"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"121"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"121"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"121"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"146"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"121"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"121"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"121"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"121"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/Content.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button } from \"antd\";\nimport { CloudUploadOutlined } from \"@ant-design/icons\";\nimport unique from \"unique-selector\";\nimport { arrayMove } from \"react-sortable-hoc\";\nimport _ from \"lodash\";\nimport $ from \"jquery\";\nimport WebFont from \"webfontloader\";\nimport Draggable from \"react-draggable\";\n\nimport { get } from \"./AppUtill\";\nimport { socket } from \"./common/socket\";\nimport Tooltip from \"./components/tooltip\";\nimport { resizeScreen } from \"./common/helper\";\nimport VideoTour from \"./components/videoTour\";\nimport AudioTour from \"./components/audioTour\";\nimport { sendTransection } from \"./code/sendtx\";\nimport WebUserTour from \"./components/webUserTour\";\nimport MySubscription from \"./components/mySubscription\";\nimport SendTipModal from \"./components/Modal/SendTipModal\";\nimport { handleFileUpload } from \"./common/audAndVidCommon\";\nimport TargetNotFound from \"./components/Modal/targetNotFound\";\nimport { initButtonPosition } from \"./common/initButtonPosition\";\nimport TrailSetting from \"./components/Modal/TrailSettingsModal\";\nimport { removeTrailitLogo } from \"./common/trailitLogoInPreview\";\nimport CreateNewTrailModal from \"./components/CreateNewTrailModal\";\nimport { matchUrl, queryParentElement } from \"./components/common\";\nimport TrailDeleteModal from \"./components/Modal/TrailDeleteModal\";\nimport CreateModalComponent from \"./components/Modal/createModalComponent\";\nimport PreviewModalComponent from \"./components/Modal/previewModalComponent\";\nimport SortableItem, { SortableContainer } from \"./components/SortableItem\";\nimport {\n  addOverlay,\n  setOverlayHtml,\n  removeOverlay,\n} from \"./common/trailOverlay\";\nimport CreateTourConfirmationModal from \"./components/Modal/CreateTourConfirmationModal\";\nimport {\n  logout,\n  getAllUser,\n  deleteTrail,\n  uploadTrails,\n  followTrails,\n  arraySorting,\n  getFollowTrails,\n  updateTrailFlag,\n  getUserOneTrail,\n  UpdateTrailData,\n  updateTrailTrack,\n  deleteSingleTrail,\n  getSingleTrailData,\n  getAllNotification,\n  updateNotification,\n  unFollowTrailOfUser,\n  getFollowedOneTrail,\n} from \"./common/axios\";\n\nimport { main1Css, main2Css } from \"./css/main\";\nimport { tooltipCss1 } from \"./css/tooltip\";\nimport { mainFlipCss } from \"./css/mainflip\";\nimport {\n  myExtensionRootFlipCss0,\n  myExtensionRootFlipCss1,\n  myExtensionRootFlipCss2,\n  myExtensionRootFlipCss3,\n  myExtensionRootFlipCss4,\n  myExtensionRootFlipCss5,\n} from \"./css/myExtensionRootFlip\";\nimport {\n  defaultButtonCss1,\n  defaultButtonCss2,\n  defaultButtonCss3,\n} from \"./css/defaultButton\";\n\nimport \"./Content.css\";\n\n/*global chrome*/\n\nWebFont.load({\n  google: {\n    families: [\"Lato\", \"Raleway:400,500,700\", \"sans-serif\", \"Montserrat\"],\n  },\n  // eslint-disable-next-line no-restricted-globals\n  context: frames[\"text-editor-frame\"],\n});\n\nlet app;\nlet obj = {};\nlet updateOverlay;\nlet root1 = \"none\";\nlet allTrails = [];\nlet autoLogoutTimeout;\nlet trailWebUserTour = [];\nlet preventToggle = false;\n\nif (window.location.href.includes(\"https://www.and.co\")) {\n  document.querySelector(\"html\").style.zoom = \"100%\";\n}\n\nconst autoLogoutFunction = () => {\n  // // Clear interval\n  // clearInterval(autoLogoutTimeout);\n\n  // autoLogoutTimeout = setInterval(() => {\n  //   chrome.storage.local.get(\n  //     [\"isAuth\", \"autoLogoutTime\"],\n  //     async function (items) {\n  //       const logoutTime = items.autoLogoutTime;\n\n  //       if (!logoutTime) return;\n  //       // const logoutTime = parseInt(\n  //       //   window.localStorage.getItem(\"add-on-auto-lgout-tm\")\n  //       // );\n\n  //       if (items.isAuth && logoutTime < Date.now()) {\n  //         try {\n  //           // Call logout api\n  //           await logout();\n\n  //           chrome.runtime.sendMessage(\"\", { type: \"logout\" });\n  //           chrome.runtime.sendMessage({ badgeText: `` });\n  //           chrome.storage.local.set({\n  //             trail_web_user_tour: [],\n  //             notification: true,\n  //             closeContinue: false,\n  //           });\n  //           chrome.storage.local.clear();\n  //         } catch (err) {}\n  //       }\n  //     }\n  //   );\n  // }, 5000);\n\n  chrome.storage.local.get([\"isAuth\"], async function (items) {\n    if (items.isAuth) {\n      // Update auto logout time in chrome storage\n      chrome.storage.local.set({ autoLogoutTime: Date.now() + 3600000 });\n\n      // 1 hour = 3600000\n      // 30 min = 1800000\n      // 20 sec = 200000;\n    } else {\n      clearInterval(autoLogoutTimeout);\n    }\n  });\n};\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuOpen: false,\n      trail_web_user_tour: [],\n      modalSubscription: false,\n      modalCreateNewTrailModal: false,\n      currentUserId: null,\n      followerList: [],\n      closeContinue: false,\n      showSetting: false,\n      followedTrailUserData: null,\n      confirmationModal: {\n        show: false,\n        tourType: \"\",\n      },\n    };\n  }\n\n  async componentDidMount() {\n    chrome.storage.local.get(\n      [\n        \"trail_web_user_tour\",\n        \"trail_data_id\",\n        \"trail_id\",\n        \"userData\",\n        \"previewUserId\",\n        \"notification\",\n        \"saveSort\",\n        \"tourStep\",\n        \"closeContinue\",\n        \"isPreview\",\n        \"isPreviewSingleTrail\",\n        \"authorData\",\n        \"showSetting\",\n        \"followedTrailUserData\",\n        \"noStepsToWatch\",\n      ],\n      async (items) => {\n        let closeContinue = false;\n\n        if (\n          items.closeContinue &&\n          items.trail_web_user_tour &&\n          items.trail_web_user_tour.length > 0\n        ) {\n          closeContinue = true;\n        }\n\n        this.setState({\n          closeContinue: closeContinue,\n          currentUserId: items.userData._id,\n          followedTrailUserData: items.followedTrailUserData,\n        });\n        socket.on(\"connect\", () => {});\n\n        socket.emit(\"userId\", items.userData._id);\n\n        if (items.showSetting !== undefined && items.showSetting !== null) {\n          // Set show setting state\n          this.setState({ showSetting: items.showSetting });\n        }\n\n        chrome.storage.onChanged.addListener(async (changes) => {\n          if (\n            changes.tourType &&\n            changes.tourType.oldValue === \"preview\" &&\n            changes.tourType.newValue === \"\"\n          ) {\n            this.setState({ menuOpen: false });\n          }\n\n          if (changes.showSetting) {\n            // Set show setting state\n            this.setState({ showSetting: changes.showSetting.newValue });\n          }\n\n          if (\n            (changes.isPreview && changes.isPreview.newValue) ||\n            (changes.isPreviewSingleTrail &&\n              changes.isPreviewSingleTrail.newValue)\n          ) {\n            this.openMenu(\"preview\");\n          }\n\n          if (changes.closeContinue !== undefined) {\n            this.setState({ closeContinue: changes.closeContinue.newValue });\n          }\n\n          if (\n            changes.openButton &&\n            changes.openButton.newValue === \"ManageTrail\"\n          ) {\n            this.props.mainToggle();\n          }\n\n          if (\n            changes.currentTourType &&\n            changes.currentTourType.newValue === \"\" &&\n            changes.tourStep &&\n            changes.tourStep.newValue === \"\" &&\n            changes.tourType &&\n            changes.tourType.newValue === \"\"\n          ) {\n            chrome.storage.local.get(\n              [\n                \"trail_web_user_tour\",\n                \"userData\",\n                \"trail_id\",\n                \"previewUserId\",\n                \"notification\",\n                \"saveSort\",\n                \"tourStep\",\n                \"followedTrailUserData\",\n                \"noStepsToWatch\",\n                \"isPreview\",\n                \"currentTrailsTab\",\n              ],\n              async (items) => {\n                try {\n                  if (\n                    items.currentTrailsTab === \"Following\" &&\n                    items.followedTrailUserData\n                  ) {\n                    const data = {\n                      ...items,\n                      trail_id: items.trail_id,\n                      tourStep: items.tourStep,\n                      authorData: { ...items.followedTrailUserData },\n                      isPreview: items.isPreview,\n                      noStepsToWatch: items.noStepsToWatch,\n                    };\n\n                    await this.getCurrUserFollowedTrailData(data);\n                  } else {\n                    let data = { ...items };\n                    if (items.followedTrailUserData) {\n                      data = {\n                        ...items,\n                        trail_id: items.trail_id,\n                        tourStep: items.tourStep,\n                        userData: { ...items.followedTrailUserData },\n                        trail_web_user_tour: items.trail_web_user_tour,\n                      };\n                    }\n\n                    // Call common get user data function\n                    await this.getCurrUserDataCommon(data);\n                  }\n                } catch (err) {}\n              }\n            );\n          }\n        });\n\n        if (\n          document.URL.includes(\n            `${process.env.REACT_APP_NEW_MS1_DOMAIN}userTourDataDetail/readTrailit_trail_data_tour/`\n          ) &&\n          !items.saveSort\n        ) {\n          let previewUserId;\n          const url = new URL(document.URL);\n\n          // Remove notification\n          const data = {\n            // user_id: items.userData._id,\n            updateValue: {\n              flag: \"read\",\n            },\n            updated: new Date().getTime(),\n          };\n\n          try {\n            const notiRes = await updateNotification(data);\n            if (\n              notiRes.data.response &&\n              notiRes.data.response.statusCode === \"200\"\n            ) {\n              // Remove asterisk from trail icon\n              chrome.runtime.sendMessage(\"\", {\n                type: \"badgeText\",\n                badgeText: \"\",\n              });\n            }\n          } catch (err) {}\n\n          const params = new URLSearchParams(url.search.substring(1));\n          previewUserId = params.get(\"user_id\");\n          let trailId = params.get(\"trailId\");\n\n          // Get trails of preview user from database\n          let screen = resizeScreen() ? \"mobile\" : \"web\";\n          const res = await getUserOneTrail(trailId, screen);\n          const result = res.data;\n\n          if (\n            result.response &&\n            result.response.statusCode !== 404 &&\n            result.response.result.length > 0\n          ) {\n            result.response.result.forEach((el) => {\n              allTrails.push({\n                userId: previewUserId,\n                trail_data_id: el.trail_data_id,\n                url: el.url,\n                path: el.path,\n                selector: el.selector,\n                class: el.class,\n                title: el.title,\n                description: el.description,\n                web_url: el.web_url,\n                trail_id: el.trail_id,\n                type: el.type,\n                uniqueTarget: el.unique_target,\n                unique_target_one: el.unique_target_one,\n                mobile_media_type: el.mobile_media_type,\n                mobile_title: el.mobile_title,\n                mobile_description: el.mobile_description,\n                mediaType: el.media_type,\n                created: el.created,\n              });\n            });\n\n            // Get follow data of user from database\n            const followData = await getFollowTrails();\n            const followRes = followData.data;\n\n            if (\n              followRes.response.statusCode !== 404 ||\n              followRes.response.result !== \"Trailit follow not found\"\n            ) {\n              const follow =\n                followRes.response.result.count.length > 0 ? true : false;\n\n              obj.followingData = {\n                previewUserId,\n                follow,\n              };\n\n              chrome.storage.local.set({\n                followData: {\n                  previewUserId,\n                  follow,\n                },\n              });\n            }\n\n            preventToggle = true;\n            trailWebUserTour = allTrails;\n\n            chrome.storage.local.set({\n              trail_web_user_tour: allTrails,\n              previewUserId,\n            });\n\n            this.openMenu(\"preview\", previewUserId);\n          }\n        } else if (\n          items.userData &&\n          (typeof items.previewUserId === \"undefined\" ||\n            items.previewUserId === \"\") &&\n          !items.saveSort\n        ) {\n          if (preventToggle) {\n            preventToggle = false;\n          }\n\n          // For viewing followed trail data\n          if (items.followedTrailUserData) {\n            const data = {\n              ...items,\n              trail_id: items.trail_id,\n              tourStep: items.tourStep,\n              authorData: { ...items.followedTrailUserData },\n              isPreview: items.isPreview,\n              noStepsToWatch: items.noStepsToWatch,\n            };\n\n            await this.getCurrUserFollowedTrailData(data);\n          } else {\n            // For viewing preview trails from web-app or own trails\n            const data = {\n              trail_id: items.trail_id,\n              tourStep: items.tourStep,\n              userData: { ...items.authorData },\n              trail_web_user_tour: items.trail_web_user_tour,\n              noStepsToWatch: items.noStepsToWatch,\n              isPreview: items.isPreview,\n            };\n\n            if (items.isPreview) {\n              // Call get current user data common function\n              await this.getCurrUserDataCommon(data);\n            } else if (items.isPreviewSingleTrail) {\n              data.trail_data_id = items.trail_data_id;\n              await this.getSingleTrail(data);\n            } else {\n              // Call get current user data common function\n              await this.getCurrUserDataCommon(items);\n            }\n          }\n        }\n      }\n    );\n\n    chrome.storage.local.get(\n      [\n        \"trail_web_user_tour\",\n        \"tourStatus\",\n        \"tourType\",\n        \"tourStep\",\n        \"currentTourType\",\n        \"loadingCount\",\n        \"userData\",\n      ],\n      async function (items) {\n        this.setState({ trail_web_user_tour: items.trail_web_user_tour });\n        // trailWebUserTour = items.trail_web_user_tour;\n        this.setState({ menuOpen: true });\n        // Store totalTrails number in localStorage\n        localStorage.setItem(\n          process.env.REACT_APP_LOCALSTORAGE,\n          items.trail_web_user_tour ? this.state.trail_web_user_tour.length : 0\n        );\n\n        if (\n          (items.currentTourType === \"preview\" ||\n            items.currentTourType === \"\") &&\n          items.tourType === \"preview\" &&\n          items.tourStep !== \"\"\n        ) {\n          chrome.storage.local.set({ openButton: \"\", tourType: \"\" });\n        }\n\n        if (items.tourStep !== \"\" && items.currentTourType === \"preview\") {\n          if (items.trail_web_user_tour !== undefined) {\n            chrome.storage.local.set({\n              currentTourType:\n                items.trail_web_user_tour[items.tourStep - 1].type,\n            });\n          }\n        }\n\n        if (\n          (items.currentTourType === \"tooltip\" ||\n            items.currentTourType === \"video\") &&\n          items.tourType === \"preview\"\n        ) {\n          // this.props.downToggleButton(true);\n          // this.props.downToggleButton(true);\n        }\n\n        if (items.trail_web_user_tour !== undefined) {\n          this.setState({ trailList: items.trail_web_user_tour });\n        }\n\n        if (items.tourStatus !== undefined) {\n          this.setState({ tourStatus: items.tourStatus });\n        }\n      }.bind(this)\n    );\n\n    chrome.runtime.onMessage.addListener(this.onHandleSubscription);\n  }\n\n  async getCurrUserFollowedTrailData(items) {\n    try {\n      const trail_id = items.trail_id,\n        author_id = items.authorData._id,\n        loggedInUserId = get([\"userData\", \"_id\"], items);\n\n      let continueFlag = false,\n        step,\n        visited;\n\n      // Call get followed one trail function\n      const { data } = await getFollowedOneTrail(\n        trail_id,\n        author_id,\n        loggedInUserId\n      );\n\n      const handleSteps = (result) => {\n        if (get([\"response\", \"result\", \"steps\"], result)) {\n          return result.response.result.steps;\n        } else {\n          return result.response.result || [];\n        }\n      };\n\n      if (\n        data.response &&\n        data.response.statusCode !== 404 &&\n        handleSteps(data).length > 0\n      ) {\n        let index = get([\"steps\"], data.response.result, []).findIndex(\n          (step) =>\n            !get([\"visitedSteps\"], data.response.result, \"\")\n              .split(\",\")\n              .map((i) => Number(i))\n              .includes(step.trail_data_id)\n        );\n\n        const visitedSteps = get([\"visitedSteps\"], data.response.result, \"\")\n          .split(\",\")\n          .map((item) => Number(item));\n\n        const continueButton =\n          get([\"visitedSteps\"], data.response.result, \"\").split(\"\").length >\n            0 &&\n          !(\n            get([\"steps\"], data.response.result, []).length ===\n            get([\"visitedSteps\"], data.response.result, \"\").split(\",\").length\n          );\n\n        allTrails = handleSteps(data).map((el, i) => {\n          let flag = el.flag === \"continue\" ? \"\" : el.flag;\n\n          if (continueButton && visitedSteps.length - 1 === i) {\n            flag = \"continue\";\n            continueFlag = true;\n          }\n\n          visitedSteps.includes(el.trail_data_id)\n            ? (visited = true)\n            : (visited = false);\n\n          return {\n            userId: author_id,\n            trail_data_id: el.trail_data_id,\n            url: el.url,\n            path: el.path,\n            selector: el.selector,\n            class: el.class,\n            title: el.title,\n            description: el.description,\n            web_url: el.web_url,\n            trail_id: el.trail_id,\n            type: el.type,\n            uniqueTarget: el.unique_target,\n            unique_target_one: el.unique_target_one,\n            mobile_media_type: el.mobile_media_type,\n            mobile_title: el.mobile_title,\n            mobile_description: el.mobile_description,\n            mediaType: el.media_type,\n            created: el.created,\n            sortId: el.trail_sortId ? el.trail_sortId : \"\",\n            flag,\n            visited,\n          };\n        });\n\n        trailWebUserTour = [...allTrails];\n        obj.trailList = [...allTrails];\n      } else {\n        trailWebUserTour = [];\n        allTrails = [];\n      }\n\n      this.setState({\n        trail_web_user_tour: trailWebUserTour,\n        followedTrailUserData: items.followedTrailUserData\n          ? items.followedTrailUserData\n          : null,\n      });\n\n      const tourStep =\n        items.tourStep && items.tourStep !== \"\" ? items.tourStep : 1;\n\n      chrome.storage.local.set({\n        trail_id,\n        tourStep: tourStep,\n        trail_web_user_tour: allTrails,\n        closeContinue: continueFlag,\n      });\n    } catch (err) {}\n  }\n\n  async getCurrUserDataCommon(items) {\n    const user_id = items.userData._id;\n    let res,\n      continueFlag = false,\n      trail_id = items.trail_id;\n\n    try {\n      // Get user's trails from database\n      let screen = resizeScreen() ? \"mobile\" : \"web\";\n\n      res = await getUserOneTrail(trail_id, screen);\n\n      trailWebUserTour = items.trail_web_user_tour;\n    } catch (err) {}\n\n    const result = res.data;\n\n    const handleSteps = (result) => {\n      if (get([\"response\", \"result\", \"steps\"], result)) {\n        return result.response.result.steps;\n      } else {\n        return result.response.result || [];\n      }\n    };\n\n    if (\n      result.response &&\n      result.response.statusCode !== 404 &&\n      handleSteps(result).length > 0\n    ) {\n      allTrails = handleSteps(result).map((el) => {\n        if (el.flag === \"continue\") {\n          continueFlag = true;\n        }\n\n        return {\n          userId: user_id,\n          trail_data_id: el.trail_data_id,\n          url: el.url,\n          path: el.path,\n          selector: el.selector,\n          class: el.class,\n          title: el.title,\n          description: el.description,\n          web_url: el.web_url,\n          trail_id: el.trail_id,\n          type: el.type,\n          uniqueTarget: el.unique_target,\n          unique_target_one: el.unique_target_one,\n          mobile_media_type: el.mobile_media_type,\n          mobile_title: el.mobile_title,\n          mobile_description: el.mobile_description,\n          mediaType: el.media_type,\n          created: el.created,\n          sortId: el.trail_sortId ? el.trail_sortId : \"\",\n          flag: el.flag,\n        };\n      });\n    } else {\n      trailWebUserTour = [];\n      allTrails = [];\n    }\n\n    trailWebUserTour = allTrails;\n    obj.trailList = allTrails;\n\n    this.setState({\n      trail_web_user_tour: trailWebUserTour,\n      followedTrailUserData: items.followedTrailUserData\n        ? items.followedTrailUserData\n        : null,\n    });\n    chrome.storage.local.set({\n      trail_web_user_tour: allTrails,\n      tourStep: items.tourStep ? items.tourStep : \"\",\n      trail_id,\n      closeContinue: continueFlag,\n    });\n  }\n\n  async getSingleTrail(data) {\n    let res;\n    try {\n      res = await getSingleTrailData(data.trail_id, data.trail_data_id);\n    } catch (err) {}\n    if (\n      res.data &&\n      res.data.response &&\n      res.data.response.statusCode === \"200\"\n    ) {\n      let payload = { ...res.data.response.result };\n\n      let singleTrail = {\n        userId: data.userData.user_id,\n        trail_data_id: payload.trail_data_id,\n        url: payload.url,\n        path: payload.path,\n        selector: payload.selector,\n        class: payload.class,\n        title: payload.title,\n        description: payload.description,\n        web_url: payload.web_url,\n        trail_id: payload.trail_id,\n        type: payload.type,\n        uniqueTarget: payload.unique_target,\n        unique_target_one: payload.unique_target_one,\n        mobile_media_type: payload.mobile_media_type,\n        mobile_title: payload.mobile_title,\n        mobile_description: payload.mobile_description,\n        mediaType: payload.media_type,\n        created: payload.created,\n        sortId: payload.trail_sortId ? payload.trail_sortId : \"\",\n        flag: payload.flag,\n      };\n\n      this.setState({ trail_web_user_tour: [singleTrail] });\n\n      chrome.storage.local.get(\n        [\"trail_id\", \"userData\", \"tourStep\", \"isPreviewSingleTrail\"],\n        (storage) => {\n          if (data.loggedInData) {\n            chrome.storage.local.set({\n              trail_web_user_tour: [payload],\n              tourStep: storage.tourStep ? storage.tourStep : \"\",\n              trail_id: data.trail_id,\n              old_trail_id: storage.trail_id,\n              old_user_data: { ...storage.userData },\n              isPreviewSingleTrail: false,\n              webUrl: \"\",\n              userData: { ...data.loggedInData },\n              authorData: { ...data.userData },\n            });\n          } else {\n            chrome.storage.local.set({\n              tourStep: data.tourStep ? data.tourStep : \"\",\n              trail_id: data.trail_id,\n            });\n          }\n        }\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    chrome.storage.local.set({ loadingCount: 0, showSetting: false });\n  }\n\n  onHandleSubscription = async (msObj) => {\n    if (msObj.status === \"removeMenuPopButton\") {\n      this.props.onChangeTourType(\"\");\n      this.props.mainToggle();\n\n      if (app && app.style && app.style.display === \"block\") {\n        setTimeout(() => {\n          app.style.display = \"none\";\n        }, 1000);\n      }\n    }\n\n    if (msObj.message === \"urlChanged\") {\n      if (!this.state.menuOpen) {\n        this.setState({ menuOpen: true });\n      }\n    }\n\n    if (msObj.subject === \"updateTimeout\") {\n      // Auto logout function\n      autoLogoutFunction();\n    }\n\n    if (msObj.subject === \"DOMInfo\") {\n      chrome.storage.local.get(\n        [\n          \"userData\",\n          \"trail_id\",\n          \"tourStep\",\n          \"trail_web_user_tour\",\n          \"isPreview\",\n          \"authorData\",\n          \"isPreviewSingleTrail\",\n          \"trail_data_id\",\n          \"noStepsToWatch\",\n          \"followedTrailUserData\",\n        ],\n        async (items) => {\n          // For viewing followed trail data\n          if (items.followedTrailUserData) {\n            const data = {\n              ...items,\n              trail_id: items.trail_id,\n              authorData: { ...items.followedTrailUserData },\n              isPreview: items.isPreview,\n              noStepsToWatch: items.noStepsToWatch,\n            };\n\n            return await this.getCurrUserFollowedTrailData(data);\n          }\n\n          // For viewing preview trail data from web-app or own trails\n          const data = {\n            trail_id: items.trail_id,\n            tourStep: items.tourStep,\n            userData: { ...items.authorData },\n            trail_web_user_tour: items.trail_web_user_tour,\n            noStepsToWatch: items.noStepsToWatch,\n            isPreview: items.isPreview,\n          };\n\n          if (items.isPreview) {\n            // Call get current user data common function\n            await this.getCurrUserDataCommon(data);\n          } else if (items.isPreviewSingleTrail) {\n            data.trail_data_id = items.trail_data_id;\n            await this.getSingleTrail(data);\n          } else {\n            // Call get current user data common function\n            await this.getCurrUserDataCommon(items);\n          }\n        }\n      );\n\n      this.setState({ menuOpen: true });\n    }\n\n    chrome.storage.local.get(\n      [\"closeContinue\"],\n      async function (items) {\n        this.setState({\n          closeContinue:\n            items.closeContinue === undefined ? false : items.closeContinue,\n        });\n      }.bind(this)\n    );\n\n    if (msObj.subject === \"CreateTrail\") {\n      this.onToggleCreateNewTrailModal(true);\n    }\n\n    if (msObj.subject === \"DOMObj\") {\n      let allUserData = await getAllUser();\n      chrome.storage.local.get([\"userData\"], async function (items) {\n        socket.emit(\"userId\", items.userData._id);\n      });\n\n      socket.on(\"followerList\", (data) => {\n        if (allUserData.status === 200) {\n          let follower = data.map((result) => {\n            let findFollower = allUserData.data.data.response.find(\n              (r) => r._id === result\n            );\n            return findFollower.email;\n          });\n          this.setState({ followerList: follower });\n        }\n      });\n\n      this.onToggleSubscription(true);\n    }\n  };\n\n  // Get all notification of user\n  userNotificaion() {\n    chrome.storage.local.get([\"userData\"], async (items) => {\n      // Get notification count from database\n      const data = {\n        // user_id: items.userData._id,\n        flag: \"unread\",\n      };\n\n      try {\n        const res = await getAllNotification(data);\n\n        if (res.data.response && res.data.response.statusCode === \"200\") {\n          // Set count of notification in chrome runtime\n          chrome.runtime.sendMessage(\"\", {\n            type: \"budgeText\",\n            badgeText: `${res.data.response.result.length}`,\n          });\n        }\n      } catch (err) {}\n    });\n  }\n\n  // Get new notification of client from server and send it to chrome notification\n  getNewNotification = () => {\n    chrome.runtime.sendMessage(\"\", {\n      type: \"notification\",\n      options: {\n        title: \"Just wanted to notify you\",\n        message: \"How great it is!\",\n        iconUrl:\n          \"https://ca.slack-edge.com/TC9UZTSLX-UC8TZ2210-f65b94665589-48\",\n        type: \"basic\",\n      },\n    });\n  };\n\n  // On media tour tour select\n  onMediaTourSelect = (tourType) => {\n    // Set confirmation modal state\n    this.setState({\n      confirmationModal: {\n        show: true,\n        tourType,\n      },\n    });\n  };\n\n  // On confirmation modal close\n  confirmationModalClose = () => {\n    // Set confirmation modal state\n    this.setState({\n      confirmationModal: {\n        show: false,\n        tourType: \"\",\n      },\n    });\n  };\n\n  // On select tour type click\n  onTourTypeSelect = (tourType, tourStep) => {\n    // Call close confirmation modal\n    this.confirmationModalClose();\n\n    setTimeout(() => {\n      if (tourStep === `${tourType} Modal`) {\n        this.openMenu(\"modal\", undefined, undefined, tourType);\n      } else {\n        this.openMenu(tourType);\n      }\n    }, 400);\n  };\n\n  openMenu = async (type, previewId, closeContinue, stepType) => {\n    // console.log(\"type\", type);\n\n    let mainObj = {},\n      objStatus = true;\n\n    if (\n      document.URL.includes(\"https://twitter.com\") &&\n      (type === \"video\" || type === \"audio\")\n    ) {\n      alert(`We don't have permission to add ${type} in this site`);\n      return \"\";\n    } else if (\n      document.URL.includes(\n        `${process.env.REACT_APP_NEW_MS1_DOMAIN}userTourDataDetail/readTrailit_trail_data_tour/`\n      ) &&\n      previewId !== \"\" &&\n      (type === \"video\" || type === \"audio\" || type === \"tooltip\")\n    ) {\n      alert(`We don't have permission to add ${type} in this site`);\n      return \"\";\n    } else if (\n      document.URL.includes(\"https://docs.google.com\") &&\n      type === \"tooltip\"\n    ) {\n      alert(`We don't have permission to add ${type} in this site`);\n      return \"\";\n    }\n\n    switch (type) {\n      case \"tooltip\":\n        mainObj.tourType = \"tooltip\";\n        // this.props.toggle();\n        this.props.mainToggle(true);\n        break;\n      case \"Make Edit\":\n        mainObj.tourType = \"Make Edit\";\n        this.props.mainToggle(true);\n        break;\n      case \"modal\":\n        mainObj.tourType = \"modal\";\n        mainObj.stepType = stepType;\n        chrome.runtime.sendMessage(\"\", {\n          type: \"chromeModal\",\n          status: true,\n        });\n        this.props.mainToggle(true);\n        break;\n      case \"video\":\n        mainObj.tourType = \"video\";\n        this.props.mainToggle(true);\n        break;\n      case \"preview\":\n        mainObj.tourType = \"preview\";\n        objStatus = false;\n        chrome.storage.local.get(\n          [\n            \"trail_web_user_tour\",\n            \"userData\",\n            \"isPreview\",\n            \"webUrl\",\n            \"continueTourStepId\",\n          ],\n          async function (items) {\n            let trail_web_user_tour = items.trail_web_user_tour;\n\n            if (trail_web_user_tour && trail_web_user_tour.length > 0) {\n              this.setState({ trail_web_user_tour: items.trail_web_user_tour });\n              let tour = {};\n\n              trail_web_user_tour.forEach((el, i) => {\n                if (el.flag === \"continue\" && !items.isPreview) {\n                  tour = {\n                    tourStep: i + 1,\n                    currentTourType: el.type,\n                    tourType: el.tourType,\n                    url: el.url,\n                  };\n                }\n                if (items.isPreview && items.continueTourStepId) {\n                  tour = {\n                    tourStep: items.continueTourStepId + 1,\n                    currentTourType:\n                      trail_web_user_tour[items.continueTourStepId].type,\n                    tourType:\n                      trail_web_user_tour[items.continueTourStepId].tourType,\n                    url: trail_web_user_tour[items.continueTourStepId].url,\n                  };\n                }\n              });\n\n              if (tour.url) {\n                if (closeContinue !== undefined) {\n                  let tourTData =\n                    trail_web_user_tour[\n                      trail_web_user_tour.length === tour.tourStep\n                        ? 0\n                        : tour.tourStep\n                    ];\n                  tour = {\n                    tourStep:\n                      trail_web_user_tour.length === tour.tourStep\n                        ? 1\n                        : tour.tourStep + 1,\n                    currentTourType: tourTData.type,\n                    tourType: \"preview\",\n                    url: tourTData.url,\n                  };\n                }\n              }\n\n              chrome.storage.local.set({\n                openButton: \"CreateTrail\",\n                tourStep: tour.tourStep ? tour.tourStep : 1,\n                currentTourType: tour.currentTourType\n                  ? tour.currentTourType\n                  : trail_web_user_tour[0].type,\n                tourType: tour.tourType ? tour.tourType : \"preview\",\n              });\n\n              if (\n                tour.url &&\n                !matchUrl(tour.url, document.URL) &&\n                (closeContinue !== undefined || closeContinue === undefined)\n              ) {\n                // Set loading state to false\n                chrome.storage.local.set({ loading: \"true\" });\n                chrome.runtime.sendMessage(\"\", {\n                  type: \"openInTab\",\n                  url: tour.url,\n                });\n              } else if (\n                !tour.url &&\n                !matchUrl(trail_web_user_tour[0].url, document.URL) &&\n                (closeContinue !== undefined || closeContinue === undefined)\n              ) {\n                // Set loading state to false\n                chrome.storage.local.set({ loading: \"true\" });\n                chrome.runtime.sendMessage(\"\", {\n                  type: \"openInTab\",\n                  url: trail_web_user_tour[0].url,\n                });\n              } else if (\n                !tour.url &&\n                matchUrl(trail_web_user_tour[0].url, document.URL) &&\n                (closeContinue !== undefined || closeContinue === undefined)\n              ) {\n                // Set loading state to false\n                chrome.storage.local.set({ loading: \"false\" });\n              } else if (\n                tour.url &&\n                matchUrl(tour.url, document.URL) &&\n                (closeContinue !== undefined || closeContinue === undefined)\n              ) {\n                // Set loading state to false\n                chrome.storage.local.set({ loading: \"false\" });\n              }\n            } else {\n              if (trail_web_user_tour && trail_web_user_tour.length > 0) {\n                chrome.storage.local.set({\n                  openButton: \"CreateTrail\",\n                  tourStep: 1,\n                  currentTourType: \"preview\",\n                });\n              } else {\n                if (items.isPreview && items.webUrl === document.URL) {\n                  chrome.storage.local.set({\n                    isPreview: false,\n                    webUrl: \"\",\n                  });\n\n                  alert(\"No trails to preview!\");\n                } else if (!items.isPreview) {\n                  alert(\"There are no trails, Please create the trails\");\n                }\n              }\n            }\n            if (\n              !preventToggle &&\n              trail_web_user_tour &&\n              trail_web_user_tour.length > 0\n            ) {\n              this.props.onChangeTourType(mainObj.tourType);\n              this.props.mainToggle(true);\n            }\n          }.bind(this)\n        );\n\n        break;\n      case \"\":\n        this.setState({\n          menuOpen: !this.state.menuOpen,\n        });\n        break;\n      case \"audio\":\n        mainObj.tourType = \"audio\";\n        this.props.mainToggle(true);\n        break;\n      default:\n        break;\n    }\n\n    if (mainObj.tourType && objStatus) {\n      if (mainObj.stepType && mainObj.stepType !== \"\") {\n        chrome.storage.local.set({\n          openButton: \"CreateTrail\",\n          currentTourType: \"preview\",\n          stepType: mainObj.stepType,\n          tourType: mainObj.tourType === undefined ? \"\" : mainObj.tourType,\n        });\n      } else {\n        chrome.storage.local.set({\n          openButton: \"CreateTrail\",\n          currentTourType: \"preview\",\n          tourType: mainObj.tourType === undefined ? \"\" : mainObj.tourType,\n        });\n      }\n    }\n\n    if (mainObj.tourType !== \"preview\") {\n      this.props.onChangeTourType(mainObj.tourType);\n    } else {\n    }\n  };\n\n  onToggleSubscription = (modalSubscription) => {\n    this.setState({ modalSubscription });\n  };\n\n  onToggleCreateNewTrailModal = (modalCreateNewTrailModal) => {\n    this.setState({ modalCreateNewTrailModal });\n  };\n\n  onContinueTour = (e) => {\n    this.openMenu(\"preview\", \"\", \"closeContinue\");\n  };\n\n  // Copy Web app link\n  copyWebApplink = (e) => {\n    const { currentUserId } = this.state;\n    chrome.storage.local.get(\n      [\n        \"trail_web_user_tour\",\n        \"userData\",\n        \"previewUserId\",\n        \"notification\",\n        \"saveSort\",\n        \"tourStep\",\n        \"closeContinue\",\n      ],\n      async (items) => {\n        if (\n          items.trail_web_user_tour != undefined &&\n          items.trail_web_user_tour.length == 0\n        ) {\n          alert(\"Please create trail\");\n          return null;\n        }\n\n        let trail_web_user_tour = items.trail_web_user_tour;\n\n        const trailId = trail_web_user_tour[0].trail_id;\n        const URL = trail_web_user_tour[0].url;\n        let qryString = URL.split(\"?\").length > 1 ? \"&\" : \"?\";\n        const trailUrl = `${process.env.REACT_APP_GO_TRAILIT_URL}/live/${URL}${qryString}trailUserId=${currentUserId}&trailId=${trailId}&trailPreview=true&tourStep=1&singleStepPreview=undefined&trailDataId=undefined&previewUserId=undefined&redirectUrl=undefined`;\n        function copyStringToClipboard(str) {\n          // Create new element\n          var el = document.createElement(\"textarea\");\n\n          // Set value (string to be copied)\n          el.value = str;\n\n          // Set non-editable to avoid focus and move outside of view\n          el.setAttribute(\"readonly\", \"\");\n          el.style = { position: \"absolute\", left: \"-9999px\" };\n          document.body.appendChild(el);\n\n          // Select text inside element\n          el.select();\n\n          // Copy text to clipboard\n          document.execCommand(\"copy\");\n\n          // Remove temporary element\n          document.body.removeChild(el);\n        }\n\n        alert(\"Successfully copied\");\n        copyStringToClipboard(trailUrl);\n      }\n    );\n  };\n\n  hideSettingModal() {\n    // Set chrome storage\n    chrome.storage.local.set({ showSetting: false });\n\n    // Set show setting state\n    // this.setState({ showSetting: false });\n  }\n\n  disableTooltipTourButton = () => {\n    if (matchUrl(\"https://imgur.com/\", document.URL)) return true;\n    if (document.URL.includes(\"https://www.reddit.com\")) return true;\n    if (document.URL.includes(\"https://twitter.com\")) return true;\n    if (document.URL.includes(\"https://docs.google.com\")) return true;\n    if (document.URL.includes(\"https://www.youtube.com\")) return true;\n\n    return false;\n  };\n\n  disableMediaTourButton = () => {\n    if (document.URL.includes(\"https://twitter.com\")) return true;\n\n    return false;\n  };\n\n  render() {\n    const {\n      menuOpen,\n      showSetting,\n      followerList,\n      closeContinue,\n      modalSubscription,\n      confirmationModal,\n      followedTrailUserData,\n      modalCreateNewTrailModal,\n    } = this.state;\n\n    // Auto logout function\n    autoLogoutFunction();\n\n    return (\n      <>\n        <style>{main1Css}</style>\n        <style>{main2Css}</style>\n        <div id=\"my-extension-root\">\n          {showSetting && (\n            <TrailSetting\n              show={showSetting}\n              hideModal={this.hideSettingModal}\n            />\n          )}\n          {confirmationModal.show && (\n            <CreateTourConfirmationModal\n              data={confirmationModal}\n              onModalClose={this.confirmationModalClose}\n              onTourSelect={this.onTourTypeSelect}\n            />\n          )}\n\n          <div\n            className={`my-extension ${\n              resizeScreen() && \"my-extension-mobile\"\n            } ${closeContinue && closeContinue}`}\n          >\n            {closeContinue && (\n              <button\n                className=\"trail_continue_btn\"\n                onClick={this.onContinueTour}\n              >\n                Continue\n              </button>\n            )}\n            <MySubscription\n              open={modalSubscription}\n              toggle={this.onToggleSubscription}\n              followerList={followerList}\n            />\n            <CreateNewTrailModal\n              open={modalCreateNewTrailModal}\n              toggle={this.onToggleCreateNewTrailModal}\n              followerList={followerList}\n            />\n\n            {/* <div className={`wrap open ${menuOpen ? 'createMenu': ''}`}> */}\n            <div className={`wrap open ${menuOpen ? \"createMenu\" : \"\"}`}>\n              {/* Preview Button */}\n              <button\n                className=\"blob\"\n                onClick={(e) => this.openMenu(\"preview\")}\n                data-title=\"View Trail\"\n              >\n                <svg\n                  width=\"40\"\n                  height=\"30\"\n                  viewBox=\"0 0 40 30\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M20.4531 20.0751C23.3699 20.0751 25.7344 17.7433 25.7344 14.8668C25.7344 11.9903 23.3699 9.65845 20.4531 9.65845C17.5364 9.65845 15.1719 11.9903 15.1719 14.8668C15.1719 17.7433 17.5364 20.0751 20.4531 20.0751Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M39.8757 14.4097C38.3466 10.3186 35.6921 6.78068 32.2403 4.23311C28.7885 1.68554 24.6906 0.240019 20.4531 0.0751953C16.2157 0.240019 12.1178 1.68554 8.66595 4.23311C5.21411 6.78068 2.55963 10.3186 1.03057 14.4097C0.927309 14.7051 0.927309 15.0286 1.03057 15.3241C2.55963 19.4151 5.21411 22.953 8.66595 25.5006C12.1178 28.0482 16.2157 29.4937 20.4531 29.6585C24.6906 29.4937 28.7885 28.0482 32.2403 25.5006C35.6921 22.953 38.3466 19.4151 39.8757 15.3241C39.9789 15.0286 39.9789 14.7051 39.8757 14.4097ZM20.4531 23.6074C18.7818 23.6074 17.1481 23.0948 15.7584 22.1343C14.3688 21.1739 13.2857 19.8088 12.6461 18.2117C12.0065 16.6146 11.8392 14.8572 12.1653 13.1617C12.4913 11.4662 13.2961 9.90876 14.4779 8.68637C15.6597 7.46399 17.1654 6.63153 18.8046 6.29428C20.4438 5.95702 22.1428 6.13012 23.6869 6.79167C25.231 7.45322 26.5507 8.57351 27.4792 10.0109C28.4078 11.4483 28.9034 13.1381 28.9034 14.8669C28.8999 17.1839 28.0085 19.405 26.4246 21.0434C24.8406 22.6818 22.6932 23.6038 20.4531 23.6074Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n                {/* <span>Preview</span> */}\n              </button>\n\n              {/* Tooltip */}\n              <button\n                className=\"blob create_tooltip_button\"\n                onClick={(e) => this.openMenu(\"tooltip\")}\n                data-title=\"Tooltip\"\n                disabled={\n                  this.disableTooltipTourButton() || followedTrailUserData\n                }\n              >\n                <svg\n                  width=\"40\"\n                  height=\"40\"\n                  viewBox=\"0 0 40 40\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M26 13.9998H22V9.99986C22 9.46943 21.7893 8.96073 21.4142 8.58567C21.0391 8.2106 20.5304 7.99989 20 7.99989C19.4696 7.99989 18.9609 8.2106 18.5858 8.58567C18.2107 8.96073 18 9.46943 18 9.99986V13.9998H14C13.4696 13.9998 12.9609 14.2105 12.5858 14.5856C12.2107 14.9607 12 15.4694 12 15.9998C12 16.5302 12.2107 17.0389 12.5858 17.414C12.9609 17.789 13.4696 17.9997 14 17.9997H18V21.9997C18 22.5301 18.2107 23.0388 18.5858 23.4139C18.9609 23.789 19.4696 23.9997 20 23.9997C20.5304 23.9997 21.0391 23.789 21.4142 23.4139C21.7893 23.0388 22 22.5301 22 21.9997V17.9997H26C26.5304 17.9997 27.0391 17.789 27.4142 17.414C27.7893 17.0389 28 16.5302 28 15.9998C28 15.4694 27.7893 14.9607 27.4142 14.5856C27.0391 14.2105 26.5304 13.9998 26 13.9998ZM34 0H6C4.4087 0 2.88258 0.632132 1.75736 1.75733C0.632141 2.88254 0 4.40864 0 5.99992V25.9996C0 27.5909 0.632141 29.117 1.75736 30.2422C2.88258 31.3674 4.4087 31.9996 6 31.9996H29.18L36.58 39.4194C36.7669 39.6048 36.9885 39.7515 37.2322 39.851C37.4759 39.9505 37.7368 40.001 38 39.9994C38.2624 40.0062 38.5226 39.9514 38.76 39.8394C39.1252 39.6894 39.4379 39.4346 39.6586 39.1072C39.8792 38.7797 39.998 38.3943 40 37.9995V5.99992C40 4.40864 39.3679 2.88254 38.2426 1.75733C37.1174 0.632132 35.5913 0 34 0ZM36 33.1795L31.42 28.5796C31.2331 28.3942 31.0115 28.2476 30.7678 28.1481C30.5241 28.0485 30.2632 27.9981 30 27.9996H6C5.46957 27.9996 4.96086 27.7889 4.58579 27.4138C4.21071 27.0388 4 26.5301 4 25.9996V5.99992C4 5.46949 4.21071 4.96079 4.58579 4.58572C4.96086 4.21066 5.46957 3.99994 6 3.99994H34C34.5304 3.99994 35.0391 4.21066 35.4142 4.58572C35.7893 4.96079 36 5.46949 36 5.99992V33.1795Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n                {/* <span>ToolTip</span> */}\n              </button>\n\n              {/* Create Modal */}\n              <button\n                className=\"blob create_video_button\"\n                onClick={(e) => this.onMediaTourSelect(\"video\")}\n                data-title=\"Video\"\n                disabled={\n                  this.disableMediaTourButton() || followedTrailUserData\n                }\n              >\n                <svg\n                  width=\"41\"\n                  height=\"29\"\n                  viewBox=\"0 0 41 29\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M18.8779 6.55304H14.8779V12.553H8.87793V16.553H14.8779V22.553H18.8779V16.553H24.8779V12.553H18.8779V6.55304Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M32.8789 4.55298C32.8789 2.34698 31.0849 0.552979 28.8789 0.552979H4.87891C2.67291 0.552979 0.878906 2.34698 0.878906 4.55298V24.553C0.878906 26.759 2.67291 28.553 4.87891 28.553H28.8789C31.0849 28.553 32.8789 26.759 32.8789 24.553V17.887L40.8789 24.553V4.55298L32.8789 11.219V4.55298ZM28.8809 24.553H4.87891V4.55298H28.8789V14.553L28.8809 24.553Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n                {/* <span>Video</span> */}\n              </button>\n              {/* )} */}\n\n              <button className=\"menu\" onClick={(e) => this.openMenu(\"\")}>\n                <img\n                  alt=\"tour_menu\"\n                  className=\"trail_plus trail_edit_v2\"\n                  src={require(`./images/trailit_X_button_new.png`)}\n                />\n              </button>\n              {/* {!document.URL.includes(\"https://twitter.com\") && ( */}\n              <React.Fragment>\n                {/* Create Video */}\n                <button\n                  className=\"blob create_audio_button\"\n                  onClick={(e) => this.onMediaTourSelect(\"audio\")}\n                  data-title=\"Audio\"\n                  disabled={\n                    this.disableMediaTourButton() || followedTrailUserData\n                  }\n                >\n                  <svg\n                    className=\"audio_svg\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"48\"\n                    height=\"48\"\n                    viewBox=\"0 0 48 48\"\n                  >\n                    <g\n                      id=\"Group_471\"\n                      data-name=\"Group 471\"\n                      transform=\"translate(11717 4613)\"\n                    >\n                      <circle\n                        id=\"Ellipse_101\"\n                        data-name=\"Ellipse 101\"\n                        cx=\"24\"\n                        cy=\"24\"\n                        r=\"24\"\n                        transform=\"translate(-11717 -4613)\"\n                        fill=\"#fff\"\n                      />\n                      <g\n                        id=\"audio-interface-speaker-symbol\"\n                        transform=\"translate(-11707 -4671.857)\"\n                      >\n                        <g\n                          id=\"Group_282\"\n                          data-name=\"Group 282\"\n                          transform=\"translate(0 72.857)\"\n                        >\n                          <path\n                            stroke-width=\"0\"\n                            id=\"Path_111\"\n                            data-name=\"Path 111\"\n                            d=\"M3.9,86.838l9.831,5.992V72.857L3.9,78.849H1.3A1.3,1.3,0,0,0,0,80.181v5.327A1.3,1.3,0,0,0,1.3,86.84H3.9ZM1.248,80.1H3.9l8.586-4.746v14.98L3.9,85.486H1.248Z\"\n                            transform=\"translate(0 -72.857)\"\n                            fill=\"#ffffff\"\n                            className=\"svg_btn\"\n                          />\n                          <path\n                            stroke-width=\"0\"\n                            id=\"Path_112\"\n                            data-name=\"Path 112\"\n                            d=\"M349.714,171.382v1.387a7.074,7.074,0,0,0,0-12.483v1.387s2.5,1.059,2.5,4.855S349.714,171.382,349.714,171.382Z\"\n                            transform=\"translate(-334.734 -156.541)\"\n                            fill=\"#ffffff\"\n                            className=\"svg_btn\"\n                          />\n                          <path\n                            stroke-width=\"0\"\n                            id=\"Path_113\"\n                            data-name=\"Path 113\"\n                            d=\"M524.571,117.829v1.648s3.745-1.8,3.745-8.738S524.571,102,524.571,102v1.62s2.5,1.378,2.5,7.118S524.571,117.829,524.571,117.829Z\"\n                            transform=\"translate(-502.101 -100.752)\"\n                            className=\"svg_btn\"\n                            fill=\"#ffffff\"\n                          />\n                          <path\n                            stroke-width=\"0\"\n                            id=\"Path_114\"\n                            data-name=\"Path 114\"\n                            d=\"M437.143,144.543v1.58s3.745-2.06,3.745-7.49-3.745-7.49-3.745-7.49v1.528s2.5,1.624,2.5,5.962S437.143,144.543,437.143,144.543Z\"\n                            transform=\"translate(-418.418 -128.647)\"\n                            className=\"svg_btn\"\n                            fill=\"#ffffff\"\n                          />\n                        </g>\n                      </g>\n                    </g>\n                  </svg>\n                  {/* <span>Create Audio</span> */}\n                </button>\n              </React.Fragment>\n\n              <button\n                className=\"blob\"\n                data-title=\"Edit\"\n                onClick={(e) => this.openMenu(\"Make Edit\")}\n                disabled={followedTrailUserData}\n              >\n                <svg\n                  width=\"40\"\n                  height=\"29\"\n                  viewBox=\"0 0 40 29\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M0 0V4.12698H24.1631V0H0ZM0 8.25397V12.381H24.1631V8.25397H0ZM36.3252 8.52222C36.0433 8.52222 35.7614 8.64603 35.5399 8.87302L33.5263 10.9365L37.6542 15.1667L39.6678 13.1032C40.1107 12.6698 40.1107 11.9476 39.6678 11.5143L37.0904 8.87302C36.9923 8.76493 36.874 8.67817 36.7426 8.6179C36.6111 8.55763 36.4692 8.52509 36.3252 8.52222ZM32.3584 12.1333L20.1359 24.6381V28.8889H24.2839L36.4863 16.3635L32.3584 12.1333ZM0 16.5079V20.6349H16.1087V16.5079H0Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n              </button>\n\n              {/* Share Trail Button */}\n              <button\n                className=\"blob\"\n                onClick={this.copyWebApplink}\n                data-title=\"Share\"\n              >\n                <svg\n                  width=\"40\"\n                  height=\"36\"\n                  viewBox=\"0 0 40 36\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M3.75 0C1.7 0 0 1.70201 0 3.75443V31.2869C0 33.3393 1.7 35.0413 3.75 35.0413H26.25C28.3 35.0413 30 33.3393 30 31.2869V25.0295H25V30.0354H5V5.0059H15V0H3.75ZM30 0V5.0059C19.75 5.0059 11.5 12.715 10.3 22.6767C11.35 18.2715 15.25 15.0177 20 15.0177H30V20.0236L40 10.0118L30 0Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nlet popoverCount = 0;\nlet defaultComp;\nlet flipped;\nlet tourUrl;\n\nclass DefaultButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      trailList: [],\n      tourStatus: \"continue\",\n      tourType: \"\",\n      tourStep: \"\",\n      stepType: \"\",\n      currentTourType: \"\",\n      web_url: \"\",\n      tourSide: \"next\",\n      message: \"\",\n      overlay: false,\n      loading: false,\n      fileLoading: false,\n      fileAddStatus: false,\n      title: \"\",\n      currUserId: null,\n      follow: false,\n      publishButtonShow: false,\n      publishLoader: false,\n      count: 0,\n      saveSort: false,\n      fileName: \"\",\n      createModalOpen: false,\n      hideNav: false,\n      rowData: {},\n      MobileTargetNotFound: {},\n      deleteModal: {\n        id: null,\n        title: null,\n        show: false,\n        trail: false,\n      },\n      sendTipModal: false,\n      isLoading: false,\n      sendLoader: false,\n      isSuccess: false,\n      onDone: false,\n      setError: null,\n      isDraggable: false,\n      draggable: true,\n      dragPosition: { x: 0, y: 0 },\n      dynamicPopupButton: true,\n      trailName: \"\",\n      openSidebar: false,\n      currentTrailsTab: \"My Trails\",\n      previewModalRef: false,\n      audioRef: false,\n      videoRef: false,\n      tooltipRef: false,\n      targetDataNotFound: false,\n      isTourLoading: false,\n      titleInvalid: false,\n      fileNameInvalid: false,\n    };\n\n    this.previewModalRef = React.createRef();\n\n    this.onDeleteButtonClick = this.onDeleteButtonClick.bind(this);\n  }\n\n  onTourLoading = (value) => {\n    // Set state\n    this.setState({ isTourLoading: value });\n  };\n\n  // Hide send tip modal\n  onSendTipModalClose = () => {\n    // Hide send tip modal\n    this.setState({\n      sendTipModal: false,\n      sendLoader: false,\n      isLoading: false,\n    });\n  };\n\n  // Show send tip modal\n  onSendTipModalOpen = () => {\n    // Show send tip modal\n    this.setState({ sendTipModal: true });\n  };\n\n  // Hide delete modal\n  onDeleteModalClose = () => {\n    // Delete modal state to false\n    this.setState({\n      deleteModal: {\n        id: null,\n        show: false,\n        title: null,\n        trail: false,\n      },\n    });\n\n    chrome.storage.local.set({\n      trailDeleteModal: {\n        value: \"close\",\n        title: \"\",\n        id: \"\",\n      },\n    });\n  };\n\n  // Show delete modal\n  onDeleteModalOpen = (title, id, trail) => {\n    // Delete modal state to true\n    this.setState({\n      deleteModal: {\n        id,\n        title,\n        trail,\n        show: true,\n      },\n    });\n  };\n\n  // On delete button click\n  async onDeleteButtonClick() {\n    try {\n      // Set state\n      this.setState({ onDone: true });\n\n      const { id, trail } = this.state.deleteModal;\n\n      if (trail) {\n        // Delete trail by id\n        await deleteSingleTrail(id);\n\n        chrome.storage.local.get([\"trail_id\"], async (items) => {\n          if (items.trail_id && items.trail_id === id) {\n            // Close menu\n            toggle();\n          }\n        });\n\n        // Set state\n        this.setState({ onDone: false });\n      } else {\n        // Delete step by id\n        const { data } = await deleteTrail(id);\n\n        if (data.response && data.response.statusCode === \"200\") {\n          chrome.storage.local.get(\n            [\n              \"userData\",\n              \"trail_id\",\n              \"trail_web_user_tour\",\n              \"noStepsToWatch\",\n              \"isPreview\",\n            ],\n            async (items) => {\n              // Call common get user data function\n              await this.getCurrUserDataCommon(items);\n\n              // Set state\n              this.setState({ onDone: false });\n            }\n          );\n        }\n      }\n\n      // Call on delete modal close to hide modal\n      this.onDeleteModalClose();\n    } catch (err) {}\n  }\n\n  async getSingleTrail(data) {\n    let res;\n    try {\n      res = await getSingleTrailData(data.trail_id, data.trail_data_id);\n    } catch (err) {}\n\n    if (\n      res.data &&\n      res.data.response &&\n      res.data.response.statusCode === \"200\"\n    ) {\n      let response = { ...res.data.response.result };\n      let payload = {\n        userId: data.userData.user_id,\n        trail_data_id: response.trail_data_id,\n        url: response.url,\n        path: response.path,\n        selector: response.selector,\n        class: response.class,\n        title: response.title,\n        description: response.description,\n        web_url: response.web_url,\n        trail_id: response.trail_id,\n        type: response.type,\n        uniqueTarget: response.unique_target,\n        unique_target_one: response.unique_target_one,\n        mobile_media_type: response.mobile_media_type,\n        mobile_title: response.mobile_title,\n        mobile_description: response.mobile_description,\n        mediaType: response.media_type,\n        created: response.created,\n        sortId: response.trail_sortId ? response.trail_sortId : \"\",\n        flag: response.flag,\n      };\n\n      chrome.storage.local.get(\n        [\"trail_id\", \"userData\", \"tourStep\", \"isPreviewSingleTrail\"],\n        (storage) => {\n          if (data.loggedInData) {\n            chrome.storage.local.set({\n              trail_web_user_tour: [payload],\n              tourStep: storage.tourStep ? storage.tourStep : \"\",\n              trail_id: data.trail_id,\n              old_trail_id: storage.trail_id,\n              old_user_data: { ...storage.userData },\n              isPreviewSingleTrail: false,\n              trail_data_id: data.trail_data_id,\n              webUrl: \"\",\n              userData: { ...data.loggedInData },\n              authorData: { ...data.userData },\n            });\n          } else {\n            chrome.storage.local.set({\n              tourStep: data.tourStep ? data.tourStep : \"\",\n              trail_id: data.trail_id,\n            });\n          }\n        }\n      );\n\n      return payload;\n    }\n  }\n\n  async getCurrUserDataCommon(items) {\n    const user_id = items.userData._id;\n    let res,\n      continueFlag = false,\n      trail_id = items.trail_id;\n\n    try {\n      // Get user's trails from database\n      let screen = resizeScreen() ? \"mobile\" : \"web\";\n\n      res = await getUserOneTrail(trail_id, screen);\n\n      trailWebUserTour = items.trail_web_user_tour;\n    } catch (err) {}\n\n    const handleSteps = (result) => {\n      if (get([\"response\", \"result\", \"steps\"], result)) {\n        return result.response.result.steps;\n      } else {\n        return result.response.result || [];\n      }\n    };\n\n    const result = res.data;\n\n    if (\n      result.response &&\n      result.response.statusCode !== 404 &&\n      handleSteps(result).length > 0\n    ) {\n      allTrails = handleSteps(result).map((el) => {\n        if (el.flag === \"continue\") {\n          continueFlag = true;\n        }\n\n        return {\n          userId: user_id,\n          trail_data_id: el.trail_data_id,\n          url: el.url,\n          path: el.path,\n          selector: el.selector,\n          class: el.class,\n          title: el.title,\n          description: el.description,\n          web_url: el.web_url,\n          trail_id: el.trail_id,\n          type: el.type,\n          uniqueTarget: el.unique_target,\n          unique_target_one: el.unique_target_one,\n          mobile_media_type: el.mobile_media_type,\n          mobile_title: el.mobile_title,\n          mobile_description: el.mobile_description,\n          mediaType: el.media_type,\n          created: el.created,\n          sortId: el.trail_sortId ? el.trail_sortId : \"\",\n          flag: el.flag,\n        };\n      });\n    } else {\n      trailWebUserTour = [];\n      allTrails = [];\n    }\n\n    trailWebUserTour = allTrails;\n    obj.trailList = allTrails;\n\n    this.setState({ trail_web_user_tour: trailWebUserTour });\n\n    chrome.storage.local.get(\n      [\"trail_id\", \"userData\", \"tourStep\", \"isPreview\"],\n      (storage) => {\n        if (items.loggedInData) {\n          chrome.storage.local.set({\n            trail_web_user_tour: allTrails,\n            tourStep: storage.tourStep ? storage.tourStep : \"\",\n            trail_id,\n            old_trail_id: storage.trail_id,\n            isPreview: false,\n            isGuest: false,\n            continueTourStepId: \"\",\n            old_user_data: { ...storage.userData },\n            webUrl: \"\",\n            userData: { ...items.loggedInData },\n            authorData: { ...items.userData },\n            noStepsToWatch: items.noStepsToWatch,\n          });\n        } else {\n          chrome.storage.local.set({\n            trail_web_user_tour: allTrails,\n            tourStep: items.tourStep ? items.tourStep : \"\",\n            trail_id,\n            closeContinue: continueFlag,\n          });\n        }\n      }\n    );\n  }\n\n  async handlePreviewFromWeb(msg) {\n    if (msg.message === \"preview_all\") {\n      // Call common get user data function\n      await this.getCurrUserDataCommon({\n        userData: msg.payload.userData,\n        trail_id: msg.payload.trail_id,\n        trail_web_user_tour: [],\n        loggedInData: msg.payload.loggedInData,\n      });\n      chrome.storage.local.get([\"trail_id\"], (items) => {\n        chrome.storage.local.set({\n          isPreview: true,\n          closeContinue: false,\n          webUrl: msg.payload.url,\n          old_trail_id: items.trail_id,\n        });\n      });\n    } else if (msg.message === \"continue_preview\") {\n      // Call common get user data function\n      await this.getCurrUserDataCommon({\n        userData: msg.payload.userData,\n        trail_id: msg.payload.trail_id,\n        trail_web_user_tour: [],\n        loggedInData: msg.payload.loggedInData,\n      });\n      chrome.storage.local.get([\"trail_id\"], (items) => {\n        chrome.storage.local.set({\n          isPreview: true,\n          closeContinue: false,\n          continueTourStepId: msg.payload.tourStep,\n          webUrl: msg.payload.url,\n          old_trail_id: items.trail_id,\n        });\n      });\n    } else if (msg.message === \"preview_single\") {\n      await this.getSingleTrail({\n        userData: msg.payload.userData,\n        trail_id: msg.payload.trail_id,\n        trail_data_id: msg.payload.trail_data_id,\n        loggedInData: msg.payload.loggedInData,\n      });\n      chrome.storage.local.get([\"trail_id\", \"userData\"], (items) => {\n        chrome.storage.local.set({\n          isPreviewSingleTrail: true,\n          isPreview: false,\n          webUrl: msg.payload.url,\n          old_trail_id: items.trail_id,\n        });\n      });\n    } else if (msg.message === \"preview_without_login\") {\n      await this.getCurrUserDataCommon({\n        userData: msg.payload.userData,\n        trail_id: msg.payload.trail_id,\n        trail_web_user_tour: [],\n        loggedInData: msg.payload.loggedInData,\n        noStepsToWatch: msg.payload.noStepsToWatch,\n        isPreview: true,\n      });\n      chrome.storage.local.get([\"trail_id\"], (items) => {\n        chrome.storage.local.set({\n          isPreview: true,\n          closeContinue: false,\n          webUrl: msg.payload.url,\n          old_trail_id: items.trail_id,\n          isGuest: true,\n        });\n      });\n    }\n  }\n\n  cleanupStorage = () => {\n    const { currentTourType, tourType, stepType } = this.state;\n\n    if (\n      currentTourType === \"preview\" &&\n      (tourType === \"audio\" ||\n        tourType === \"video\" ||\n        tourType === \"Make Edit\" ||\n        tourType === \"tooltip\")\n    ) {\n      chrome.storage.local.set({ tourType: \"\", currentTourType: \"\" });\n    }\n\n    if (\n      currentTourType === \"preview\" &&\n      tourType === \"modal\" &&\n      (stepType === \"audio\" || stepType === \"video\")\n    ) {\n      chrome.storage.local.set({\n        tourType: \"\",\n        currentTourType: \"\",\n        stepType: \"\",\n      });\n    }\n\n    // Remove beforeunload event listener\n    window.removeEventListener(\"beforeunload\", this.cleanupStorage);\n  };\n\n  componentDidMount() {\n    const { currentTourType, tourType } = this.state;\n\n    chrome.runtime.onMessage.addListener(this.handlePreviewFromWeb.bind(this));\n\n    window.addEventListener(\"resize\", this.resize);\n    this.resize();\n\n    this.setState({ overlay: true });\n    this.onChromeStorageChange();\n    // this.onCreateTooltipHandle();\n\n    window.addEventListener(\n      \"load\",\n      () => {\n        this.setState({ overlay: false });\n        // this.onCreateTooltipHandle();\n      },\n      false\n    );\n\n    chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    chrome.storage.onChanged.addListener(async (changes) => {\n      if (\n        changes.currentTourType &&\n        changes.currentTourType.newValue === \"preview\" &&\n        changes.tourType &&\n        changes.tourType.newValue === \"tooltip\"\n      ) {\n        // Call onCreateTooltipHandler function\n        this.onCreateTooltipHandle();\n      } else if (\n        changes.currentTourType &&\n        changes.currentTourType.oldValue === \"preview\" &&\n        changes.tourType &&\n        changes.tourType.oldValue === \"tooltip\"\n      ) {\n        // Call removeTooltipHanlder function\n        this.removeTooltipHandler();\n      }\n\n      if (\n        changes.trailDeleteModal &&\n        changes.trailDeleteModal.newValue &&\n        changes.trailDeleteModal.newValue.value === \"open\"\n      ) {\n        const title = changes.trailDeleteModal.newValue.title;\n        const id = changes.trailDeleteModal.newValue.id;\n        // Call delete modal open function\n        this.onDeleteModalOpen(title, id, true);\n      }\n\n      if (\n        changes.trailDeleteModal &&\n        changes.trailDeleteModal.newValue &&\n        changes.trailDeleteModal.newValue.value === \"close\"\n      ) {\n        // Call delete modal close function\n        this.onDeleteModalClose();\n      }\n\n      if (changes.currentTrailsTab && changes.currentTrailsTab.newValue) {\n        // Set current trail tab state\n        this.setState({ currentTrailsTab: changes.currentTrailsTab.newValue });\n      }\n\n      if (changes.tourType && changes.tourType.newValue === \"\") {\n        // Set side bar state\n        this.setState({ openSidebar: false, open: false });\n      }\n\n      if (\n        changes.tourType &&\n        (changes.tourType.newValue === \"video\" ||\n          changes.tourType.newValue === \"audio\" ||\n          changes.tourType.newValue === \"Make Edit\")\n      ) {\n        // Set side bar state\n        this.setState({ openSidebar: true, open: true });\n      }\n\n      if (changes.trail_name) {\n        // Set state\n        this.setState({ trailName: changes.trail_name.newValue });\n      }\n\n      if (changes.isDraggable) {\n        // Set is draggable state\n        this.setState({ isDraggable: changes.isDraggable.newValue });\n      }\n\n      if (\n        (changes.tourType && changes.tourType.newValue === \"preview\") ||\n        (changes.currentTourType &&\n          changes.currentTourType.newValue === \"preview\") ||\n        (changes.tourStep && changes.tourStep.newValue === 1)\n      ) {\n        this.onChromeStorageChange();\n        this.setState({ overlay: false });\n      } else if (\n        changes.trail_web_user_tour &&\n        changes.trail_web_user_tour.newValue &&\n        changes.trail_web_user_tour.oldValue &&\n        (changes.trail_web_user_tour.newValue.length > 0 ||\n          changes.trail_web_user_tour.newValue.length !==\n            changes.trail_web_user_tour.oldValue.length)\n      ) {\n        this.onChromeStorageChange();\n        this.setState({ overlay: false });\n      }\n\n      if (changes.openButton && changes.openButton.newValue === \"CreateTrail\") {\n        this.onChromeStorageChange();\n      }\n\n      if (changes.currentTourType && changes.currentTourType.newValue === \"\") {\n        // Remove trailit logo function\n        removeTrailitLogo();\n      }\n    });\n\n    chrome.storage.local.get(\n      [\"isPreview\", \"isPreviewSingleTrail\", \"isDraggable\"],\n      (items) => {\n        if (items.isPreview || items.isPreviewSingleTrail) {\n          this.setState({ dynamicPopupButton: false });\n        }\n\n        if (items.isDraggable !== undefined && items.isDraggable !== null) {\n          // Set draggable state\n          this.setState({\n            isDraggable: items.isDraggable,\n          });\n        }\n      }\n    );\n\n    // Cleanup function\n    window.addEventListener(\"beforeunload\", this.cleanupStorage);\n  }\n\n  handleMessage(msg) {\n    if (msg.message === \"chrome_modal\") {\n      this.onToggleCreateModal(true);\n    }\n    this.setState({ message: msg.body });\n  }\n\n  componentWillUnmount() {\n    // Remove listener when this component unmounts\n    window.removeEventListener(\"resize\", this.resize);\n\n    if (updateOverlay) {\n      window.removeEventListener(\"resize\", updateOverlay);\n    }\n\n    chrome.runtime.onMessage.removeListener(this.handleMessage);\n\n    // Call removeTooltipHandler function\n    this.removeTooltipHandler();\n  }\n\n  // Copy Web app link\n  copyWebApplink = (e) => {\n    const { trailList, currUserId } = this.state;\n\n    if (trailList.length == 0) {\n      alert(\"Please create trail\");\n      return null;\n    }\n\n    const trailId = trailList[trailList.length - 1].trail_id;\n    const URL = trailList[0].url;\n    let qryString = URL.split(\"?\").length > 1 ? \"&\" : \"?\";\n    const trailUrl = `${process.env.REACT_APP_GO_TRAILIT_URL}/live/${URL}${qryString}trailUserId=${currUserId}&trailId=${trailId}&trailPreview=true&tourStep=1&singleStepPreview=undefined&trailDataId=undefined&previewUserId=undefined&redirectUrl=undefined`;\n\n    function copyStringToClipboard(str) {\n      // Create new element\n      var el = document.createElement(\"textarea\");\n\n      // Set value (string to be copied)\n      el.value = str;\n\n      // Set non-editable to avoid focus and move outside of view\n      el.setAttribute(\"readonly\", \"\");\n      el.style = { position: \"absolute\", left: \"-9999px\" };\n      document.body.appendChild(el);\n\n      // Select text inside element\n      el.select();\n\n      // Copy text to clipboard\n      document.execCommand(\"copy\");\n\n      // Remove temporary element\n      document.body.removeChild(el);\n    }\n\n    alert(\"Successfully copied\");\n    copyStringToClipboard(trailUrl);\n  };\n\n  followTrail = (e) => {\n    e.preventDefault();\n    const previewUserId = this.state.trailList[this.state.tourStep - 1].userId;\n\n    const followData = {\n      // follower_id: this.state.currUserId,\n      previewUserId,\n    };\n\n    followTrails(followData)\n      .then((res) => {\n        if (res.data.response && res.data.response.statusCode !== \"201\") {\n          throw new Error(\"Error while following trail!\");\n        }\n\n        // Set followData into chrome storage\n        chrome.storage.local.set({\n          followData: { previewUserId, follow: true },\n        });\n        this.setState({ follow: true });\n      })\n      .catch((err) => {});\n  };\n\n  mouseOverEventData = (e) => {\n    chrome.storage.local.get(\n      [\n        \"tourStatus\",\n        \"tourType\",\n        \"tourStep\",\n        \"currentTourType\",\n        \"closeContinue\",\n      ],\n      function (items) {\n        //\n        if (\n          items.tourType !== undefined &&\n          this.state.tourType !== items.tourType\n        ) {\n          if (items.tourType === \"preview\") {\n            if (this.state.trailList.length > 0) {\n              let tourStape = items.tourStep === \"\" ? 1 : items.tourStep;\n              this.setState({\n                tourStep: tourStape,\n                tourType: items.tourType,\n                currentTourType: this.state.trailList[tourStape - 1].type,\n              });\n            } else {\n              this.setState({ tourType: items.tourType });\n            }\n          }\n        }\n      }.bind(this)\n    );\n\n    const trailOverlay = document\n      .getElementById(\"extension-div\")\n      .shadowRoot.querySelector(\".trail_overlay\");\n    if (!trailOverlay) {\n      if (\n        this.state.tourStatus === \"continue\" &&\n        (this.state.tourType === \"tooltip\" ||\n          (this.state.tourType === \"Make Edit\" &&\n            !_.isEmpty(this.state.rowData)))\n      ) {\n        // let parentElement = queryParentElement(e.target, '.sidepanal');\n        let parentElement = queryParentElement(e.target, \"#extension-div\");\n        let parentElement1 = queryParentElement(e.target, \".trail_tooltip\");\n        let getClass =\n          parentElement == null ? \"\" : parentElement.getAttribute(\"class\");\n        let getClass1 =\n          parentElement1 == null ? \"\" : parentElement1.getAttribute(\"class\");\n\n        if (root1 === \"block\" && getClass === \"\" && getClass1 === \"\") {\n          e.target.classList.add(\"trail_select_bx\");\n        }\n      }\n    }\n  };\n\n  mouseClickEventData = (e) => {\n    e.target.classList.remove(\"trail_select_bx\");\n    let uniqueTarget = $.trim(unique(e.target));\n\n    if (\n      this.state.tourStatus === \"continue\" &&\n      (this.state.tourType === \"tooltip\" || this.state.tourType === \"Make Edit\")\n    ) {\n      if (\n        this.state.tourType === \"tooltip\" ||\n        (this.state.tourType === \"Make Edit\" && !_.isEmpty(this.state.rowData))\n      ) {\n        let parentElement = queryParentElement(e.target, \"#extension-div\");\n        let parentElement1 = queryParentElement(e.target, \".trail_tooltip\");\n        let getClass =\n          parentElement == null ? \"\" : parentElement.getAttribute(\"class\");\n        let getClass1 =\n          parentElement1 == null ? \"\" : parentElement1.getAttribute(\"class\");\n        let getClass2;\n\n        const trailOverlay = document\n          .getElementById(\"extension-div\")\n          .shadowRoot.querySelector(\".trail_overlay\");\n        if (trailOverlay) {\n          getClass2 = trailOverlay.getAttribute(\"class\");\n        }\n\n        if (\n          root1 === \"block\" &&\n          getClass === \"\" &&\n          getClass1 === \"\" &&\n          getClass2 === undefined\n        ) {\n          e.preventDefault();\n          e.stopPropagation();\n          e.target.classList.add(\"trail_web_user\");\n          e.target.classList.add(\"trail_tour_tooltip\");\n          let original = document.querySelector(uniqueTarget);\n          let bounding = original.getBoundingClientRect();\n          let offset = $(uniqueTarget).offset();\n          let leftPosition = offset.left;\n          let topPosition = offset.top;\n          var docHeight = document.documentElement.scrollHeight;\n          $(\".trail_tour_tooltip\").prepend(\n            \"<span class='trail_user_tooltip trail_tour_ToolTipExtend'></span>\"\n          );\n          let node = document.querySelector(\".trail_user_tooltip\");\n\n          let elementIndex = Array.from(\n            e.target.parentElement.children\n          ).indexOf(e.target);\n\n          // Call add overlay function\n          addOverlay();\n\n          // Call set overlay html function\n          setOverlayHtml(\n            window,\n            docHeight,\n            topPosition,\n            bounding,\n            leftPosition\n          );\n\n          updateOverlay = () => {\n            if (\n              root1 === \"block\" &&\n              getClass === \"\" &&\n              getClass1 === \"\" &&\n              getClass2 === undefined\n            ) {\n              let docHeight = document.documentElement.scrollHeight;\n              let bounding = original.getBoundingClientRect();\n              let offset = $(uniqueTarget).offset();\n              let leftPosition = offset.left;\n              let topPosition = offset.top;\n\n              // Call add overlay function\n              addOverlay();\n\n              // Call set overlay html function\n              setOverlayHtml(\n                window,\n                docHeight,\n                topPosition,\n                bounding,\n                leftPosition\n              );\n            }\n          };\n\n          window.addEventListener(\"resize\", () => {\n            // Update overlay\n            updateOverlay();\n          });\n\n          ReactDOM.render(\n            <Tooltip\n              path={e.path}\n              target={e.target}\n              count={popoverCount}\n              type={this.state.tourType}\n              elementIndex={elementIndex}\n              uniqueTarget={uniqueTarget}\n              rowData={this.state.rowData}\n              onCancel={this.onCancelTooltip}\n              onHandleChange={this.handleChange}\n              onTourLoading={this.onTourLoading}\n              isTourLoading={this.state.isTourLoading}\n              onSave={\n                this.state.tourType === \"Make Edit\"\n                  ? this.onUpdateTrail\n                  : this.onSaveTrail\n              }\n            />,\n            node\n          );\n          popoverCount++;\n        }\n      }\n    }\n  };\n\n  mouseOutEventData = (e) => {\n    e.preventDefault();\n    if (\n      this.state.tourStatus === \"continue\" &&\n      (this.state.tourType === \"tooltip\" || this.state.tourType === \"Make Edit\")\n    ) {\n      // let parentElement = queryParentElement(e.target, '.sidepanal');\n      let parentElement = queryParentElement(e.target, \"#extension-div\");\n      let parentElement1 = queryParentElement(e.target, \".trail_tooltip\");\n      let getClass =\n        parentElement == null ? \"\" : parentElement.getAttribute(\"class\");\n      let getClass1 =\n        parentElement1 == null ? \"\" : parentElement1.getAttribute(\"class\");\n      // let root1 = ReactDOM.findDOMNode(this).parentNode.style.display;\n      if (root1 === \"block\" && getClass === \"\" && getClass1 === \"\") {\n        e.target.classList.remove(\"trail_select_bx\");\n      }\n    }\n  };\n\n  onCreateTooltipHandle = () => {\n    document\n      .querySelector(\"body\")\n      .addEventListener(\"mouseover\", this.mouseOverEventData);\n    // to handle on click event to add tooltip\n    document\n      .querySelector(\"body\")\n      .addEventListener(\"click\", this.mouseClickEventData, true);\n    // to handle border remove on mousout event\n    document\n      .querySelector(\"body\")\n      .addEventListener(\"mouseout\", this.mouseOutEventData);\n  };\n\n  removeTooltipHandler = () => {\n    document\n      .querySelector(\"body\")\n      .removeEventListener(\"mouseover\", this.mouseOverEventData);\n\n    // to handle on click event to add tooltip\n    document\n      .querySelector(\"body\")\n      .removeEventListener(\"click\", this.mouseClickEventData, true);\n\n    // to handle border remove on mousout event\n    document\n      .querySelector(\"body\")\n      .removeEventListener(\"mouseout\", this.mouseOutEventData);\n  };\n\n  resize = () => {\n    this.setState({ hideNav: window.innerWidth <= 760 });\n  };\n\n  onNotFoundTarget = (data) => {\n    this.setState({ MobileTargetNotFound: data });\n    chrome.storage.local.set({ MobileTargetNotFound: data });\n  };\n\n  onChromeStorageChange = () => {\n    chrome.storage.local.get(\n      [\n        \"trail_web_user_tour\",\n        \"tourStatus\",\n        \"tourType\",\n        \"stepType\",\n        \"tourStep\",\n        \"currentTourType\",\n        \"userData\",\n        \"previewUserId\",\n        \"followData\",\n        \"saveSort\",\n        \"loading\",\n        \"MobileTargetNotFound\",\n        \"isDraggable\",\n        \"trail_name\",\n        \"currentTrailsTab\",\n      ],\n      async function (items) {\n        if (items.currentTrailsTab) {\n          obj.currentTrailsTab = items.currentTrailsTab;\n        }\n\n        if (items.trail_name) {\n          obj.trail_name = items.trail_name;\n        }\n\n        if (items.followData) {\n          obj.followingData = items.followData;\n        }\n\n        if (items.isDraggable !== undefined && items.isDraggable !== null) {\n          obj.isDraggable = items.isDraggable;\n        }\n\n        if (items.previewUserId && items.previewUserId !== \"\") {\n          obj.previewUserId = items.previewUserId;\n        } else {\n          obj.previewUserId = undefined;\n        }\n\n        if (items.trail_web_user_tour) {\n          obj.trailList = items.trail_web_user_tour;\n        }\n\n        if (items.tourStatus !== undefined) {\n          obj.tourStatus = items.tourStatus;\n        }\n\n        if (items.tourType !== undefined) {\n          obj.tourType = items.tourType;\n        }\n\n        if (items.currentTourType !== undefined) {\n          obj.currentTourType = items.currentTourType;\n        }\n\n        if (\n          items.currentTourType === \"tooltip\" ||\n          items.tourType === \"tooltip\"\n        ) {\n          this.setState({ open: false, openSidebar: false });\n        }\n\n        if (\n          items.MobileTargetNotFound != undefined &&\n          !_.isEmpty(items.MobileTargetNotFound)\n        ) {\n          this.setState({ MobileTargetNotFound: items.MobileTargetNotFound });\n        } else {\n          this.setState({ MobileTargetNotFound: {} });\n        }\n\n        if (items.tourStep !== undefined) {\n          obj.tourStep = items.tourStep;\n        }\n\n        if (items.stepType !== undefined) {\n          obj.stepType = items.stepType;\n        }\n\n        if (items.userData && items.userData._id !== undefined) {\n          obj.currUserId = items.userData._id;\n        }\n\n        if (\n          (obj.currentTourType === \"video\" ||\n            obj.currentTourType === \"audio\") &&\n          obj.tourType === \"preview\"\n        ) {\n          let myExtensionDefaultroot = $(\"#my-extension-defaultroot\").css(\n            \"display\"\n          );\n          let myExtensionRoot = $(\"#my-extension-root\").css(\"display\");\n\n          if (myExtensionRoot === \"none\" && myExtensionDefaultroot === \"none\") {\n            if (matchUrl(obj.trailList[obj.tourStep - 1].url, document.URL)) {\n              $(\"#my-extension-defaultroot\").css(\"display\", \"block\");\n            }\n          }\n        }\n\n        if (items.loading !== undefined && items.loading === \"false\") {\n          obj.loading = false;\n        }\n\n        if (items.loading !== undefined && items.loading === \"true\") {\n          obj.loading = true;\n        }\n\n        this.setState({\n          trailList: obj.trailList ? obj.trailList : [],\n          tourStatus: obj.tourStatus ? obj.tourStatus : \"continue\",\n          tourType: obj.tourType ? obj.tourType : \"\",\n          currentTourType: obj.currentTourType ? obj.currentTourType : \"\",\n          tourStep: obj.tourStep ? obj.tourStep : \"\",\n          stepType: obj.stepType ? obj.stepType : \"\",\n          currUserId: obj.currUserId ? obj.currUserId : null,\n          follow: obj.followingData ? obj.followingData.follow : false,\n          count: this.state.count++,\n          saveSort: items.saveSort ? items.saveSort : false,\n          loading: obj.loading ? obj.loading : false,\n          isDraggable: obj.isDraggable ? obj.isDraggable : false,\n          trailName: obj.trail_name ? obj.trail_name : \"\",\n          currentTrailsTab: obj.currentTrailsTab\n            ? obj.currentTrailsTab\n            : \"My Trails\",\n        });\n      }.bind(this)\n    );\n  };\n\n  /**\n   * on cancel tooltip data\n   */\n  onCancelTooltip = (target, count) => {\n    // Call init button position function\n    initButtonPosition();\n\n    $(\".trail_tour_tooltip\").parents().css(\"z-index\", \"\");\n    target.classList.remove(\"trail_web_user\");\n    target.classList.remove(`trail_tour_tooltip`);\n\n    // Call remove overlay function\n    removeOverlay();\n\n    // $('.trail_overlay').remove();\n    $(`.trail_user_tooltip`).remove();\n    $(`.trail_tour_ToolTipExtend`).remove();\n\n    chrome.storage.local.set({\n      tourType: \"\",\n      currentTourType: \"\",\n      tourStep: \"\",\n    });\n    this.setState({\n      web_url: \"\",\n      tourType: \"\",\n      currentTourType: \"\",\n      tourStep: \"\",\n      overlay: false,\n      rowData: {},\n      draggable: false,\n      open: false,\n    });\n    this.props.mainToggle();\n    this.props.onChangeTourType(\"\");\n  };\n\n  /**\n   * on click to Update tour\n   */\n  onUpdateTrail = async (data) => {\n    // Call init button position function\n    initButtonPosition();\n\n    let res = await UpdateTrailData(data);\n    if (res.status === 200) {\n      let resultData = res.data.response[0];\n      resultData.uniqueTarget = resultData.unique_target;\n      resultData.mediaType = resultData.media_type;\n      let rowInd = this.state.trailList.findIndex(\n        (r) => r.trail_data_id == resultData.trail_data_id\n      );\n      this.state.trailList[rowInd] = resultData;\n      let rows = this.state.trailList;\n      chrome.storage.local.set({ trail_web_user_tour: rows });\n      this.setState({ trailList: rows, draggable: false });\n    }\n\n    this.onCancelTooltip();\n  };\n\n  addStepClickHandler = async (e) => {\n    try {\n      const { fileName, title } = this.state;\n\n      if (fileName === \"\" || title === \"\") {\n        this.setState({\n          fileNameInvalid: true,\n          titleInvalid: true,\n        });\n\n        return;\n      } else {\n        this.setState({\n          fileNameInvalid: false,\n          titleInvalid: false,\n        });\n      }\n\n      // Call on tour loading function\n      this.onTourLoading(true);\n\n      await this.onSaveTrail(e);\n\n      // Call on tour loading function\n      this.onTourLoading(false);\n    } catch (err) {\n      console.log(\"err\", err);\n\n      // Call on tour loading function\n      this.onTourLoading(false);\n\n      alert(\"Error while adding step!\");\n    }\n  };\n\n  /**\n   * on click to save tour in local system\n   */\n  onSaveTrail = async (data) => {\n    let trailData = [];\n    let obj = {};\n    let responsive = \"web\";\n    return new Promise((resolve, reject) => {\n      chrome.storage.local.get(\n        [\"trail_web_user_tour\", \"userData\", \"trail_id\"],\n        async function (items) {\n          const trail_id = items.trail_id;\n          if (items.trail_web_user_tour !== undefined) {\n            trailData = items.trail_web_user_tour;\n          }\n\n          let timeStamp = new Date().getTime();\n\n          // This if check work on tooltip audio video upload\n          if (data.type === \"tooltip\" && data.mediaType !== \"text\") {\n            obj = {\n              trail_id,\n              userId: items.userData._id,\n              url: data.url,\n              path: data.path,\n              selector: data.selector,\n              class: data.class,\n              title: data.title,\n              web_url: data.web_url,\n              type: data.type,\n              responsive,\n              uniqueTarget: data.uniqueTarget,\n              mediaType: data.mediaType,\n              created: timeStamp,\n              trailIndex: items.trail_web_user_tour.length + 1,\n              flag: \"\",\n            };\n\n            trailData.push(obj);\n          } else if (\n            this.state.tourType === \"video\" ||\n            this.state.tourType === \"audio\"\n          ) {\n            obj = {\n              trail_id,\n              userId: items.userData._id,\n              url: document.URL,\n              path: \"\",\n              selector: \"\",\n              class: \"\",\n              responsive,\n              title: this.state.title,\n              web_url: this.state.web_url,\n              type: this.state.tourType,\n              mediaType: this.state.tourType,\n              created: timeStamp,\n              trailIndex: items.trail_web_user_tour.length + 1,\n              flag: \"\",\n            };\n\n            trailData.push(obj);\n          } else if (data.type === \"modal\" && data.mediaType === \"modal\") {\n            obj = {\n              trail_id,\n              userId: items.userData._id,\n              url: data.url,\n              path: \"\",\n              selector: \"\",\n              class: \"\",\n              responsive,\n              title: data.title,\n              description: data.description,\n              web_url: \"\",\n              type: data.type,\n              uniqueTarget: \"\",\n              mediaType: data.mediaType,\n              created: timeStamp,\n              trailIndex: items.trail_web_user_tour.length + 1,\n              flag: \"\",\n            };\n\n            trailData.push(obj);\n          } else {\n            obj = {\n              ...data,\n              trail_id,\n              responsive,\n              userId: items.userData._id,\n              created: timeStamp,\n              trailIndex: items.trail_web_user_tour.length + 1,\n              flag: \"\",\n            };\n\n            trailData.push(obj);\n          }\n\n          // Save trail into database\n          await this.publishTrails(obj);\n\n          this.setState({\n            trailList: trailData,\n            web_url: \"\",\n            fileAddStatus: false,\n            fileName: \"\",\n            title: \"\",\n            open: false,\n            draggable: false,\n            tourType: \"\",\n            currentTourType: \"\",\n          });\n          chrome.storage.local.set({\n            trail_web_user_tour: trailData,\n            currentTourType: \"\",\n            tourType: \"\",\n          });\n\n          // Call init button position function\n          initButtonPosition();\n\n          // this.props.this.props,mainToggle();\n          this.props.onChangeTourType(\"\");\n          this.props.mainToggle();\n\n          resolve();\n        }.bind(this)\n      );\n    });\n  };\n\n  /**\n   * on click to submit tour into the database\n   */\n  onClickToSubmitTour = () => {\n    chrome.storage.local.set({ tourStatus: \"done\" });\n    this.setState({ tourStatus: \"done\" });\n  };\n\n  /**\n   * on clear tour\n   */\n  onClearToggle = async () => {\n    // Set onDone state\n    this.setState({ onDone: true });\n\n    // Call init button position function\n    initButtonPosition();\n\n    try {\n      const trail = this.state.trailList[this.state.tourStep - 1];\n      chrome.storage.local.get(\n        [\n          \"webUrl\",\n          \"userData\",\n          \"isPreview\",\n          \"old_trail_id\",\n          \"old_user_data\",\n          \"previewUserId\",\n          \"trail_web_user_tour\",\n          \"tourStep\",\n          \"isPreviewSingleTrail\",\n          \"followedTrailUserData\",\n          \"isGuest\",\n          \"currentTrailsTab\",\n        ],\n        async (items) => {\n          // Update trail flag if user not viewing followed trail preview\n          if (\n            !items.followedTrailUserData &&\n            !items.isPreview &&\n            !items.isPreviewSingleTrail\n          ) {\n            const data = {\n              trail_data_id: trail.trail_data_id,\n              flag: \"\",\n            };\n\n            // Call update trail api to add flag into table\n            await updateTrailFlag(data);\n          }\n\n          if (items.previewUserId !== \"\" || items.previewUserId !== undefined) {\n            const userTrails = items.trail_web_user_tour.filter((el) => {\n              if (el.userId !== items.previewUserId) {\n                return el;\n              }\n            });\n\n            chrome.storage.local.set({\n              previewUserId: \"\",\n              trail_web_user_tour: userTrails,\n            });\n          }\n\n          if (items.isPreview || items.isPreviewSingleTrail) {\n            // Call update track data function\n            await this.updateUserTrailTrack(items);\n\n            this.props.onChangeTourType(\"\");\n            this.props.mainToggle();\n\n            if (items.isGuest) {\n              window.location.href = items.webUrl + \"#signin-to-continue\";\n            } else {\n              window.location.href = items.webUrl.split(\"#\")[0];\n            }\n\n            chrome.storage.local.set({\n              isPreview: false,\n              isGuest: false,\n              isPreviewSingleTrail: false,\n              continueTourStepId: \"\",\n              tourType: \"\",\n              currentTourType: \"\",\n              trail_id: items.old_trail_id,\n              trail_data_id: \"\",\n              guest_id: \"\",\n              trail_web_user_tour: [],\n              noStepsToWatch: \"\",\n              userData: { ...items.old_user_data },\n            });\n          } else if (\n            items.followedTrailUserData &&\n            items.currentTrailsTab === \"Following\"\n          ) {\n            // Call update track data function\n            await this.updateUserTrailTrack(items);\n          }\n\n          chrome.storage.local.set({\n            tourType: \"\",\n            currentTourType: \"\",\n            tourStep: \"\",\n          });\n\n          this.setState({\n            web_url: \"\",\n            tourType: \"\",\n            tourStep: \"\",\n            onDone: false,\n            overlay: false,\n            loading: false,\n            draggable: false,\n            currentTourType: \"\",\n          });\n\n          this.props.onChangeTourType(\"\");\n          this.props.mainToggle();\n        }\n      );\n\n      // Call back arrow click handler function\n      // Remove overlay and other added element\n      $(\".trail_web_user_tour\").parents().css(\"z-index\", \"\");\n      $(`.trail_tour_ToolTipExtend`).remove();\n      $(\".trail_tooltip_done\").remove();\n      $(\".trail_web_user_tour\").removeClass(\"trail_web_user_tour\");\n      $(`traiil_stop${this.state.tourStep}`).removeAttr(\n        `traiil_stop${this.state.tourStep}`\n      );\n\n      // Call remove overlay function\n      removeOverlay();\n    } catch (err) {\n      chrome.storage.local.set({\n        tourType: \"\",\n        currentTourType: \"\",\n        tourStep: \"\",\n      });\n\n      this.setState({\n        web_url: \"\",\n        tourType: \"\",\n        tourStep: \"\",\n        onDone: false,\n        overlay: false,\n        loading: false,\n        draggable: false,\n        currentTourType: \"\",\n      });\n\n      this.props.onChangeTourType(\"\");\n      this.props.mainToggle();\n    }\n\n    // Send message to close all menu pop button in inactive tabs after preview\n    chrome.runtime.sendMessage(\"\", {\n      type: \"closeMenuPopButton\",\n    });\n  };\n\n  openPopup = () => {\n    // Set state\n    this.setState({\n      open: !this.state.open,\n      openSidebar: !this.state.openSidebar,\n    });\n  };\n\n  /**\n   * on change input value\n   */\n  onChangeToInput = (e) => {\n    e.stopPropagation();\n\n    const value = e.target.value;\n    const isInvalid = value.length === 0 ? true : false;\n\n    // Set state\n    this.setState({\n      title: value,\n      titleInvalid: isInvalid,\n    });\n  };\n\n  updateUserTrailTrack = async (items) => {\n    try {\n      const trail = items.trail_web_user_tour[items.tourStep - 1];\n\n      const trackData = {\n        trail_id: trail.trail_id,\n        user_id: items.userData._id,\n        steps_visited: trail.trail_data_id,\n      };\n\n      // Call update track data function\n      await updateTrailTrack(trackData);\n    } catch (err) {}\n  };\n\n  tourManage = (step, type, tourSide) => {\n    return new Promise((resolve, reject) => {\n      chrome.storage.local.get(\n        [\n          \"isPreview\",\n          \"userData\",\n          \"isPreviewSingleTrail\",\n          \"currentTrailsTab\",\n          \"followedTrailUserData\",\n          \"trail_web_user_tour\",\n          \"tourStep\",\n        ],\n        async (items) => {\n          // Update step data when guest visit trail\n          if (items.isPreview || items.isPreviewSingleTrail) {\n            // Call update track data function\n            await this.updateUserTrailTrack(items);\n\n            chrome.storage.local.set({ currentTourType: type, tourStep: step });\n            this.setState({ currentTourType: type, tourStep: step, tourSide });\n\n            resolve();\n          } else if (\n            items.currentTrailsTab === \"Following\" &&\n            items.followedTrailUserData\n          ) {\n            // Call update track data function\n            await this.updateUserTrailTrack(items);\n\n            chrome.storage.local.set({ currentTourType: type, tourStep: step });\n            this.setState({ currentTourType: type, tourStep: step, tourSide });\n\n            resolve();\n          } else {\n            chrome.storage.local.set({ currentTourType: type, tourStep: step });\n            this.setState({ currentTourType: type, tourStep: step, tourSide });\n\n            resolve();\n          }\n        }\n      );\n    });\n  };\n\n  /**\n   * on trail video trail next, previos manage\n   * @step tourStep\n   */\n  onTourVideoTrail = (step) => {\n    if (this.state.trailList[step - 1]) {\n      let type = this.state.trailList[step - 1].type;\n      chrome.storage.local.set({ currentTourType: type, tourStep: step });\n      this.setState({ currentTourType: type, tourStep: step });\n      if (!matchUrl(this.state.trailList[step - 1].url, document.URL)) {\n        window.location.href = this.state.trailList[step - 1].url;\n      }\n    }\n  };\n\n  uploadFile = (file) => {\n    this.setState({ fileLoading: true });\n\n    handleFileUpload(file)\n      .then((response) => {\n        return response;\n      })\n      .then((res) => {\n        return res.data;\n      })\n      .then((data) => {\n        this.setState({\n          showPreview: true,\n          fileLoading: false,\n          fileName: file.name,\n          fileAddStatus: true,\n          fileNameInvalid: false,\n          web_url: data.response.result.fileUrl,\n        });\n      })\n      .catch((err) => {\n        this.setState({ fileLoading: false });\n      });\n  };\n\n  handleChange = (e) => {\n    const { tourType } = this.state;\n    const file = e.target.files[0];\n    const fileType = file.type.split(\"/\");\n    e.target.value = null;\n\n    if (tourType === \"audio\" && fileType[1] === \"mp4\") {\n      // Upload file function\n      this.uploadFile(file);\n    } else if (tourType !== fileType[0]) {\n      // Return alert\n      return alert(`Please upload ${tourType} file!`);\n    } else if (tourType === \"video\" && fileType[1] === \"x-matroska\") {\n      // Return alert\n      return alert(\"MKV format suport coming soon.\");\n    } else {\n      // Upload file function\n      this.uploadFile(file);\n    }\n  };\n\n  /**\n   * It will invoked on step drag and drop.\n   */\n  onSectionDragAndDrop = async ({ oldIndex, newIndex }) => {\n    const sorted = arrayMove(this.state.trailList, oldIndex, newIndex);\n\n    this.setState({ trail_web_user_tour: sorted, trailList: sorted });\n    chrome.storage.local.set({ trail_web_user_tour: sorted });\n\n    // Update sorted array in database\n    const res = await arraySorting(sorted);\n\n    if (!res.data.response || !res.data.response.result) {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  saveSortedTrails = async (e) => {\n    e.preventDefault();\n\n    // Update sorted array in database\n    const res = await arraySorting(this.state.trailList);\n\n    if (!res.data.response || !res.data.response.result) {\n      alert(\"Something went wrong!\");\n    }\n\n    this.setState({ saveSort: false });\n    chrome.storage.local.set({ saveSort: false });\n  };\n\n  // Save trails into database\n  publishTrails = async (data) => {\n    try {\n      const res = await uploadTrails(data);\n      // this.setState({ publishLoader: false });\n      if (!res.data.response) {\n        throw new Error(\"Saving trails failed!\");\n      }\n\n      return new Promise((resolve, reject) => {\n        chrome.storage.local.get(\n          [\"trail_id\"],\n          async function (items) {\n            // Get all trail from database\n            let screen = resizeScreen() ? \"mobile\" : \"web\";\n            const allDataRes = await getUserOneTrail(items.trail_id, screen);\n            const newDataArray = allDataRes.data.response.result.map((el) => {\n              return {\n                userId: this.state.currUserId,\n                trail_data_id: el.trail_data_id,\n                url: el.url,\n                path: el.path,\n                selector: el.selector,\n                class: el.class,\n                title: el.title,\n                description: el.description,\n                web_url: el.web_url,\n                trail_id: el.trail_id,\n                type: el.type,\n                uniqueTarget: el.unique_target,\n                unique_target_one: el.unique_target_one,\n                mobile_media_type: el.mobile_media_type,\n                mobile_title: el.mobile_title,\n                mobile_description: el.mobile_description,\n                mediaType: el.media_type,\n                created: el.created,\n                trailIndex: el.trailIndex,\n              };\n            });\n\n            chrome.storage.local.set({ trail_web_user_tour: newDataArray });\n            this.setState({ trailList: newDataArray });\n\n            resolve();\n          }.bind(this)\n        );\n      });\n    } catch (err) {\n      alert(err.message);\n      // this.setState({ publishLoader: false });\n    }\n  };\n\n  tooltipShareBtn = (e) => {\n    const { trailList, currUserId } = this.state;\n\n    const trailId = trailList[0].trail_id;\n    const URL = trailList[0].url;\n    let qryString = URL.split(\"?\").length > 1 ? \"&\" : \"?\";\n    const trailUrl = `${process.env.REACT_APP_GO_TRAILIT_URL}/live/${URL}${qryString}trailUserId=${currUserId}&trailId=${trailId}&trailPreview=true&tourStep=1&singleStepPreview=undefined&trailDataId=undefined&previewUserId=undefined&redirectUrl=undefined`;\n\n    function copyStringToClipboard(str) {\n      // Create new element\n      var el = document.createElement(\"textarea\");\n\n      // Set value (string to be copied)\n      el.value = str;\n\n      // Set non-editable to avoid focus and move outside of view\n      el.setAttribute(\"readonly\", \"\");\n      el.style = { position: \"absolute\", left: \"-9999px\" };\n      document.body.appendChild(el);\n\n      // Select text inside element\n      el.select();\n\n      // Copy text to clipboard\n      document.execCommand(\"copy\");\n\n      // Remove temporary element\n      document.body.removeChild(el);\n    }\n\n    alert(\"Successfully copied\");\n    copyStringToClipboard(trailUrl);\n  };\n\n  // Copy Web app link\n  copyWebApplink = (e) => {\n    const { trailList, currUserId } = this.state;\n\n    if (trailList.length == 0) {\n      alert(\"Please create trail\");\n      return null;\n    }\n\n    const trailId = trailList[trailList.length - 1].trail_id;\n    const URL = trailList[0].url;\n    let qryString = URL.split(\"?\").length > 1 ? \"&\" : \"?\";\n    const trailUrl = `${process.env.REACT_APP_GO_TRAILIT_URL}/live/${URL}${qryString}trailUserId=${currUserId}&trailId=${trailId}&trailPreview=true&tourStep=1&singleStepPreview=undefined&trailDataId=undefined&previewUserId=undefined&redirectUrl=undefined`;\n\n    function copyStringToClipboard(str) {\n      // Create new element\n      var el = document.createElement(\"textarea\");\n\n      // Set value (string to be copied)\n      el.value = str;\n\n      // Set non-editable to avoid focus and move outside of view\n      el.setAttribute(\"readonly\", \"\");\n      el.style = { position: \"absolute\", left: \"-9999px\" };\n      document.body.appendChild(el);\n\n      // Select text inside element\n      el.select();\n\n      // Copy text to clipboard\n      document.execCommand(\"copy\");\n\n      // Remove temporary element\n      document.body.removeChild(el);\n    }\n\n    alert(\"Successfully copied\");\n    copyStringToClipboard(trailUrl);\n  };\n\n  followTrail = (e) => {\n    e.preventDefault();\n    const previewUserId = this.state.trailList[this.state.tourStep - 1].userId;\n\n    const followData = {\n      // follower_id: this.state.currUserId,\n      previewUserId,\n    };\n\n    followTrails(followData)\n      .then((res) => {\n        if (res.data.response && res.data.response.statusCode !== \"201\") {\n          throw new Error(\"Error while following trail!\");\n        }\n\n        // Set followData into chrome storage\n        chrome.storage.local.set({\n          followData: { previewUserId, follow: true },\n        });\n        this.setState({ follow: true });\n      })\n      .catch((err) => {});\n  };\n\n  unFollowTrail = (e) => {\n    e.preventDefault();\n    const previewUserId = this.state.trailList[this.state.tourStep - 1].userId;\n\n    const followData = {\n      // follower_id: this.state.currUserId,\n      previewUserId,\n    };\n\n    unFollowTrailOfUser(followData)\n      .then((res) => {\n        if (res.data.response && res.data.response.statusCode !== \"200\") {\n          throw new Error(\"Error while unfollowing trail!\");\n        }\n\n        // Set followData into chrome storage\n        chrome.storage.local.set({ followData: {} });\n        this.setState({ follow: false });\n      })\n      .catch((err) => {});\n  };\n\n  // Send notification to follower when publish button clicked\n  sendNotification = (e) => {\n    e.preventDefault();\n    this.setState({ publishLoader: true });\n\n    // Socket notification\n    socket.emit(\"sendNotification\", this.state.currUserId);\n\n    setTimeout(() => {\n      this.setState({ publishLoader: false });\n    }, 1000);\n\n    localStorage.setItem(\n      process.env.REACT_APP_LOCALSTORAGE,\n      this.state.trailList.length\n    );\n  };\n\n  // Save last show preview trail\n  onBackArrowClickHandler = async (e, close) => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    chrome.storage.local.get(\n      [\n        \"isPreview\",\n        \"userData\",\n        \"webUrl\",\n        \"old_trail_id\",\n        \"old_user_data\",\n        \"isPreviewSingleTrail\",\n        \"isGuest\",\n        \"followedTrailUserData\",\n        \"currentTrailsTab\",\n        \"trail_web_user_tour\",\n        \"tourStep\",\n      ],\n      async (items) => {\n        const trail = this.state.trailList[this.state.tourStep - 1];\n\n        // Update step data when guest visit trail\n        if (\n          (items.isPreview || items.isPreviewSingleTrail) &&\n          this.state.tourType === \"preview\"\n        ) {\n          // Call update track data function\n          await this.updateUserTrailTrack(items);\n\n          this.props.onChangeTourType(\"\");\n          this.props.mainToggle();\n\n          if (items.isGuest) {\n            let url = items.webUrl + \"#signin-to-continue\";\n            window.location.href = url;\n          } else {\n            window.location.href = items.webUrl.split(\"#\")[0];\n          }\n\n          chrome.storage.local.set({\n            isPreview: false,\n            isGuest: false,\n            isPreviewSingleTrail: false,\n            tourType: \"\",\n            currentTourType: \"\",\n            continueTourStepId: \"\",\n            trail_id: items.old_trail_id,\n            trail_data_id: \"\",\n            guest_id: \"\",\n            trail_web_user_tour: [],\n            noStepsToWatch: \"\",\n            userData: { ...items.old_user_data },\n          });\n        } else if (\n          items.followedTrailUserData &&\n          items.currentTrailsTab === \"Following\"\n        ) {\n          // Call update track data function\n          await this.updateUserTrailTrack(items);\n        }\n      }\n    );\n\n    // Call init button position function\n    initButtonPosition();\n\n    if (!this.state.onDone) {\n      // Set onDone state\n      this.setState({ onDone: true });\n    }\n\n    const removeThisElements = () => {\n      // Remove overlay and other added element\n      $(\".trail_web_user_tour\").parents().css(\"z-index\", \"\");\n      $(`.trail_tour_ToolTipExtend`).remove();\n      $(\".trail_tooltip_done\").remove();\n      $(\".trail_web_user_tour\").removeClass(\"trail_web_user_tour\");\n      $(`traiil_stop${this.state.tourStep}`).removeAttr(\n        `traiil_stop${this.state.tourStep}`\n      );\n      $(\".trail_select_bx\").removeClass(\"trail_select_bx\");\n\n      const tooltip = shadowRoot.querySelector(\".trail_tooltip\");\n      if (tooltip) {\n        tooltip.parentNode.removeChild(tooltip);\n      }\n\n      // Call remove overlay function\n      removeOverlay();\n    };\n\n    return new Promise((resolve, reject) => {\n      chrome.storage.local.get(\n        [\n          \"previewUserId\",\n          \"isPreview\",\n          \"isPreviewSingleTrail\",\n          \"followedTrailUserData\",\n        ],\n        async (items) => {\n          if (\n            (!items.previewUserId || items.previewUserId === \"\") &&\n            !items.followedTrailUserData\n          ) {\n            const { currentTourType, tourType } = this.state;\n\n            if (\n              (currentTourType === \"tooltip\" ||\n                currentTourType === \"audio\" ||\n                currentTourType === \"video\" ||\n                currentTourType === \"modal\") &&\n              tourType === \"preview\"\n            ) {\n              if (this.state.trailList.length > 0) {\n                if (!items.isPreview || !items.isPreviewSingleTrail) {\n                  try {\n                    const data = {\n                      trail_data_id: this.state.trailList[\n                        this.state.tourStep - 1\n                      ].trail_data_id,\n                      flag: \"continue\",\n                    };\n\n                    // Call update trail api to add flag into table\n                    await updateTrailFlag(data);\n                  } catch (err) {}\n                }\n\n                // Remove elements\n                await removeThisElements();\n\n                // Call toggle function\n                chrome.storage.local.set({\n                  tourType: \"\",\n                  currentTourType: \"\",\n                  tourStep: \"\",\n                });\n                this.setState({\n                  web_url: \"\",\n                  tourType: \"\",\n                  currentTourType: \"\",\n                  tourStep: \"\",\n                  overlay: false,\n                  loading: false,\n                  open: false,\n                  openSidebar: false,\n                  draggable: false,\n                });\n                this.props.onChangeTourType(\"\");\n                this.props.mainToggle();\n              }\n            } else if (currentTourType === \"preview\" && tourType === \"modal\") {\n              this.props.mainToggle();\n              this.props.onChangeTourType(\"\");\n              this.setState({\n                web_url: \"\",\n                tourType: \"\",\n                currentTourType: \"\",\n                tourStep: \"\",\n                overlay: false,\n                createModalOpen: false,\n                loading: false,\n                stepType: \"\",\n                open: false,\n                openSidebar: false,\n                draggable: false,\n              });\n              chrome.storage.local.set({\n                tourType: \"\",\n                currentTourType: \"\",\n                tourStep: \"\",\n                stepType: \"\",\n              });\n            } else {\n              // Remove elements\n              await removeThisElements();\n              //\n\n              this.props.mainToggle();\n              this.props.onChangeTourType(\"\");\n              this.setState({\n                web_url: \"\",\n                tourType: \"\",\n                currentTourType: \"\",\n                tourStep: \"\",\n                overlay: false,\n                fileName: \"\",\n                titile: \"\",\n                loading: false,\n                stepType: \"\",\n                open: false,\n                openSidebar: false,\n                draggable: false,\n                titleInvalid: false,\n                fileNameInvalid: false,\n              });\n            }\n\n            chrome.storage.local.set({\n              tourType: \"\",\n              currentTourType: \"\",\n              tourStep: \"\",\n              stepType: \"\",\n            });\n\n            if (this.state.deleteModal.show) {\n              // Hide delete modal\n              this.onDeleteModalClose();\n            }\n\n            if (this.state.onDone) {\n              // Set onDone state\n              this.setState({ onDone: false });\n            }\n\n            resolve();\n          } else {\n            // Remove elements\n            await removeThisElements();\n            this.props.mainToggle();\n            this.props.onChangeTourType(\"\");\n            chrome.storage.local.set({\n              tourType: \"\",\n              currentTourType: \"\",\n              tourStep: \"\",\n            });\n            this.setState({\n              web_url: \"\",\n              tourType: \"\",\n              currentTourType: \"\",\n              tourStep: \"\",\n              overlay: false,\n              loading: false,\n              open: false,\n              openSidebar: false,\n              draggable: false,\n            });\n\n            if (this.state.onDone) {\n              // Set onDone state\n              this.setState({ onDone: false });\n            }\n\n            resolve();\n          }\n\n          // Send message to close all menu pop button in inactive tabs after preview\n          chrome.runtime.sendMessage(\"\", {\n            type: \"closeMenuPopButton\",\n          });\n        }\n      );\n    });\n  };\n\n  onToggleCreateModal = (status) => {\n    if (!status) {\n      // Call init button position function\n      initButtonPosition();\n    }\n\n    if (!status) {\n      chrome.storage.local.set({\n        tourType: \"\",\n        stepType: \"\",\n        currentTourType: \"\",\n        tourStep: \"\",\n      });\n      this.setState({\n        web_url: \"\",\n        tourType: \"\",\n        stepType: \"\",\n        open: false,\n        currentTourType: \"\",\n        tourStep: \"\",\n        overlay: false,\n        createModalOpen: status,\n        draggable: false,\n      });\n      this.props.mainToggle();\n      this.props.onChangeTourType(\"\");\n    } else {\n      this.setState({ createModalOpen: status });\n    }\n  };\n\n  onCloseTooltipHandle = async (e) => {\n    // Call init button position function\n    initButtonPosition();\n\n    // Hide continue button\n    chrome.storage.local.set({ closeContinue: false });\n\n    // Set onDone state\n    this.setState({ onDone: true });\n\n    const { trailList, tourStep } = this.state;\n\n    if (trailList.length > 0 && trailList.length === tourStep) {\n      // Call clear toggle function\n      await this.onClearToggle();\n    } else {\n      chrome.storage.local.get(\n        [\"isPreview\", \"isPreviewSingleTrail\", \"followedTrailUserData\"],\n        (items) => {\n          if (\n            !items.isPreview &&\n            !items.isPreviewSingleTrail &&\n            !items.followedTrailUserData\n          ) {\n            chrome.storage.local.set({ closeContinue: true });\n          }\n        }\n      );\n\n      // Call back arrow click handler function\n      await this.onBackArrowClickHandler(e, \"close\");\n    }\n\n    // Set onDone state\n    this.setState({\n      onDone: false,\n      draggable: false,\n      targetDataNotFound: false,\n    });\n  };\n\n  setLoadingState = (query) => {\n    this.setState({ loading: query });\n  };\n\n  onClickToGetRow = (e, result, tourStep) => {\n    e.preventDefault();\n    this.setState({ MobileTargetNotFound: {} });\n    chrome.storage.local.set({ MobileTargetNotFound: {} });\n    this.setState({ rowData: result, tourStep, open: false });\n  };\n\n  // Send tip function\n  sendTip = async (toAddress, amount) => {\n    this.setState({ sendLoader: true });\n\n    // const { privateKey } = this.state;\n    const privateKey = undefined; // Need to send private key but for demos hard code in code\n    sendTransection(privateKey, toAddress, amount)\n      .then((res) => {\n        if (res && res.code && res.code === 400) {\n          throw new Error(res.err);\n        }\n\n        // Set is success state\n        this.setState({ isSuccess: true });\n\n        setTimeout(() => {\n          // Hide modal\n          this.onSendTipModalClose();\n\n          // Set is success state\n          this.setState({ isSuccess: false });\n        }, 5000);\n      })\n      .catch((err) => {\n        this.setState({ setError: err.message });\n\n        setTimeout(() => {\n          // Hide modal\n          this.onSendTipModalClose();\n\n          // Set is success state\n          this.setState({ setError: false });\n        }, 5000);\n      });\n  };\n\n  dragStop(data) {\n    const position = document\n      .getElementById(\"extension-div\")\n      .shadowRoot.getElementById(\"my-extension-defaultroot\");\n  }\n\n  audioToggler = () => {\n    // Set state\n    this.setState({\n      audioRef: !this.state.audioRef,\n    });\n  };\n\n  videoToggler = () => {\n    // Set state\n    this.setState({\n      videoRef: !this.state.videoRef,\n    });\n  };\n\n  modelToggler = () => {\n    // Set state\n    this.setState({\n      previewModalRef: !this.state.previewModalRef,\n    });\n  };\n\n  webTourToggler = () => {\n    // Set state\n    this.setState({\n      tooltipRef: !this.state.tooltipRef,\n    });\n  };\n\n  render() {\n    let {\n      open,\n      trailList,\n      tourStatus,\n      tourType,\n      tourStep,\n      currentTourType,\n      web_url,\n      overlay,\n      follow,\n      fileName,\n      fileLoading,\n      createModalOpen,\n      stepType,\n      onDone,\n      isDraggable,\n      trailName,\n      openSidebar,\n      currentTrailsTab,\n      isTourLoading,\n      title,\n      titleInvalid,\n      fileNameInvalid,\n    } = this.state;\n\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Auto logout function\n    autoLogoutFunction();\n\n    const localStorageCount = localStorage.getItem(\n      process.env.REACT_APP_LOCALSTORAGE\n    );\n    const stateCount = trailList.length;\n\n    if (web_url !== \"\") {\n      this.setState({ fileAddStatus: true });\n    }\n\n    tourUrl = false;\n\n    if (tourStep !== \"\" && stateCount > 0) {\n      tourUrl = matchUrl(trailList[tourStep - 1].url, document.URL);\n    }\n\n    // if (tourType === \"\" && currentTourType === \"\") {\n    //   const myExtensionRootFlip = shadowRoot.getElementById(\n    //     \"my-extension-root-flip\"\n    //   );\n\n    //   if (myExtensionRootFlip) {\n    //     myExtensionRootFlip.classList.add(\"widthAuto\");\n    //   }\n    // } else {\n    //   const myExtensionRootFlip = shadowRoot.getElementById(\n    //     \"my-extension-root-flip\"\n    //   );\n\n    //   if (myExtensionRootFlip) {\n    //     myExtensionRootFlip.classList.remove(\"widthAuto\");\n    //   }\n    // }\n\n    if (openSidebar) {\n      const defaultRoot = shadowRoot.getElementById(\"my-extension-defaultroot\");\n\n      if (defaultRoot) {\n        defaultRoot.style.boxShadow = \"rgb(212 30 121) 0px 0px 9px\";\n      }\n    } else {\n      const defaultRoot = shadowRoot.getElementById(\"my-extension-defaultroot\");\n\n      if (defaultRoot) {\n        defaultRoot.style.boxShadow = \"none\";\n      }\n    }\n\n    if (!openSidebar && flipped && defaultComp) {\n      const flipId = document\n        .getElementById(\"extension-div\")\n        .shadowRoot.getElementById(\"my-extension-root-flip\");\n      flipId.setAttribute(\"class\", \"trail_flip_box trail_container\");\n    } else if (openSidebar || !flipped) {\n      const trailFlipBox = document\n        .getElementById(\"extension-div\")\n        .shadowRoot.querySelector(\".trail_flip_box\");\n      if (trailFlipBox) {\n        trailFlipBox.classList.remove(\"trail_flip_box\");\n      }\n    }\n\n    $(() => {\n      const modalDiv = document\n        .getElementById(\"extension-div\")\n        .shadowRoot.querySelector(\".tr_modal\");\n\n      if (modalDiv) {\n        if (!modalDiv.parentNode.parentNode.parentNode.getAttribute(\"class\")) {\n          modalDiv.parentNode.parentNode.parentNode.setAttribute(\n            \"class\",\n            \"trial_modal_show trial_create_modal_main\"\n          );\n        }\n\n        const modal = document\n          .getElementById(\"extension-div\")\n          .shadowRoot.querySelector(\".trial_create_modal_main .modal\");\n\n        if (modal && resizeScreen()) {\n          modal.style.height = \"75%\";\n        }\n      }\n    });\n\n    if (\n      (currentTourType === \"tooltip\" ||\n        currentTourType === \"audio\" ||\n        currentTourType === \"video\" ||\n        currentTourType === \"modal\" ||\n        currentTourType === \"Make Edit\" ||\n        currentTourType === \"\") &&\n      (tourType === \"preview\" || tourType === \"\") &&\n      (tourUrl || !tourUrl)\n    ) {\n      chrome.storage.local.set({ loading: \"false\" });\n      this.setLoadingState(false);\n    }\n\n    let mediaType = \"\";\n    if (\n      tourStatus !== \"preview\" &&\n      (tourType === \"audio\" || tourType === \"video\")\n    ) {\n      if (tourType === \"video\") {\n        mediaType = \"video/*, .mkv, .mov\";\n      } else if (tourType === \"audio\") {\n        mediaType = \"audio/*\";\n      }\n    }\n\n    let sideBar = (\n      <div className=\"first_step\">\n        <div className=\"hdr\">\n          <div className=\"titleBack\">\n            <button\n              disabled={onDone}\n              className=\"trail_builder-back-button\"\n              onClick={this.onBackArrowClickHandler}\n              onTouchEnd={this.onBackArrowClickHandler}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"7.734\"\n                height=\"13.404\"\n                viewBox=\"0 0 7.734 13.404\"\n              >\n                <g id=\"left-arrow\" transform=\"translate(0.557 0.557)\">\n                  <path\n                    id=\"Path_2\"\n                    data-name=\"Path 2\"\n                    d=\"M39.276,18.719a.437.437,0,0,0,.617,0,.437.437,0,0,0,0-.617l-5.428-5.428,5.428-5.428a.437.437,0,0,0-.617-.617l-5.748,5.737a.437.437,0,0,0,0,.617Z\"\n                    transform=\"translate(-33.4 -6.5)\"\n                    fill=\"#289728\"\n                    stroke=\"#D41E79\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"1\"\n                  />\n                </g>\n              </svg>\n            </button>\n            <span>Trail Builder</span>\n          </div>\n          {obj.previewUserId && obj.previewUserId !== \"\" && (\n            <div className=\"optionBtn\">\n              {follow ? (\n                <Button type=\"primary\" onClick={this.unFollowTrail}>\n                  Unfollow\n                </Button>\n              ) : (\n                <Button type=\"primary\" onClick={this.followTrail}>\n                  Follow\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n        {tourType === \"audio\" || tourType === \"video\" ? (\n          <h4 className=\"title my-4\">Upload Media</h4>\n        ) : (\n          // <h4 className=\"title my-4\">Trail It, Curated Guided Tour</h4>\n          <h4 className=\"title my-4\">{trailName}</h4>\n        )}\n        <div\n          id=\"scroll\"\n          className=\"sidepopcontent scrollbar\"\n          // className={`sidepopcontent ${\n          //   (tourType === \"audio\" || tourType === \"video\") && \"overflowAuto\"\n          // } scrollbar`}\n        >\n          <div className=\"pr5px pl-4 trail_video_frm\">\n            {tourStatus !== \"preview\" && tourType === \"video\" && (\n              <div className=\"mb-2\">\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  value={title}\n                  onChange={this.onChangeToInput}\n                  onKeyDown={(e) => e.stopPropagation()}\n                  placeholder=\"Enter Video title\"\n                  className=\"ant-input\"\n                  autoComplete=\"off\"\n                />\n\n                {titleInvalid && title.length === 0 && (\n                  <div class=\"ant-form-item-explain ant-form-item-explain-error\">\n                    <div role=\"alert\">Please enter title!</div>\n                  </div>\n                )}\n              </div>\n            )}\n            {tourStatus !== \"preview\" && tourType === \"video\" && (\n              <input\n                type=\"text\"\n                name=\"web_url\"\n                value={fileName}\n                onKeyDown={(e) => e.stopPropagation()}\n                placeholder=\"Video Filename\"\n                className=\"ant-input mb-2\"\n                autoComplete=\"off\"\n                disabled={true}\n              />\n            )}\n            {tourStatus !== \"preview\" && tourType === \"video\" && (\n              <div className=\"upload_bx\">\n                <div className=\"ant-upload\">\n                  <p className=\"ant-upload-drag-icon\">\n                    {fileLoading && (\n                      <div class=\"trial_spinner\">\n                        <img\n                          alt=\"ring1\"\n                          class=\"ring1\"\n                          src={require(`./images/loding1.png`)}\n                        />\n                        <img\n                          alt=\"ring2\"\n                          class=\"ring2\"\n                          src={require(`./images/loding2.png`)}\n                        />\n                      </div>\n                    )}\n                    {!fileLoading && <CloudUploadOutlined />}\n                  </p>\n                  <p className=\"ant-upload-text\">\n                    {fileLoading ? \"Uploading\" : \"Upload\"} Video\n                  </p>\n                </div>\n\n                <input\n                  type=\"file\"\n                  name=\"media\"\n                  accept={mediaType}\n                  onChange={this.handleChange}\n                />\n\n                {fileNameInvalid && fileName.length === 0 && (\n                  <div class=\"ant-form-item-explain ant-form-item-explain-error\">\n                    <div role=\"alert\">File is required!</div>\n                  </div>\n                )}\n              </div>\n            )}\n            {tourStatus !== \"preview\" && tourType === \"video\" && (\n              <div className=\"add-step-bt-container\">\n                <button\n                  disabled={fileLoading}\n                  onClick={this.addStepClickHandler}\n                  className=\"custom-button add-step-button trail_add_step_btn\"\n                >\n                  ADD STEP\n                </button>\n              </div>\n            )}\n            {tourStatus === \"preview\" && tourType === \"video\" && (\n              <input\n                type=\"submit\"\n                onClick={() => this.onTourVideoTrail(this.state.tourStep - 1)}\n                value=\"Previous\"\n                className=\"custom-button\"\n              />\n            )}\n            {tourStatus === \"preview\" && tourType === \"video\" && (\n              <input\n                type=\"submit\"\n                onClick={() => this.onTourVideoTrail(this.state.tourStep + 1)}\n                value=\"Next\"\n                className=\"custom-button\"\n              />\n            )}\n            {tourStatus !== \"preview\" && tourType === \"audio\" && (\n              <div className=\"mb-2\">\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  value={title}\n                  placeholder=\"Enter Audio Title\"\n                  className=\"ant-input\"\n                  onChange={this.onChangeToInput}\n                  onKeyDown={(e) => e.stopPropagation()}\n                  autoComplete=\"off\"\n                />\n\n                {titleInvalid && title.length === 0 && (\n                  <div class=\"ant-form-item-explain ant-form-item-explain-error\">\n                    <div role=\"alert\">Please enter title!</div>\n                  </div>\n                )}\n              </div>\n            )}\n            {tourStatus !== \"preview\" && tourType === \"audio\" && (\n              <input\n                type=\"text\"\n                name=\"web_url\"\n                value={fileName}\n                onKeyDown={(e) => e.stopPropagation()}\n                placeholder=\"Audio Filename\"\n                className=\"ant-input mb-2\"\n                autoComplete=\"off\"\n                disabled={true}\n              />\n            )}\n            {tourStatus !== \"preview\" && tourType === \"audio\" && (\n              <div className=\"upload_bx\">\n                <div className=\"ant-upload\">\n                  <p className=\"ant-upload-drag-icon\">\n                    {fileLoading && (\n                      <div class=\"trial_spinner\">\n                        <img\n                          alt=\"ring1\"\n                          class=\"ring1\"\n                          src={require(`./images/loding1.png`)}\n                        />\n                        <img\n                          alt=\"ring2\"\n                          class=\"ring2\"\n                          src={require(`./images/loding2.png`)}\n                        />\n                      </div>\n                    )}\n                    {!fileLoading && <CloudUploadOutlined />}\n                  </p>\n                  <p className=\"ant-upload-text\">\n                    {fileLoading ? \"Uploading\" : \"Upload\"} Audio\n                  </p>\n                </div>\n\n                <input\n                  type=\"file\"\n                  name=\"media\"\n                  accept={mediaType}\n                  onChange={this.handleChange}\n                />\n\n                {fileNameInvalid && fileName.length === 0 && (\n                  <div class=\"ant-form-item-explain ant-form-item-explain-error\">\n                    <div role=\"alert\">File is required!</div>\n                  </div>\n                )}\n              </div>\n            )}\n            {tourStatus !== \"preview\" && tourType === \"audio\" && (\n              <div className=\"add-step-bt-container\">\n                <button\n                  disabled={fileLoading}\n                  onClick={this.addStepClickHandler}\n                  className=\"custom-button add-step-button trail_add_step_btn\"\n                >\n                  ADD STEP\n                </button>\n              </div>\n            )}\n            {tourStatus === \"preview\" && tourType === \"audio\" && (\n              <input\n                type=\"submit\"\n                onClick={() => this.onTourVideoTrail(this.state.tourStep - 1)}\n                value=\"Previous\"\n                className=\"custom-button\"\n              />\n            )}\n            {tourStatus === \"preview\" && tourType === \"audio\" && (\n              <input\n                type=\"submit\"\n                onClick={() => this.onTourVideoTrail(this.state.tourStep + 1)}\n                value=\"Next\"\n                className=\"custom-button\"\n              />\n            )}\n          </div>\n          {tourType !== \"audio\" && tourType !== \"video\" && (\n            <form className=\"scrollable-steps-list\" id=\"\">\n              <SortableContainer\n                onSortEnd={this.onSectionDragAndDrop}\n                useDragHandle\n              >\n                {this.state.trailList.map((result, index) => (\n                  <SortableItem\n                    key={`item-${index}`}\n                    tourType={this.state.tourType}\n                    onClick={this.onClickToGetRow}\n                    index={index}\n                    i={index}\n                    tourStep={tourStep}\n                    result={result}\n                    isDeleteModalOpen={this.state.deleteModal.show}\n                    onDeleteModalOpen={this.onDeleteModalOpen}\n                    MobileTargetNotFound={this.state.MobileTargetNotFound}\n                    currentTrailsTab={currentTrailsTab}\n                  />\n                ))}\n              </SortableContainer>\n            </form>\n          )}\n        </div>\n        <div className=\"mt-18\">\n          {tourType !== \"audio\" && tourType !== \"video\" && this.state.saveSort && (\n            <div className=\"trailButtonsWrapper\">\n              <button className=\"custom-button\" onClick={this.saveSortedTrails}>\n                Save\n              </button>\n            </div>\n          )}\n          {/* {tourType !== \"audio\" &&\n            tourType !== \"video\" &&\n            this.state.trailList.length > 0 && (\n              <div className=\"trailButtonsWrapper jc-end pb-0\">\n                <button\n                  className=\"custom-button share-button\"\n                  onClick={this.copyWebApplink}\n                >\n                  Share\n                </button>\n              </div>\n            )} */}\n        </div>\n      </div>\n    );\n\n    if (tourType === \"preview\") {\n      sideBar = (\n        <form className=\"flow tr_side_form\" id=\"\">\n          <SortableContainer\n            onSortEnd={this.onSectionDragAndDrop}\n            useDragHandle\n            pressDelay={200}\n          >\n            {this.state.trailList.map((result, index) => (\n              <SortableItem\n                currentTrailsTab={currentTrailsTab}\n                key={`item-${index}`}\n                tourType={this.state.tourType}\n                onClick={this.onClickToGetRow}\n                index={index}\n                i={index}\n                tourStep={tourStep}\n                result={result}\n                isDeleteModalOpen={this.state.deleteModal.show}\n                onDeleteModalOpen={this.onDeleteModalOpen}\n                MobileTargetNotFound={this.state.MobileTargetNotFound}\n              />\n            ))}\n          </SortableContainer>\n        </form>\n      );\n    }\n\n    let componentData = (\n      <div id=\"my-extension-defaultroot\">\n        {/* Delete modal */}\n        {this.state.deleteModal.show && (\n          <TrailDeleteModal\n            onDone={onDone}\n            isTourLoading={isTourLoading}\n            onTourLoading={this.onTourLoading}\n            deleteModal={this.state.deleteModal}\n            onDeleteModalClose={this.onDeleteModalClose}\n            onDeleteButtonClick={this.onDeleteButtonClick}\n          />\n        )}\n\n        {/* Send tip modal */}\n        {this.state.sendTipModal && (\n          <SendTipModal\n            sendTip={this.sendTip}\n            setError={this.state.setError}\n            isSuccess={this.state.isSuccess}\n            isLoading={this.state.isSuccess}\n            sendLoader={this.state.sendLoader}\n            sendTipModal={this.state.sendTipModal}\n            onSendTipModalClose={this.onSendTipModalClose}\n          />\n        )}\n\n        <div\n          className={`sidepanal adadad trail_sidepanel_overlay ${\n            tourType === \"audio\" ||\n            tourType === \"video\" ||\n            tourType === \"Make Edit\"\n              ? \"white_background\"\n              : \"transparent_background\"\n          }`}\n        >\n          {createModalOpen && (\n            <CreateModalComponent\n              stepType={stepType}\n              open={createModalOpen}\n              screenSize={resizeScreen}\n              onSave={this.onSaveTrail}\n              isTourLoading={isTourLoading}\n              toggle={this.onToggleCreateModal}\n              onTourLoading={this.onTourLoading}\n              closeButtonHandler={this.onBackArrowClickHandler}\n            />\n          )}\n          <div>\n            {currentTourType === \"tooltip\" &&\n              tourType === \"preview\" &&\n              !overlay &&\n              tourStep !== \"\" &&\n              tourUrl && (\n                <WebUserTour\n                  toogleTargetDataNotFound={(value) =>\n                    this.setState({ targetDataNotFound: value })\n                  }\n                  tooltipRef={this.state.tooltipRef}\n                  tooltipToggle={this.webTourToggler}\n                  onDone={onDone}\n                  data={trailList}\n                  toggle={this.onClearToggle}\n                  tourStep={tourStep}\n                  tour={this.tourManage}\n                  closeButtonHandler={this.onCloseTooltipHandle}\n                  setLoadingState={this.setLoadingState}\n                  onNotFoundTarget={this.onNotFoundTarget}\n                  onSendTipModalOpen={this.onSendTipModalOpen}\n                  onChangeTourType={this.props.onChangeTourType}\n                  mainToggle={this.props.mainToggle}\n                />\n              )}\n            {currentTourType === \"video\" &&\n              tourType === \"preview\" &&\n              !overlay &&\n              tourStep !== \"\" &&\n              tourUrl && (\n                <VideoTour\n                  videoRef={this.state.videoRef}\n                  videoToggle={this.videoToggler}\n                  onDone={onDone}\n                  data={trailList}\n                  toggle={this.onClearToggle}\n                  tourStep={tourStep}\n                  tour={this.tourManage}\n                  tourSide={this.state.tourSide}\n                  closeButtonHandler={this.onCloseTooltipHandle}\n                  setLoadingState={this.setLoadingState}\n                />\n              )}\n            {currentTourType === \"audio\" &&\n              tourType === \"preview\" &&\n              !overlay &&\n              tourStep !== \"\" &&\n              tourUrl && (\n                <AudioTour\n                  audioRef={this.state.audioRef}\n                  audioToggle={this.audioToggler}\n                  onDone={onDone}\n                  data={trailList}\n                  toggle={this.onClearToggle}\n                  tourStep={tourStep}\n                  tour={this.tourManage}\n                  tourSide={this.state.tourSide}\n                  closeButtonHandler={this.onCloseTooltipHandle}\n                  setLoadingState={this.setLoadingState}\n                />\n              )}\n            {currentTourType === \"modal\" &&\n              tourType === \"preview\" &&\n              !overlay &&\n              tourStep !== \"\" &&\n              tourUrl && (\n                <PreviewModalComponent\n                  ref={this.previewModalRef}\n                  previewModalRef={this.state.previewModalRef}\n                  previewModalToggle={this.modelToggler}\n                  onDone={onDone}\n                  data={trailList}\n                  toggle={this.onClearToggle}\n                  tourStep={tourStep}\n                  tour={this.tourManage}\n                  tourSide={this.state.tourSide}\n                  closeButtonHandler={this.onCloseTooltipHandle}\n                  setLoadingState={this.setLoadingState}\n                  onSendTipModalOpen={this.onSendTipModalOpen}\n                />\n              )}\n\n            {currentTourType !== \"\" &&\n              tourType === \"preview\" &&\n              tourStep !== \"\" &&\n              !overlay &&\n              this.state.targetDataNotFound && (\n                <TargetNotFound\n                  toogleTargetDataNotFound={(value) =>\n                    this.setState({ targetDataNotFound: value })\n                  }\n                  previewModalToggle={this.modelToggler}\n                  onDone={onDone}\n                  data={trailList}\n                  toggle={this.onClearToggle}\n                  tourStep={tourStep}\n                  tour={this.tourManage}\n                  tourSide={this.state.tourSide}\n                  closeButtonHandler={this.onCloseTooltipHandle}\n                  setLoadingState={this.setLoadingState}\n                  onSendTipModalOpen={this.onSendTipModalOpen}\n                />\n              )}\n          </div>\n          <div\n            className={`sidepopup ${\n              openSidebar ? \"open trail_builder_side_panel_open\" : \"\"\n            }`}\n            // className={`sidepopup ${\n            //   openSidebar ? \"open trail_builder_side_panel_open\" : \"\"\n            // } ${tourType === \"preview\" ? \"overflow1\" : \"\"}`}\n          >\n            <div className=\"space\"></div>\n            {sideBar}\n            <div className=\"space\"></div>\n\n            {tourType !== \"audio\" &&\n              tourType !== \"video\" &&\n              this.state.trailList.length > 0 && (\n                <div className=\"trailButtonsWrapper jc-end pb-0\">\n                  <button\n                    className=\"custom-button share-button\"\n                    onClick={this.copyWebApplink}\n                  >\n                    Share\n                  </button>\n                </div>\n              )}\n          </div>\n          {this.state.dynamicPopupButton && (\n            <button className=\"menu pop\" onClick={this.openPopup}>\n              <img alt=\"\" src={require(\"./images/trailit_X_button_new.png\")} />\n            </button>\n          )}\n        </div>\n      </div>\n    );\n\n    if (\n      isDraggable &&\n      tourType !== \"Make Edit\" &&\n      currentTourType !== \"audio\" &&\n      currentTourType !== \"video\"\n    ) {\n      componentData = (\n        <Draggable disabled={!isDraggable} position={null}>\n          <div>\n            <div id=\"my-extension-defaultroot\">\n              {/* Delete modal */}\n              {this.state.deleteModal.show && (\n                <TrailDeleteModal\n                  onDone={onDone}\n                  isTourLoading={isTourLoading}\n                  onTourLoading={this.onTourLoading}\n                  deleteModal={this.state.deleteModal}\n                  onDeleteModalClose={this.onDeleteModalClose}\n                  onDeleteButtonClick={this.onDeleteButtonClick}\n                />\n              )}\n\n              {/* Send tip modal */}\n              {this.state.sendTipModal && (\n                <SendTipModal\n                  sendTip={this.sendTip}\n                  setError={this.state.setError}\n                  isSuccess={this.state.isSuccess}\n                  isLoading={this.state.isSuccess}\n                  sendLoader={this.state.sendLoader}\n                  sendTipModal={this.state.sendTipModal}\n                  onSendTipModalClose={this.onSendTipModalClose}\n                />\n              )}\n\n              <div\n                className={`sidepanal adadad trail_sidepanel_overlay ${\n                  tourType === \"audio\" ||\n                  tourType === \"video\" ||\n                  tourType === \"Make Edit\"\n                    ? \"white_background\"\n                    : \"transparent_background\"\n                }`}\n              >\n                {createModalOpen && (\n                  <CreateModalComponent\n                    stepType={stepType}\n                    open={createModalOpen}\n                    onSave={this.onSaveTrail}\n                    screenSize={resizeScreen}\n                    isTourLoading={isTourLoading}\n                    toggle={this.onToggleCreateModal}\n                    onTourLoading={this.onTourLoading}\n                    closeButtonHandler={this.onBackArrowClickHandler}\n                  />\n                )}\n                <div>\n                  {currentTourType === \"tooltip\" &&\n                    tourType === \"preview\" &&\n                    !overlay &&\n                    tourStep !== \"\" &&\n                    tourUrl && (\n                      <WebUserTour\n                        toogleTargetDataNotFound={(value) =>\n                          this.setState({\n                            targetDataNotFound: value,\n                          })\n                        }\n                        tooltipRef={this.state.tooltipRef}\n                        tooltipToggle={this.webTourToggler}\n                        onDone={onDone}\n                        data={trailList}\n                        toggle={this.onClearToggle}\n                        tourStep={tourStep}\n                        tour={this.tourManage}\n                        closeButtonHandler={this.onCloseTooltipHandle}\n                        setLoadingState={this.setLoadingState}\n                        onNotFoundTarget={this.onNotFoundTarget}\n                        onSendTipModalOpen={this.onSendTipModalOpen}\n                        onChangeTourType={this.props.onChangeTourType}\n                        mainToggle={this.props.mainToggle}\n                      />\n                    )}\n                  {currentTourType === \"video\" &&\n                    tourType === \"preview\" &&\n                    !overlay &&\n                    tourStep !== \"\" &&\n                    tourUrl && (\n                      <VideoTour\n                        videoRef={this.state.videoRef}\n                        videoToggle={this.videoToggler}\n                        onDone={onDone}\n                        data={trailList}\n                        toggle={this.onClearToggle}\n                        tourStep={tourStep}\n                        tour={this.tourManage}\n                        tourSide={this.state.tourSide}\n                        closeButtonHandler={this.onCloseTooltipHandle}\n                        setLoadingState={this.setLoadingState}\n                      />\n                    )}\n                  {currentTourType === \"audio\" &&\n                    tourType === \"preview\" &&\n                    !overlay &&\n                    tourStep !== \"\" &&\n                    tourUrl && (\n                      <AudioTour\n                        audioRef={this.state.audioRef}\n                        audioToggle={this.audioToggler}\n                        onDone={onDone}\n                        data={trailList}\n                        toggle={this.onClearToggle}\n                        tourStep={tourStep}\n                        tour={this.tourManage}\n                        tourSide={this.state.tourSide}\n                        closeButtonHandler={this.onCloseTooltipHandle}\n                        setLoadingState={this.setLoadingState}\n                      />\n                    )}\n                  {currentTourType === \"modal\" &&\n                    tourType === \"preview\" &&\n                    !overlay &&\n                    tourStep !== \"\" &&\n                    tourUrl && (\n                      <PreviewModalComponent\n                        ref={this.previewModalRef}\n                        previewModalRef={this.state.previewModalRef}\n                        previewModalToggle={this.modelToggler}\n                        onDone={onDone}\n                        data={trailList}\n                        toggle={this.onClearToggle}\n                        tourStep={tourStep}\n                        tour={this.tourManage}\n                        tourSide={this.state.tourSide}\n                        closeButtonHandler={this.onCloseTooltipHandle}\n                        setLoadingState={this.setLoadingState}\n                        onSendTipModalOpen={this.onSendTipModalOpen}\n                      />\n                    )}\n\n                  {currentTourType !== \"\" &&\n                    tourType === \"preview\" &&\n                    tourStep !== \"\" &&\n                    !overlay &&\n                    this.state.targetDataNotFound && (\n                      <TargetNotFound\n                        toogleTargetDataNotFound={(value) =>\n                          this.setState({ targetDataNotFound: value })\n                        }\n                        previewModalToggle={this.modelToggler}\n                        onDone={onDone}\n                        data={trailList}\n                        toggle={this.onClearToggle}\n                        tourStep={tourStep}\n                        tour={this.tourManage}\n                        tourSide={this.state.tourSide}\n                        closeButtonHandler={this.onCloseTooltipHandle}\n                        setLoadingState={this.setLoadingState}\n                        onSendTipModalOpen={this.onSendTipModalOpen}\n                      />\n                    )}\n                </div>\n                <div\n                  className={`sidepopup ${\n                    openSidebar ? \"open trail_builder_side_panel_open\" : \"\"\n                  }`}\n                  // className={`sidepopup ${\n                  //   openSidebar ? \"open trail_builder_side_panel_open\" : \"\"\n                  // } ${tourType === \"preview\" ? \"overflow1\" : \"\"}`}\n                >\n                  <div className=\"space\"></div>\n                  {sideBar}\n                  <div className=\"space\"></div>\n                  {tourType !== \"audio\" &&\n                    tourType !== \"video\" &&\n                    this.state.trailList.length > 0 && (\n                      <div className=\"trailButtonsWrapper jc-end pb-0\">\n                        <button\n                          className=\"custom-button share-button\"\n                          onClick={this.copyWebApplink}\n                        >\n                          Share\n                        </button>\n                      </div>\n                    )}\n                </div>\n                {this.state.dynamicPopupButton && (\n                  <button\n                    onTouchEnd={this.openPopup}\n                    className=\"menu pop\"\n                    onClick={this.openPopup}\n                  >\n                    <img\n                      alt=\"\"\n                      src={require(\"./images/trailit_X_button_new.png\")}\n                    />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </Draggable>\n      );\n    }\n\n    if (isTourLoading) {\n      if (\n        (currentTourType === \"preview\" || currentTourType === \"\") &&\n        (tourType === \"modal\" || tourType === \"Make Edit\" || tourType === \"\")\n      ) {\n        const modal = shadowRoot.querySelector(\".trial_create_modal_main\");\n\n        if (modal) {\n          modal.classList.remove(\"trial_create_modal_main\");\n        }\n      }\n\n      const myExtensionRootFlip = shadowRoot.getElementById(\n        \"my-extension-root-flip\"\n      );\n\n      if (myExtensionRootFlip) {\n        myExtensionRootFlip.style.zIndex = \"99999999\";\n      }\n\n      const loader = shadowRoot.getElementById(\"extension-splash-screen\");\n\n      if (loader) {\n        loader.style.display = \"flex\";\n      }\n    } else {\n      const myExtensionRootFlip = shadowRoot.getElementById(\n        \"my-extension-root-flip\"\n      );\n\n      if (myExtensionRootFlip) {\n        myExtensionRootFlip.style.zIndex = \"9999999999\";\n      }\n\n      const loader = shadowRoot.getElementById(\"extension-splash-screen\");\n\n      if (loader) {\n        loader.style.display = \"none\";\n      }\n    }\n\n    return (\n      <>\n        <style>{defaultButtonCss1}</style>\n        <style>{defaultButtonCss2}</style>\n        <style>{defaultButtonCss3}</style>\n\n        {componentData}\n      </>\n    );\n  }\n}\n\nclass MainFlip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainComponent: false,\n      defaultComponent: false,\n      isFlipped: false,\n      tourType: \"\",\n    };\n\n    this.onStorageHandleChange = this.onStorageHandleChange.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\n      \"visibilitychange\",\n      function () {\n        if (document.hidden) {\n          //...\n        }\n      },\n      false\n    );\n\n    chrome.storage.local.get(\n      [\"openButton\", \"tourType\"],\n      function (items) {\n        this.onChangeTourType(items.tourType);\n        if (items.tourType !== \"preview\") {\n          this.setState({\n            defaultComponent: false,\n            mainComponent: false,\n            isFlipped: false,\n          });\n        } else {\n          toggle();\n          this.setState({\n            defaultComponent: true,\n            mainComponent: false,\n            isFlipped: true,\n          });\n        }\n      }.bind(this)\n    );\n  }\n\n  onStorageHandleChange = (changes) => {\n    if (\n      changes.newValue.tourType !== undefined &&\n      changes.newValue.tourType === \"\"\n    ) {\n      this.setState({ isFlipped: false });\n    } else if (\n      changes.newValue.tourType !== undefined &&\n      changes.newValue.tourType !== \"\"\n    ) {\n      this.setState({ isFlipped: true });\n    }\n  };\n\n  mainToggle = (isTrue) => {\n    if (this.state.mainComponent || isTrue) {\n      root1 = \"block\";\n      this.setState({\n        defaultComponent: true,\n        mainComponent: false,\n        isFlipped: true,\n      });\n    } else {\n      root1 = \"none\";\n      this.setState({\n        defaultComponent: false,\n        mainComponent: true,\n        isFlipped: false,\n      });\n    }\n  };\n\n  downToggleButton = (status) => {\n    if (status) {\n      root1 = \"block\";\n      this.setState({ defaultComponent: true, mainComponent: false });\n    } else {\n      root1 = \"none\";\n      this.setState({ defaultComponent: false, mainComponent: true });\n    }\n  };\n\n  onChangeTourType = (type) => {\n    if (type === \"\" || type === undefined) {\n      this.setState({ isFlipped: false, tourType: \"\" });\n    } else {\n      this.setState({ isFlipped: true, tourType: type });\n    }\n  };\n\n  render() {\n    const { defaultComponent, isFlipped } = this.state;\n    defaultComp = defaultComponent;\n    flipped = isFlipped;\n\n    return (\n      <React.Fragment>\n        <style>{mainFlipCss}</style>\n        <div className={`trail_card ${isFlipped ? \"trail_flipped\" : \"\"}`}>\n          <div className={\"trail_card__face trail_card__face--front\"}>\n            <Main\n              mainToggle={this.mainToggle}\n              onChangeTourType={this.onChangeTourType}\n              downToggleButton={this.downToggleButton}\n            />\n          </div>\n          <div className={\"trail_card__face trail_card__face--back\"}>\n            <DefaultButton\n              mainToggle={this.mainToggle}\n              onChangeTourType={this.onChangeTourType}\n              downToggleButton={this.downToggleButton}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// MainFlip render function\nconst mainFlipRender = () => {\n  chrome.storage.local.get(\n    [\"isAuth\", \"authToken\", \"userData\"],\n    function (items) {\n      if (items.isAuth) {\n        // Update content file code in tabs\n        const extensionTestID = \"extension-div\";\n        let extensionTest = document.getElementById(extensionTestID);\n\n        if (!extensionTest) {\n          extensionTest = document.createElement(\"div\");\n          extensionTest.setAttribute(\"id\", extensionTestID);\n          window.document.body.append(extensionTest);\n          extensionTest.attachShadow({ mode: \"open\" });\n        }\n\n        // Select our shadow host\n        let extensionRoot = document.getElementById(\"extension-div\");\n        if (extensionRoot) {\n          // Create the shadow root\n          const shadowRoot = extensionRoot.shadowRoot;\n\n          if (shadowRoot) {\n            app = shadowRoot.getElementById(\"my-extension-root-flip\");\n            if (!app) {\n              // Create a div element\n              app = document.createElement(\"div\");\n              app.setAttribute(\"id\", \"my-extension-root-flip\");\n\n              const loader = document.createElement(\"div\");\n              loader.setAttribute(\"id\", \"extension-splash-screen\");\n              loader.innerHTML = `\n                <svg className=\"extension-splash-spinner\" viewBox=\"0 0 50 50\">\n                  <circle\n                      className=\"path\"\n                      cx=\"25\"\n                      cy=\"25\"\n                      r=\"20\"\n                      fill=\"none\"\n                      strokeWidth=\"5\"\n                  ></circle>\n                </svg>\n              `;\n\n              const modalOpen = document.createElement(\"div\");\n              modalOpen.setAttribute(\"class\", \"modal-open\");\n\n              const style0 = document.createElement(\"style\");\n              style0.textContent = myExtensionRootFlipCss0;\n\n              const style1 = document.createElement(\"style\");\n              style1.textContent = myExtensionRootFlipCss1;\n\n              const style2 = document.createElement(\"style\");\n              style2.textContent = myExtensionRootFlipCss2;\n\n              const style3 = document.createElement(\"style\");\n              style3.textContent = myExtensionRootFlipCss3;\n\n              const style4 = document.createElement(\"style\");\n              style4.textContent = myExtensionRootFlipCss4;\n\n              const style5 = document.createElement(\"style\");\n              style5.textContent = myExtensionRootFlipCss5;\n\n              const tooltipStyle1 = document.createElement(\"style\");\n              tooltipStyle1.textContent = tooltipCss1;\n\n              // Append div to shadow DOM\n              shadowRoot.appendChild(style1);\n              shadowRoot.appendChild(style2);\n              shadowRoot.appendChild(style3);\n              shadowRoot.appendChild(style4);\n              shadowRoot.appendChild(style5);\n              shadowRoot.appendChild(tooltipStyle1);\n              shadowRoot.appendChild(app);\n              shadowRoot.appendChild(loader);\n              shadowRoot.appendChild(modalOpen);\n            }\n          }\n        }\n\n        app.style.display = \"none\";\n\n        ReactDOM.render(<MainFlip />, app);\n      }\n    }\n  );\n};\n\nchrome.runtime.onConnect.addListener((port) => {\n  if (port.name === \"Trailit-webapp\") {\n    port.onMessage.addListener((msgObj, sender, sendResponse) => {\n      if (msgObj.message === \"check_login_status\") {\n        chrome.storage.local.get([\"isAuth\", \"userData\"], (items) => {\n          if (items.isAuth) {\n            port.postMessage({\n              response: true,\n              userId: get([\"userData\", \"_id\"], items),\n            });\n          } else {\n            port.postMessage({ response: false });\n          }\n        });\n      }\n    });\n  }\n});\n\nchrome.runtime.onMessage.addListener((msgObj, sender, sendResponse) => {\n  if (msgObj.message === \"addon_login\") {\n    chrome.storage.local.set({\n      userData: { ...msgObj.payload.loggedInData },\n      authToken: msgObj.payload.authToken,\n      isAuth: true,\n      // reload: true,\n    });\n\n    // Call main flip render\n    mainFlipRender();\n  }\n  if (msgObj.message === \"addon_logout\") {\n    chrome.storage.local.clear();\n\n    if (app && app.style) {\n      app.style.display = \"none\";\n    }\n  }\n\n  if (msgObj.message === \"autoLogoutTriggered\") {\n    chrome.storage.local.get(\n      [\"isAuth\", \"autoLogoutTime\"],\n      async function (items) {\n        const logoutTime = items.autoLogoutTime;\n        if (!logoutTime) return;\n\n        if (items.isAuth && logoutTime < Date.now()) {\n          try {\n            // Call logout api\n            await logout();\n            // if (msgObj.apiCall) {\n            // }\n\n            chrome.runtime.sendMessage(\"\", { type: \"logout\" });\n            chrome.runtime.sendMessage({ badgeText: `` });\n            chrome.storage.local.set({\n              trail_web_user_tour: [],\n              notification: true,\n              closeContinue: false,\n            });\n            chrome.storage.local.clear();\n          } catch (err) {}\n        }\n      }\n    );\n  }\n});\n\nif (chrome.runtime.id) {\n  // Call mainFlipRender function\n  mainFlipRender();\n\n  chrome.runtime.onMessage.addListener((msgObj, sender, sendResponse) => {\n    if (msgObj.status === \"logout\") {\n      // Remove items from local storage\n      // window.localStorage.removeItem(\"add-on-auto-lgout-tm\");\n\n      // Reset items from chrome storage\n      chrome.storage.local.remove(\"autoLogoutTime\");\n\n      if (app && app.style && app.style.display === \"block\") {\n        app.style.display = \"none\";\n      }\n    } else {\n      if (\n        msgObj.subject !== \"updateTimeout\" &&\n        msgObj.subject !== \"DOMObj\" &&\n        msgObj !== \"chrome_modal\" &&\n        msgObj.subject !== \"CreateTrail\" &&\n        msgObj.message !== \"urlChanged\" &&\n        msgObj.message !== \"addon_login\" &&\n        msgObj.message !== \"addon_logout\"\n      ) {\n        setTimeout(() => {\n          // to handle open tab in entire tab\n          chrome.storage.local.get(\n            [\"openButton\", \"tourType\"],\n            function (items) {\n              if (app && app.style && app.style.display === \"none\") {\n                app.style.display = \"block\";\n              }\n            }\n          );\n        });\n      }\n    }\n  });\n}\n\nconst toggle = () => {\n  if (app.style.display === \"none\") {\n    app.style.display = \"block\";\n  } else {\n    app.style.display = \"none\";\n  }\n};\n",["265","266"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/mySubscription.js",["267","268","269","270"],"import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport $ from \"jquery\";\r\n\r\nconst chrome = window.chrome;\r\n\r\nclass MySubscription extends React.Component {\r\n  toggle = () => {\r\n    this.props.toggle(false);\r\n  };\r\n\r\n  render() {\r\n    const { open, followerList } = this.props;\r\n\r\n    $(document).ready(() => {\r\n      const modalDiv = document.querySelector(\".tr_modal\");\r\n\r\n      if (modalDiv) {\r\n        if (!modalDiv.parentNode.parentNode.parentNode.getAttribute(\"class\")) {\r\n          modalDiv.parentNode.parentNode.parentNode.setAttribute(\r\n            \"class\",\r\n            \"trial_modal_show trial_create_modal_main\"\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          isOpen={open}\r\n          toggle={this.toggle}\r\n          className=\"tr_modal\"\r\n          centered={true}\r\n        >\r\n          <ModalHeader toggle={this.toggle}>My Subscription</ModalHeader>\r\n          <ModalBody>\r\n            <ul className=\"tr_notification_bx\">\r\n              {followerList && followerList.length <= 0 && (\r\n                <li class=\"tr_notFound_subscription\">No data found</li>\r\n              )}\r\n              {followerList.map((res) => (\r\n                <li>\r\n                  <a href=\"javascript:void(0);\">\r\n                    <img src=\"https://ca.slack-edge.com/TC9UZTSLX-UC8UK8ECS-96ca73a9bdf0-512\" />\r\n                    <div>\r\n                      <h4>{res}</h4>\r\n                      <p>2 hrs ago</p>\r\n                    </div>\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"trailButtonsWrapper\">\r\n              <Button className=\"custom-button\" onClick={this.toggle}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MySubscription;\r\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/common.js",["271","272","273","274"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/TrailSettingsModal.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/createModalComponent.js",["275","276","277","278","279"],"import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { Form, Input } from \"antd\";\r\nimport Icon from \"@ant-design/icons\";\r\nimport $ from \"jquery\";\r\n\r\nimport {\r\n  commonTypeSelectonButton,\r\n  commonInitialRenderFunction,\r\n  commonTooltipFormFunction,\r\n  handleFileChange,\r\n  commonFileUploadFunction,\r\n} from \"../common\";\r\n\r\nlet modalOpen;\r\n\r\nclass CreateModalComponent extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n      web_url: \"\",\r\n      trailStatus: \"text\",\r\n      fileName: \"\",\r\n      fileLoading: false,\r\n      showPreview: false,\r\n      titleInvalid: false,\r\n      fileNameInvalid: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // window.scrollTo(0, 0);\r\n    const scrollTop = $(window).scrollTop();\r\n    $(\"html, body\").animate({ scrollTop: scrollTop });\r\n\r\n    // Set trail status state\r\n    this.setState({ trailStatus: this.props.stepType });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.stepType !== this.props.stepType) {\r\n      // Set trail status state\r\n      this.setState({ trailStatus: this.props.stepType });\r\n    }\r\n  }\r\n\r\n  onChangeToInput = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const value = e.target.value;\r\n    const isInvalid = value.length === 0 ? true : false;\r\n\r\n    // Set state\r\n    this.setState({\r\n      title: value,\r\n      titleInvalid: isInvalid,\r\n    });\r\n  };\r\n\r\n  onTitleChangeHandler = (e) => {\r\n    e.stopPropagation();\r\n\r\n    this.setState({ title: e.target.value });\r\n  };\r\n\r\n  onDescriptionChangeHandler = (value) => {\r\n    this.setState({ description: value });\r\n  };\r\n\r\n  onAddStep = async () => {\r\n    const { trailStatus, title, web_url, description, fileName } = this.state;\r\n\r\n    if (fileName === \"\" || title === \"\") {\r\n      this.setState({\r\n        fileNameInvalid: true,\r\n        titleInvalid: true,\r\n      });\r\n\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        fileNameInvalid: false,\r\n        titleInvalid: false,\r\n      });\r\n    }\r\n\r\n    // Call on tour loading function\r\n    this.props.onTourLoading(true);\r\n\r\n    let obj;\r\n\r\n    if (trailStatus === \"text\") {\r\n      obj = {\r\n        url: document.URL,\r\n        type: \"modal\",\r\n        mediaType: \"modal\",\r\n        title: title,\r\n        description,\r\n      };\r\n      // });\r\n    } else {\r\n      if (this.state.title === \"\" && this.state.web_url === \"\") {\r\n        return;\r\n      }\r\n\r\n      obj = {\r\n        url: document.URL,\r\n        type: \"modal\",\r\n        mediaType: trailStatus,\r\n        title,\r\n        web_url,\r\n      };\r\n    }\r\n\r\n    try {\r\n      await this.props.onSave(obj);\r\n      this.toggle();\r\n\r\n      // Call on tour loading function\r\n      this.props.onTourLoading(false);\r\n    } catch (err) {\r\n      console.log(\"err\", err);\r\n      // Call on tour loading function\r\n      this.props.onTourLoading(false);\r\n\r\n      alert(\"Error while creating tour!\");\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      title: \"\",\r\n      description: \"\",\r\n      web_url: \"\",\r\n      fileName: \"\",\r\n      trailStatus: \"text\",\r\n    });\r\n\r\n    this.props.toggle(false);\r\n  };\r\n\r\n  onSelectOption = (status) => {\r\n    this.setState({ trailStatus: status });\r\n  };\r\n\r\n  uploadFile = (file) => {\r\n    this.setState({ fileLoading: true });\r\n\r\n    commonFileUploadFunction(file)\r\n      .then((response) => {\r\n        return response;\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          showPreview: true,\r\n          fileLoading: false,\r\n          fileName: file.name,\r\n          fileNameInvalid: false,\r\n          web_url: data.response.result.fileUrl,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ fileLoading: false });\r\n        console.log(\"Error fetching profile \" + err);\r\n      });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { trailStatus } = this.state;\r\n\r\n    // Call common hadler file change function in common file\r\n    handleFileChange(e, trailStatus, this.uploadFile);\r\n  };\r\n\r\n  selectedTooltipForm = (mediaType) => {\r\n    const {\r\n      trailStatus,\r\n      title,\r\n      fileName,\r\n      fileLoading,\r\n      titleInvalid,\r\n      fileNameInvalid,\r\n    } = this.state;\r\n\r\n    // Common tooltip form function imported from common file\r\n    return commonTooltipFormFunction(\r\n      trailStatus,\r\n      title,\r\n      fileName,\r\n      fileLoading,\r\n      this.toggle,\r\n      this.onAddStep,\r\n      this.onChangeToInput,\r\n      this.handleChange,\r\n      mediaType,\r\n      titleInvalid,\r\n      fileNameInvalid\r\n    );\r\n  };\r\n\r\n  onButtonCloseHandler = async (e) => {\r\n    // Call parent component function to close tooltip preview\r\n    await this.props.closeButtonHandler(e);\r\n  };\r\n\r\n  render() {\r\n    modalOpen = this.props.open;\r\n    const { title, description, fileName, fileLoading } = this.state;\r\n    let tourType = \"modal\";\r\n\r\n    let tooltipForm = commonInitialRenderFunction(\r\n      this.state.trailStatus,\r\n      title,\r\n      description,\r\n      this.onTitleChangeHandler,\r\n      this.onDescriptionChangeHandler,\r\n      this.toggle,\r\n      this.onAddStep,\r\n      this.selectedTooltipForm,\r\n      fileLoading\r\n    );\r\n\r\n    const { trailStatus } = this.state;\r\n\r\n    if (\r\n      document\r\n        .getElementById(\"extension-div\")\r\n        .shadowRoot.getElementById(\"my-extension-root-flip\").style.display ===\r\n      \"none\"\r\n    ) {\r\n      modalOpen = false;\r\n    } else if (\r\n      document\r\n        .getElementById(\"extension-div\")\r\n        .shadowRoot.getElementById(\"my-extension-root-flip\").style.display ===\r\n      \"block\"\r\n    ) {\r\n      modalOpen = true;\r\n    }\r\n\r\n    $(document).ready(() => {\r\n      const modalDiv = document\r\n        .getElementById(\"extension-div\")\r\n        .shadowRoot.querySelector(\".trail_create_modal\");\r\n      if (modalDiv) {\r\n        if (!modalDiv.parentNode.parentNode.parentNode.getAttribute(\"class\")) {\r\n          modalDiv.parentNode.parentNode.parentNode.setAttribute(\r\n            \"class\",\r\n            \"trial_modal_show trial_create_modal_main\"\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let headerTitle = \"\";\r\n\r\n    if (trailStatus === \"video\") {\r\n      headerTitle = \"Video\";\r\n    } else if (trailStatus === \"audio\") {\r\n      headerTitle = \"Audio\";\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          centered={true}\r\n          isOpen={modalOpen}\r\n          toggle={this.onButtonCloseHandler}\r\n          className={`tr_modal trail_create_modal ${\r\n            this.props.screenSize() && \"responsive_modal\"\r\n          }`}\r\n          container={document\r\n            .getElementById(\"extension-div\")\r\n            .shadowRoot.querySelector(\".modal-open\")}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggle}\r\n            className=\"tr_modal_trail_modal_header\"\r\n          >\r\n            Create {headerTitle} Overlay\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {commonTypeSelectonButton(\r\n              trailStatus,\r\n              this.onSelectOption,\r\n              tooltipForm,\r\n              fileName,\r\n              fileLoading,\r\n              tourType\r\n            )}\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateModalComponent;\r\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/tooltip.js",[],["280","281"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/myExtensionRootFlip.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/common-index.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/videoTour.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/audioTour.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/CreateNewTrailTab.js",["282","283","284"],"import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport Icon from '@ant-design/icons';\r\nimport $ from 'jquery';\r\nimport { createTrailId } from '../common/axios';\r\n\r\nconst chrome = window.chrome;\r\n\r\nclass CreateNewTrailTab extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            trail_name: '',\r\n            loading: false\r\n        };\r\n    };\r\n        \r\n    clickToAddTrails = (values) => {\r\n        // this.props.form.validateFields((err, values) => {\r\n        //     if (!err) {\r\n                this.setState({loading: true});\r\n                chrome.storage.local.get([\"trail_web_user_tour\", \"userData\"], async function (items) {\r\n                    const result = await createTrailId(items.userData._id, values.trail_name);\r\n                    if(result.status == 200) {\r\n                        this.setState({trail_name: '', loading: false});\r\n                        this.props.onChange(false);\r\n                        chrome.storage.local.set({trail_id: result.data.response[0].trail_id})\r\n                    }\r\n                }.bind(this))\r\n        //     }\r\n        // });\r\n    }\r\n    \r\n    render () {        \r\n        return(\r\n            <React.Fragment>\r\n                <Form name=\"normal_login\" className=\"tr_new_trail_create_form\">\r\n                    <Form.Item\r\n                        name=\"trail_name\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input Trail Name',\r\n                            }\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            placeholder=\"Enter Trail Name\"\r\n                            className=\"tr_input\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={this.clickToAddTrails} className=\"tr_button\" loading={this.state.loading}>\r\n                            Add Trail\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateNewTrailTab;",["285","286"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/textEditor.js",["287"],"import React, { useEffect, memo, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBold,\n  faItalic,\n  faUnderline,\n  faLink,\n  faStrikethrough,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { textEditor1 } from \"../css/textEditor\";\n\nconst TextEditor = memo((props) => {\n  const { onChange } = props;\n\n  // State\n  const [link, setLink] = useState(\"\");\n\n  // Remove create link container function\n  const removeCreateLinkContainer = () => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Remove create link modal\n    shadowRoot.querySelector(\".create-link-container\").style.display = \"none\";\n\n    // Set set link state\n    setLink(\"\");\n  };\n\n  // On input change handler function\n  const onInputChangeHandler = (e) => {\n    // Set link state\n    setLink(e.target.value);\n  };\n\n  // On iframe body click function\n  const onIframeBodyClick = () => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    shadowRoot\n      .querySelector(\"iframe\")\n      .contentWindow.document.body.addEventListener(\"click\", (e) => {\n        // Call remove create link container\n        removeCreateLinkContainer();\n\n        if (e.target.tagName === \"BODY\") return;\n\n        if (e.target.tagName === \"STRIKE\") {\n          // Add active-text-button class to strikeThrough button\n          shadowRoot\n            .querySelector(\".strikeThrough\")\n            .classList.add(\"active-text-button\");\n        } else {\n          // Remove active-text-button class to strikeThrough button\n          shadowRoot\n            .querySelector(\".strikeThrough\")\n            .classList.remove(\"active-text-button\");\n        }\n\n        if (e.target.tagName === \"B\") {\n          // Add active-text-button class to bold button\n          shadowRoot.querySelector(\".bold\").classList.add(\"active-text-button\");\n        } else {\n          // Remove active-text-button class to bold button\n          shadowRoot\n            .querySelector(\".bold\")\n            .classList.remove(\"active-text-button\");\n        }\n\n        if (e.target.tagName === \"U\") {\n          // Add active-text-button class to underline button\n          shadowRoot\n            .querySelector(\".underline\")\n            .classList.add(\"active-text-button\");\n        } else {\n          // Remove active-text-button class to underline button\n          shadowRoot\n            .querySelector(\".underline\")\n            .classList.remove(\"active-text-button\");\n        }\n\n        if (e.target.tagName === \"I\") {\n          // Add active-text-button class to italic button\n          shadowRoot\n            .querySelector(\".italic\")\n            .classList.add(\"active-text-button\");\n        } else {\n          // Remove active-text-button class to italic button\n          shadowRoot\n            .querySelector(\".italic\")\n            .classList.remove(\"active-text-button\");\n        }\n      });\n  };\n\n  // Udate description function\n  const updateDescription = () => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n    if (\n      shadowRoot.querySelector(\"iframe\") &&\n      shadowRoot\n        .querySelector(\"iframe\")\n        .contentWindow.document.body.getAttribute(\"eventadded\") !== \"true\"\n    ) {\n      shadowRoot\n        .querySelector(\"iframe\")\n        .contentWindow.document.body.setAttribute(\"eventadded\", \"true\");\n      shadowRoot\n        .querySelector(\"iframe\")\n        .contentWindow.document.body.addEventListener(\"keyup\", (e) => {\n          e.preventDefault();\n\n          // Call change function of parent component\n          onChange(e.target.innerHTML);\n        });\n    }\n  };\n\n  // On button click handler function\n  const onButtonClickHandler = (command) => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Toggle button\n    shadowRoot\n      .querySelector(`.${command}`)\n      .classList.toggle(\"active-text-button\");\n\n    // Execute exec command function\n    shadowRoot\n      .querySelector(\"iframe\")\n      .contentWindow.document.execCommand(command, false, null);\n\n    // Get innerHTML of body\n    const description = shadowRoot.querySelector(\"iframe\").contentWindow\n      .document.body.innerHTML;\n\n    // Call on change function\n    onChange(description);\n  };\n\n  // On link click handler function\n  const onLinkClickHandler = (command) => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Toggle button\n    shadowRoot\n      .querySelector(`.${command}`)\n      .classList.toggle(\"active-text-button\");\n\n    const linkContainer = shadowRoot.querySelector(\".create-link-container\");\n    const display = getComputedStyle(linkContainer).display;\n    shadowRoot.querySelector(\".create-link-container\").style.display =\n      display === \"none\" ? \"block\" : \"none\";\n\n    if (display === \"none\") return;\n\n    // Set set link state\n    setLink(\"\");\n  };\n\n  // On create link click handler function\n  const onCreateLinkClickHandler = (e, command) => {\n    e.preventDefault();\n    // if (!link.includes(\"https://\")) {\n    //   alert(\"Please provide valid https address!\");\n\n    //   return;\n    // }\n\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n    const iFrame = shadowRoot.querySelector(\"iframe\");\n\n    const selection = iFrame.contentWindow.document.getSelection();\n\n    // Execute exec command function\n    iFrame.contentWindow.document.execCommand(command, false, link);\n    selection.anchorNode.parentElement.target = \"_blank\";\n\n    // Remove active-text-button class\n    shadowRoot\n      .querySelector(\".linkButton\")\n      .classList.remove(\"active-text-button\");\n\n    // Get innerHTML of body\n    const description = iFrame.contentWindow.document.body.innerHTML;\n\n    // Call on change function\n    onChange(description);\n\n    // Call remove create link container\n    removeCreateLinkContainer();\n  };\n\n  // On unlink click handler function\n  const onUnlinkClickHandler = (e, command) => {\n    e.preventDefault();\n\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Execute exec command function\n    shadowRoot\n      .querySelector(\"iframe\")\n      .contentWindow.document.execCommand(command, false, null);\n\n    // Remove active-text-button class\n    shadowRoot\n      .querySelector(\".linkButton\")\n      .classList.remove(\"active-text-button\");\n\n    // Get innerHTML of body\n    const description = shadowRoot.querySelector(\"iframe\").contentWindow\n      .document.body.innerHTML;\n\n    // Call on change function\n    onChange(description);\n\n    // Call remove create link container\n    removeCreateLinkContainer();\n  };\n\n  // Enable edit moda function\n  const enableEditMode = () => {\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n\n    // Content editable true\n    shadowRoot.querySelector(\n      \"iframe\"\n    ).contentWindow.document.body.contentEditable = true;\n  };\n\n  useEffect(() => {\n    // Call enable edit mode function\n    enableEditMode();\n\n    // Call update description function\n    updateDescription();\n\n    // Call on iframe body click function\n    onIframeBodyClick();\n\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\n    const frame = shadowRoot.querySelector(\"iframe\");\n\n    if (frame) {\n      const link = document.createElement(\"link\");\n      link.type = \"text/css\";\n      link.rel = \"stylesheet\";\n      link.href =\n        \"https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap\";\n      frame.contentDocument.head.appendChild(link);\n\n      frame.contentDocument.body.style.fontFamily = \"Lato, sans-serif\";\n      frame.contentDocument.body.style.fontSize = \"14px\";\n    }\n  }, []);\n\n  return (\n    <>\n      <style>{textEditor1}</style>\n      <div id=\"custom-text-editor\">\n        <div className=\"button-container\">\n          <button\n            type=\"button\"\n            className=\"text-editor-button bold\"\n            onClick={(e) => onButtonClickHandler(\"bold\")}\n          >\n            <FontAwesomeIcon icon={faBold} size=\"sm\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"text-editor-button italic\"\n            onClick={(e) => onButtonClickHandler(\"italic\")}\n          >\n            <FontAwesomeIcon icon={faItalic} size=\"sm\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"text-editor-button underline\"\n            onClick={(e) => onButtonClickHandler(\"underline\")}\n          >\n            <FontAwesomeIcon icon={faUnderline} size=\"sm\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"text-editor-button strikeThrough\"\n            onClick={(e) => onButtonClickHandler(\"strikeThrough\")}\n          >\n            <FontAwesomeIcon icon={faStrikethrough} size=\"sm\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"text-editor-button linkButton\"\n            onClick={(e) => onLinkClickHandler(\"linkButton\")}\n          >\n            <FontAwesomeIcon icon={faLink} size=\"sm\" />\n          </button>\n        </div>\n\n        <div className=\"create-link-container\">\n          <div className=\"create-link\">\n            <input\n              value={link}\n              className=\"create-link-input\"\n              onKeyDown={(e) => e.stopPropagation()}\n              onChange={(e) => onInputChangeHandler(e)}\n            />\n            <div className=\"create-link-button-container\">\n              <button\n                className=\"custom-button-link custom-button\"\n                onClick={(e) => onCreateLinkClickHandler(e, \"createLink\")}\n              >\n                Link\n              </button>\n              <button\n                className=\"custom-button-unlink custom-button\"\n                onClick={(e) => onUnlinkClickHandler(e, \"unlink\")}\n              >\n                Unlink\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <iframe\n          name=\"richTextField\"\n          title=\"custom-text-editor\"\n          className=\"text-editor-frame\"\n        ></iframe>\n      </div>\n    </>\n  );\n});\n\nexport default TextEditor;\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/signer.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/account.js",["288","289","290","291","292","293","294","295","296"],"import BN from 'bn.js';\nimport { transfer, createAccount, signTransaction, deployContract, addKey, functionCall, fullAccessKey, functionCallAccessKey, deleteKey, stake, deleteAccount } from './transaction';\nimport { TypedError, ErrorContext } from './providers';\nimport { base_decode, base_encode } from './utils/serialize';\nimport { PublicKey } from './utils/key_pair';\nimport { PositionalArgsError } from './utils/errors';\nimport { parseRpcError } from './utils/rpc_errors';\nimport exponentialBackoff from './utils/exponential-backoff';\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n// Default amount of gas to be sent with the function calls. Used to pay for the fees\n// incurred while running the contract execution. The unused amount will be refunded back to\n// the originator.\n// Due to protocol changes that charge upfront for the maximum possible gas price inflation due to\n// full blocks, the price of max_prepaid_gas is decreased to `300 * 10**12`.\n// For discussion see https://github.com/nearprotocol/NEPs/issues/67\nconst DEFAULT_FUNC_CALL_GAS = new BN('30000000000000');\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default number of retries before giving up on a transaction.\nconst TX_STATUS_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_STATUS_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_STATUS_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\n/**\n * More information on [the Account spec](https://nomicon.io/DataStructures/Account.html)\n */\nexport class Account {\n    constructor(connection, accountId) {\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    get ready() {\n        return this._ready || (this._ready = Promise.resolve(this.fetchState()));\n    }\n    /**\n     * Helper function when getting the state of a NEAR account\n     * @returns Promise<void>\n     */\n    fetchState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = yield this.connection.provider.query(`account/${this.accountId}`, '');\n        });\n    }\n    /**\n     * Returns the state of a NEAR account\n     * @returns {Promise<AccountState>}\n     */\n    state() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            return this._state;\n        });\n    }\n    printLogsAndFailures(contractId, results) {\n        for (const result of results) {\n            console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n            this.printLogs(contractId, result.logs, '\\t');\n            if (result.failure) {\n                console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n            }\n        }\n    }\n    printLogs(contractId, logs, prefix = '') {\n        for (const log of logs) {\n            console.log(`${prefix}Log [${contractId}]: ${log}`);\n        }\n    }\n    signTransaction(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const accessKeyInfo = yield this.findAccessKey(receiverId, actions);\n            if (!accessKeyInfo) {\n                throw new TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n            }\n            const { accessKey } = accessKeyInfo;\n            const status = yield this.connection.provider.status();\n            const nonce = ++accessKey.nonce;\n            // TODO: get latest_block_hash from block query using `final` finality\n            return yield signTransaction(receiverId, nonce, actions, base_decode(status.sync_info.latest_block_hash), this.connection.signer, this.accountId, this.connection.networkId);\n        });\n    }\n    /**\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions The transaction [Action as described in the spec](https://nomicon.io/RuntimeSpec/Actions.html).\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    signAndSendTransaction(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            let txHash, signedTx;\n            // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n            const result = yield exponentialBackoff(TX_STATUS_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_STATUS_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n                [txHash, signedTx] = yield this.signTransaction(receiverId, actions);\n                const publicKey = signedTx.transaction.publicKey;\n                try {\n                    const result = yield exponentialBackoff(TX_STATUS_RETRY_WAIT, TX_STATUS_RETRY_NUMBER, TX_STATUS_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            return yield this.connection.provider.sendTransaction(signedTx);\n                        }\n                        catch (error) {\n                            if (error.type === 'TimeoutError') {\n                                console.warn(`Retrying transaction ${receiverId}:${base_encode(txHash)} as it has timed out`);\n                                return null;\n                            }\n                            throw error;\n                        }\n                    }));\n                    if (!result) {\n                        throw new TypedError(`Exceeded ${TX_STATUS_RETRY_NUMBER} attempts for transaction ${base_encode(txHash)}.`, 'RetriesExceeded', new ErrorContext(base_encode(txHash)));\n                    }\n                    return result;\n                }\n                catch (error) {\n                    if (error.message.match(/Transaction nonce \\d+ must be larger than nonce of the used access key \\d+/)) {\n                        console.warn(`Retrying transaction ${receiverId}:${base_encode(txHash)} with new nonce.`);\n                        delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                        return null;\n                    }\n                    error.context = new ErrorContext(base_encode(txHash));\n                    throw error;\n                }\n            }));\n            if (!result) {\n                throw new TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n            }\n            const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n                if (it.outcome.logs.length ||\n                    (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                    return acc.concat({\n                        'receiptIds': it.outcome.receipt_ids,\n                        'logs': it.outcome.logs,\n                        'failure': typeof it.outcome.status.Failure != 'undefined' ? parseRpcError(it.outcome.status.Failure) : null\n                    });\n                }\n                else\n                    return acc;\n            }, []);\n            this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n            if (typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                    throw new TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n                }\n                else {\n                    throw parseRpcError(result.status.Failure);\n                }\n            }\n            // TODO: if Tx is Unknown or Started.\n            return result;\n        });\n    }\n    findAccessKey(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Find matching access key based on transaction\n            const publicKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n            if (!publicKey) {\n                return null;\n            }\n            const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n            if (cachedAccessKey !== undefined) {\n                return { publicKey, accessKey: cachedAccessKey };\n            }\n            try {\n                const accessKey = yield this.connection.provider.query(`access_key/${this.accountId}/${publicKey.toString()}`, '');\n                this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n                return { publicKey, accessKey };\n            }\n            catch (e) {\n                // TODO: Check based on .type when nearcore starts returning query errors in structured format\n                if (e.message.includes('does not exist while viewing')) {\n                    return null;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add while signing and sending the transaction\n     * @param data The compiled contract code\n     * @returns {Promise<Account>}\n     */\n    createAndDeployContract(contractId, publicKey, data, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKey = fullAccessKey();\n            yield this.signAndSendTransaction(contractId, [createAccount(), transfer(amount), addKey(PublicKey.from(publicKey), accessKey), deployContract(data)]);\n            const contractAccount = new Account(this.connection, contractId);\n            return contractAccount;\n        });\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    sendMoney(receiverId, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction(receiverId, [transfer(amount)]);\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    createAccount(newAccountId, publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKey = fullAccessKey();\n            return this.signAndSendTransaction(newAccountId, [createAccount(), transfer(amount), addKey(PublicKey.from(publicKey), accessKey)]);\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     * @returns void\n     */\n    deleteAccount(beneficiaryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction(this.accountId, [deleteAccount(beneficiaryId)]);\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    deployContract(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction(this.accountId, [deployContract(data)]);\n        });\n    }\n    /**\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The method name on the contract as it is written in the contract code\n     * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically\n     *  or `Uint8Array` instance which represents bytes passed as is.\n     * @param gas max amount of gas that method call can use\n      * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    functionCall(contractId, methodName, args, gas, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            args = args || {};\n            this.validateArgs(args);\n            return this.signAndSendTransaction(contractId, [functionCall(methodName, args, gas || DEFAULT_FUNC_CALL_GAS, amount)]);\n        });\n    }\n    /**\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The method name on the contract as it is written in the contract code\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     * @returns {Promise<FinalExecutionOutcome>}\n     * TODO: expand this API to support more options.\n     */\n    addKey(publicKey, contractId, methodName, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let accessKey;\n            if (contractId === null || contractId === undefined || contractId === '') {\n                accessKey = fullAccessKey();\n            }\n            else {\n                accessKey = functionCallAccessKey(contractId, !methodName ? [] : [methodName], amount);\n            }\n            return this.signAndSendTransaction(this.accountId, [addKey(PublicKey.from(publicKey), accessKey)]);\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    deleteKey(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction(this.accountId, [deleteKey(PublicKey.from(publicKey))]);\n        });\n    }\n    /**\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    stake(publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction(this.accountId, [stake(amount, PublicKey.from(publicKey))]);\n        });\n    }\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new PositionalArgsError();\n        }\n    }\n    /**\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @returns {Promise<any>}\n     */\n    viewFunction(contractId, methodName, args, { parse = parseJsonFromRawResponse } = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            args = args || {};\n            this.validateArgs(args);\n            const result = yield this.connection.provider.query(`call/${contractId}/${methodName}`, base_encode(JSON.stringify(args)));\n            if (result.logs) {\n                this.printLogs(contractId, result.logs);\n            }\n            return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n        });\n    }\n    /**\n     * @returns array of {access_key: AccessKey, public_key: PublicKey} items.\n     */\n    getAccessKeys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.connection.provider.query(`access_key/${this.accountId}`, '');\n            // A breaking API change introduced extra information into the\n            // response, so it now returns an object with a `keys` field instead\n            // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n            if (Array.isArray(response)) {\n                return response;\n            }\n            return response.keys;\n        });\n    }\n    /**\n     * Returns account details in terms of authorized apps and transactions\n     * @returns {Promise<any>}\n     */\n    getAccountDetails() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: update the response value to return all the different keys, not just app keys.\n            // Also if we need this function, or getAccessKeys is good enough.\n            const accessKeys = yield this.getAccessKeys();\n            const result = { authorizedApps: [], transactions: [] };\n            accessKeys.map((item) => {\n                if (item.access_key.permission.FunctionCall !== undefined) {\n                    const perm = item.access_key.permission.FunctionCall;\n                    result.authorizedApps.push({\n                        contractId: perm.receiver_id,\n                        amount: perm.allowance,\n                        publicKey: item.public_key,\n                    });\n                }\n            });\n            return result;\n        });\n    }\n    /**\n     * Returns calculated account balance\n     * @returns {Promise<AccountBalance>}\n     */\n    getAccountBalance() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const genesisConfig = yield this.connection.provider.experimental_genesisConfig();\n            const state = yield this.state();\n            const costPerByte = new BN(genesisConfig.runtime_config.storage_amount_per_byte);\n            const stateStaked = new BN(state.storage_usage).mul(costPerByte);\n            const staked = new BN(state.locked);\n            const totalBalance = new BN(state.amount).add(staked);\n            const availableBalance = totalBalance.sub(BN.max(staked, stateStaked));\n            return {\n                total: totalBalance.toString(),\n                stateStaked: stateStaked.toString(),\n                staked: staked.toString(),\n                available: availableBalance.toString()\n            };\n        });\n    }\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/index.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/web.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/serialize.js",["297","298","299","300"],"import bs58 from 'bs58';\nimport BN from 'bn.js';\n// TODO: Make sure this polyfill not included when not required\nimport * as encoding from 'text-encoding-utf-8';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst TextDecoder = (typeof global.TextDecoder !== 'function') ? encoding.TextDecoder : global.TextDecoder;\nconst textDecoder = new TextDecoder('utf-8', { fatal: true });\n\nexport function base_encode(value) {\n    if (typeof (value) === 'string') {\n        value = Buffer.from(value, 'utf8');\n    }\n    return bs58.encode(Buffer.from(value));\n}\n\nexport function base_decode(value) {\n    return Buffer.from(bs58.decode(value));\n}\n\nconst INITIAL_LENGTH = 1024;\n\nexport class BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + ': ' + this.fieldPath.join('.');\n    }\n}\n\n/// Binary encoder.\nexport class BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybe_resize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    write_u8(value) {\n        this.maybe_resize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    write_u32(value) {\n        this.maybe_resize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    write_u64(value) {\n        this.maybe_resize();\n        this.write_buffer(Buffer.from(new BN(value).toArray('le', 8)));\n    }\n    write_u128(value) {\n        this.maybe_resize();\n        this.write_buffer(Buffer.from(new BN(value).toArray('le', 16)));\n    }\n    write_buffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);\n        this.length += buffer.length;\n    }\n    write_string(str) {\n        this.maybe_resize();\n        const b = Buffer.from(str, 'utf8');\n        this.write_u32(b.length);\n        this.write_buffer(b);\n    }\n    write_fixed_array(array) {\n        this.write_buffer(Buffer.from(array));\n    }\n    write_array(array, fn) {\n        this.maybe_resize();\n        this.write_u32(array.length);\n        for (const elem of array) {\n            this.maybe_resize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\n\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if (['ERR_BUFFER_OUT_OF_BOUNDS', 'ERR_OUT_OF_RANGE'].indexOf(code) >= 0) {\n                    throw new BorshError('Reached the end of buffer when deserializing');\n                }\n            }\n            throw e;\n        }\n    };\n}\n\nexport class BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    read_u8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    read_u32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    read_u64() {\n        const buf = this.read_buffer(8);\n        return new BN(buf, 'le');\n    }\n    read_u128() {\n        const buf = this.read_buffer(16);\n        return new BN(buf, 'le');\n    }\n    read_buffer(len) {\n        if ((this.offset + len) > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    read_string() {\n        const len = this.read_u32();\n        const buf = this.read_buffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    read_fixed_array(len) {\n        return new Uint8Array(this.read_buffer(len));\n    }\n    read_array(fn) {\n        const len = this.read_u32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_u8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_u32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_u64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_u128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_string\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_fixed_array\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"read_array\", null);\n\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === 'string') {\n            writer[`write_${fieldType}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === 'number') {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.write_fixed_array(value);\n            }\n            else {\n                writer.write_array(value, (item) => { serializeField(schema, fieldName, item, fieldType[0], writer); });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case 'option': {\n                    if (value === null) {\n                        writer.write_u8(0);\n                    }\n                    else {\n                        writer.write_u8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                default: throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\n\nfunction serializeStruct(schema, obj, writer) {\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === 'struct') {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === 'enum') {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.write_u8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nexport function serialize(schema, obj) {\n    const writer = new BinaryWriter();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\n\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === 'string') {\n            return reader[`read_${fieldType}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === 'number') {\n                return reader.read_fixed_array(fieldType[0]);\n            }\n            return reader.read_array(() => deserializeField(schema, fieldName, fieldType[0], reader));\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\n\nfunction deserializeStruct(schema, classType, reader) {\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === 'struct') {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === 'enum') {\n        const idx = reader.read_u8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n\n/// Deserializes object from bytes using schema.\nexport function deserialize(schema, classType, buffer) {\n    const reader = new BinaryReader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/keystore.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/browser_local_storage_key_store.js",["301","302","303","304","305","306","307"],"import { KeyStore } from './keystore';\nimport { KeyPair } from '../utils/key_pair';\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\nexport class BrowserLocalStorageKeyStore extends KeyStore {\n    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {\n        super();\n        this.localStorage = localStorage;\n        this.prefix = prefix;\n    }\n    /**\n     * Sets a local storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n        });\n    }\n    /**\n     * Gets a key from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n            if (!value) {\n                return null;\n            }\n            return KeyPair.fromString(value);\n        });\n    }\n    /**\n     * Removes a key from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n        });\n    }\n    /**\n     * Removes all items from local storage\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const key of this.storageKeys()) {\n                if (key.startsWith(this.prefix)) {\n                    this.localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    getNetworks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Set();\n            for (const key of this.storageKeys()) {\n                if (key.startsWith(this.prefix)) {\n                    const parts = key.substring(this.prefix.length).split(':');\n                    result.add(parts[1]);\n                }\n            }\n            return Array.from(result.values());\n        });\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Array();\n            for (const key of this.storageKeys()) {\n                if (key.startsWith(this.prefix)) {\n                    const parts = key.substring(this.prefix.length).split(':');\n                    if (parts[1] === networkId) {\n                        result.push(parts[0]);\n                    }\n                }\n            }\n            return result;\n        });\n    }\n    /**\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n    storageKeyForSecretKey(networkId, accountId) {\n        return `${this.prefix}${accountId}:${networkId}`;\n    }\n    *storageKeys() {\n        for (let i = 0; i < this.localStorage.length; i++) {\n            yield this.localStorage.key(i);\n        }\n    }\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/code/getBalance.js",["308","309"],"import { get } from \"../AppUtill.js\";\nimport { getNearDetails } from \"../common/axios.js\";\n\nconst nearAPI = require(\"../near-api-js/common-index.js\");\nconst config = require(\"./config.json\");\n// const account = 'testuser1.testnet';\nconst sender = \"3piivr9bo.testnet\";\nconst receiver = \"testuser1.testnet\";\n\nexport async function getBalance(user_id) {\n  const { data } = await getNearDetails(user_id);\n\n  if (get([\"data\", \"response\", \"data\", \"socialId\"], data)) {\n    const provider = new nearAPI.providers.JsonRpcProvider(config.nodeUrl);\n    const state = await provider.query(\n      `account/${get([\"data\", \"response\", \"data\", \"socialId\"], data)}`,\n      \"\"\n    );\n    // console.log(`Account ID: ${sender}`);\n    // console.log(`Balance: ${nearAPI.utils.format.formatNearAmount(state.amount, 4)}`);\n    return nearAPI.utils.format.formatNearAmount(state.amount, 2);\n  } else return null;\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userCUSD.js",["310","311","312","313"],"import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport { wallet } from \"../../common/celo\";\r\nimport SendTipForm from \"../../common/SendTipForm\";\r\nimport { sendTransection } from \"../../code/sendtx\";\r\n\r\nconst chrome = window.chrome;\r\n\r\nclass userCUSD extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      toAddress: \"\",\r\n      amount: \"\",\r\n      sendLoader: false,\r\n      privateKey: this.props.privateKey,\r\n      isSuccess: false,\r\n      setError: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ privateKey: this.props.privateKey });\r\n  }\r\n\r\n  onChangeInput = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  sendTip = async (toAddress, amount) => {\r\n    this.setState({ sendLoader: true });\r\n\r\n    const { privateKey } = this.state;\r\n    sendTransection(privateKey, toAddress, amount)\r\n      .then((res) => {\r\n        if (res && res.code && res.code === 400) {\r\n          throw new Error(res.err);\r\n        }\r\n\r\n        // Set is success state\r\n        this.setState({ isSuccess: true });\r\n\r\n        setTimeout(() => {\r\n          // Hide side modal\r\n          this.props.onHideSlide();\r\n\r\n          // Set is success state\r\n          this.setState({ isSuccess: false });\r\n        }, 5000);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n\r\n        this.setState({ setError: err.message });\r\n\r\n        setTimeout(() => {\r\n          // Hide side modal\r\n          this.props.onHideSlide();\r\n\r\n          // Set is success state\r\n          this.setState({ setError: false });\r\n        }, 5000);\r\n      });\r\n    // await wallet.transfer(this.state.toAddress, this.state.amount);\r\n    // let balance = await wallet.balance();\r\n    // this.setState({\r\n    //   toAddress: \"\",\r\n    //   amount: \"\",\r\n    //   balance,\r\n    //   sendLoader: false,\r\n    // });\r\n  };\r\n\r\n  onClear = () => {\r\n    $(\"body\").attr(\"class\", \"\");\r\n  };\r\n  onSlide = () => {\r\n    this.setState({ slideBalance: !this.state.slideBalance });\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, toAddress, amount, sendLoader } = this.state;\r\n\r\n    return (\r\n      <div className=\"trailit_userPanalLeftBox\">\r\n        {this.state.isSuccess ? (\r\n          <div className=\"tr_description\">\r\n            <p style={{ color: \"#0c8026\", textAlign: \"center\" }}>\r\n              Transaction completed successfully.\r\n            </p>\r\n          </div>\r\n        ) : !this.state.setError ? (\r\n          <SendTipForm\r\n            isLoading={isLoading}\r\n            sendLoader={sendLoader}\r\n            sendTip={this.sendTip}\r\n            onCancel={this.onClear}\r\n          />\r\n        ) : (\r\n          <div className=\"tr_description\">\r\n            <p style={{ color: \"#d21e1e\", textAlign: \"center\" }}>\r\n              {this.state.setError}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default userCUSD;\r\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userProfileEdit.js",["314"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/validation.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/defaultButton.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/draggable.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/ContinueTourConfirmation.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/settingsComponents.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/wallet-account.js",["315","316"],"import { Account } from './account';\nimport { SCHEMA, createTransaction } from './transaction';\nimport { KeyPair, serialize, PublicKey } from './utils';\nimport { base_decode } from './utils/serialize';\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\nexport class WalletConnection {\n    constructor(near, appKeyPrefix) {\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || { allKeys: [] };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletAccount is authorized with the wallet.\n     * @example\n     * walletAccount.isSignedIn();\n     */\n    isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * walletAccount.getAccountId();\n     */\n    getAccountId() {\n        return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param contractId The NEAR account where the contract is deployed\n     * @param title Name of the application that will appear as requesting access in Wallet\n     * @param successUrl Optional url to redirect upon success\n     * @param failureUrl Optional url to redirect upon failure\n     *\n     * @example\n     *   walletAccount.requestSignIn(\n     *     account-with-deploy-contract,\n     *     \"Guest Book\",\n     *     \"https://example.com/success.html\",\n     *     \"https://example.com/error.html\");\n     */\n    requestSignIn(contractId, title, successUrl, failureUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.getAccountId() || (yield this._keyStore.getKey(this._networkId, this.getAccountId()))) {\n                return Promise.resolve();\n            }\n            const currentUrl = new URL(window.location.href);\n            const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n            newUrl.searchParams.set('title', title);\n            newUrl.searchParams.set('contract_id', contractId);\n            newUrl.searchParams.set('success_url', successUrl || currentUrl.href);\n            newUrl.searchParams.set('failure_url', failureUrl || currentUrl.href);\n            newUrl.searchParams.set('app_url', currentUrl.origin);\n            const accessKey = KeyPair.fromRandom('ed25519');\n            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n            yield this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n            window.location.assign(newUrl.toString());\n        });\n    }\n    /**\n     * Requests the user to quickly sign for a transaction or batch of transactions\n     * @param transactions Array of Transaction objects that will be requested to sign\n     * @param callbackUrl The url to navigate to after the user is prompted to sign\n     */\n    requestSignTransactions(transactions, callbackUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentUrl = new URL(window.location.href);\n            const newUrl = new URL('sign', this._walletBaseUrl);\n            newUrl.searchParams.set('transactions', transactions\n                .map(transaction => serialize.serialize(SCHEMA, transaction))\n                .map(serialized => Buffer.from(serialized).toString('base64'))\n                .join(','));\n            newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n            window.location.assign(newUrl.toString());\n        });\n    }\n    /**\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n    _completeSignInWithAccessKey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentUrl = new URL(window.location.href);\n            const publicKey = currentUrl.searchParams.get('public_key') || '';\n            const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n            const accountId = currentUrl.searchParams.get('account_id') || '';\n            // TODO: Handle situation when access key is not added\n            if (accountId && publicKey) {\n                this._authData = {\n                    accountId,\n                    allKeys\n                };\n                window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n                yield this._moveKeyFromTempToPermanent(accountId, publicKey);\n            }\n            currentUrl.searchParams.delete('public_key');\n            currentUrl.searchParams.delete('all_keys');\n            currentUrl.searchParams.delete('account_id');\n            window.history.replaceState({}, document.title, currentUrl.toString());\n        });\n    }\n    /**\n     *\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n    _moveKeyFromTempToPermanent(accountId, publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keyPair = yield this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n            yield this._keyStore.setKey(this._networkId, accountId, keyPair);\n            yield this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        });\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n    signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n    account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexport const WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using (@link WalletConnection) when no local key is available.\n */\nclass ConnectedWalletAccount extends Account {\n    constructor(walletConnection, connection, accountId) {\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    signAndSendTransaction(receiverId, actions) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: { get: () => super.signAndSendTransaction }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const localKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n            let accessKey = yield this.accessKeyForTransaction(receiverId, actions, localKey);\n            if (!accessKey) {\n                throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n            }\n            if (localKey && localKey.toString() === accessKey.public_key) {\n                try {\n                    return yield _super.signAndSendTransaction.call(this, receiverId, actions);\n                }\n                catch (e) {\n                    // TODO: Use TypedError when available\n                    if (e.message.includes('does not have enough balance')) {\n                        accessKey = yield this.accessKeyForTransaction(receiverId, actions);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            const publicKey = PublicKey.from(accessKey.public_key);\n            // TODO: Cache & listen for nonce updates for given access key\n            const nonce = accessKey.access_key.nonce + 1;\n            const status = yield this.connection.provider.status();\n            const blockHash = base_decode(status.sync_info.latest_block_hash);\n            const transaction = createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n            yield this.walletConnection.requestSignTransactions([transaction], window.location.href);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    reject(new Error('Failed to redirect to sign transaction'));\n                }, 1000);\n            });\n            // TODO: Aggregate multiple transaction request with \"debounce\".\n            // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n        });\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n    accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { access_key: { permission } } = accessKey;\n            if (permission === 'FullAccess') {\n                return true;\n            }\n            if (permission.FunctionCall) {\n                const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n                /********************************\n                Accept multisig access keys and let wallets attempt to signAndSendTransaction\n                If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n                ********************************/\n                if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                    return true;\n                }\n                if (allowedReceiverId === receiverId) {\n                    if (actions.length !== 1) {\n                        return false;\n                    }\n                    const [{ functionCall }] = actions;\n                    return functionCall &&\n                        (!functionCall.deposit || functionCall.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\n                        (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                    // TODO: Handle cases when allowance doesn't have enough to pay for gas\n                }\n            }\n            // TODO: Support other permissions than FunctionCall\n            return false;\n        });\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n    accessKeyForTransaction(receiverId, actions, localKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKeys = yield this.getAccessKeys();\n            if (localKey) {\n                const accessKey = accessKeys.find(key => key.public_key === localKey.toString());\n                if (accessKey && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n                    return accessKey;\n                }\n            }\n            const walletKeys = this.walletConnection._authData.allKeys;\n            for (const accessKey of accessKeys) {\n                if (walletKeys.indexOf(accessKey.public_key) !== -1 && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n                    return accessKey;\n                }\n            }\n            return null;\n        });\n    }\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/connection.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/transaction.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/enums.js",["317","318"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/format.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/json-rpc-provider.js",["319","320","321","322","323","324","325"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/generated/rpc_error_types.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/unencrypted_file_system_keystore.js",["326"],"import fs from 'fs';\nimport path from 'path';\nimport { promisify as _promisify } from 'util';\nimport { KeyPair } from '../utils/key_pair';\nimport { KeyStore } from './keystore';\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst promisify = (fn) => {\n    if (!fn) {\n        return () => {\n            throw new Error('Trying to use unimplemented function. `fs` module not available in web build?');\n        };\n    }\n    return _promisify(fn);\n};\n\nconst exists = promisify(fs.exists);\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst unlink = promisify(fs.unlink);\nconst readdir = promisify(fs.readdir);\nconst mkdir = promisify(fs.mkdir);\n\nexport function loadJsonFile(filename) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const content = yield readFile(filename);\n        return JSON.parse(content.toString());\n    });\n}\n\nfunction ensureDir(dir) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield mkdir(dir, { recursive: true });\n        }\n        catch (err) {\n            if (err.code !== 'EEXIST') {\n                throw err;\n            }\n        }\n    });\n}\n\nexport function readKeyFile(filename) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const accountInfo = yield loadJsonFile(filename);\n        // The private key might be in private_key or secret_key field.\n        let privateKey = accountInfo.private_key;\n        if (!privateKey && accountInfo.secret_key) {\n            privateKey = accountInfo.secret_key;\n        }\n        return [accountInfo.account_id, KeyPair.fromString(privateKey)];\n    });\n}\n\nexport class UnencryptedFileSystemKeyStore extends KeyStore {\n    constructor(keyDir) {\n        super();\n        this.keyDir = path.resolve(keyDir);\n    }\n    /**\n     * Sets a storage item in a file, unencrypted\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ensureDir(`${this.keyDir}/${networkId}`);\n            const content = { account_id: accountId, public_key: keyPair.getPublicKey().toString(), private_key: keyPair.toString() };\n            yield writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content));\n        });\n    }\n    /**\n     * Gets a key from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Find key / account id.\n            if (!(yield exists(this.getKeyFilePath(networkId, accountId)))) {\n                return null;\n            }\n            const accountKeyPair = yield readKeyFile(this.getKeyFilePath(networkId, accountId));\n            return accountKeyPair[1];\n        });\n    }\n    /**\n     * Removes a key from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield exists(this.getKeyFilePath(networkId, accountId))) {\n                yield unlink(this.getKeyFilePath(networkId, accountId));\n            }\n        });\n    }\n    /**\n     * Removes all items from local storage\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const network of yield this.getNetworks()) {\n                for (const account of yield this.getAccounts(network)) {\n                    yield this.removeKey(network, account);\n                }\n            }\n        });\n    }\n    getKeyFilePath(networkId, accountId) {\n        return `${this.keyDir}/${networkId}/${accountId}.json`;\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    getNetworks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const files = yield readdir(this.keyDir);\n            const result = new Array();\n            files.forEach((item) => {\n                result.push(item);\n            });\n            return result;\n        });\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(yield exists(`${this.keyDir}/${networkId}`))) {\n                return [];\n            }\n            const files = yield readdir(`${this.keyDir}/${networkId}`);\n            return files\n                .filter(file => file.endsWith('.json'))\n                .map(file => file.replace(/.json$/, ''));\n        });\n    }\n    \n    toString() {\n        return `UnencryptedFileSystemKeyStore(${this.keyDir})`;\n    }\n}\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/User/userProfileList.js",["327","328","329","330","331","332","333"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/AppUtill.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/tooltip.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/webUserTour.js",["334","335","336","337","338","339","340","341","342","343","344","345"],"import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { CloseOutlined, LeftOutlined, RightOutlined } from \"@ant-design/icons\";\r\nimport { Popover, PopoverHeader, PopoverBody } from \"reactstrap\";\r\nimport $ from \"jquery\";\r\n\r\nimport AudioTour from \"./audioTour\";\r\nimport { resizeScreen } from \"../common/helper\";\r\nimport { stopMediaPlaying } from \"../common/stopePlayingMedia\";\r\nimport {\r\n  addOverlay,\r\n  setOverlayHtml,\r\n  removeOverlay,\r\n} from \"../common/trailOverlay\";\r\nimport {\r\n  addTrailitLogo,\r\n  removeTrailitLogo,\r\n} from \"../common/trailitLogoInPreview\";\r\nimport ContinueTourConfirmation from \"./Modal/ContinueTourConfirmation\";\r\nimport { matchUrl } from \"./common\";\r\n\r\nconst chrome = window.chrome;\r\n\r\nclass WebUserTour extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isTourActive: true,\r\n      tourStep: 1,\r\n      tourSteps: {},\r\n      tourContent: [],\r\n      uniqueTargetStatus: false,\r\n      curentTour: {},\r\n    };\r\n  }\r\n\r\n  handleWithoutLogin = (event, tourSide, type, currentStep) => {\r\n    this.props.toogleTargetDataNotFound(false);\r\n\r\n    chrome.storage.local.get([\"isGuest\"], (items) => {\r\n      if (currentStep % 3 === 0 && tourSide === \"next\" && items.isGuest) {\r\n        this.props.tooltipToggle();\r\n      } else {\r\n        this.onClickToManagePopoverButton(event, tourSide);\r\n      }\r\n    });\r\n  };\r\n\r\n  continueTrailWithoutLogin = (event, tourSide) => {\r\n    this.onClickToManagePopoverButton(event, tourSide);\r\n    this.props.tooltipToggle();\r\n  };\r\n  toSignInWithoutLogin = () => {\r\n    this.props.toggle();\r\n  };\r\n\r\n  componentDidMount() {\r\n    $(() => {\r\n      this.handleLoad();\r\n    });\r\n  }\r\n\r\n  resizeFunction = () => {\r\n    let { tourStep } = this.state;\r\n    const shadowRoot = document.getElementById(\"extension-div\").shadowRoot;\r\n\r\n    if (!shadowRoot.querySelector(\".trail_tooltip_done\")) return;\r\n\r\n    this.getWebUserTour(\"\", this.props.data[tourStep - 1], tourStep);\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.tourStep !== this.props.tourStep) {\r\n      this.createPopOver(this.props.tourStep);\r\n      chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\r\n      this.getWebUserTour(\r\n        \"\",\r\n        this.props.data[this.props.tourStep - 1],\r\n        this.props.tourStep\r\n      );\r\n    }\r\n\r\n    // Call add logo function\r\n    this.addLogo();\r\n  }\r\n\r\n  handleLoad = (e) => {\r\n    let { tourStep } = this.state;\r\n    let timeout = 0;\r\n\r\n    if (document.URL.includes(\"https://common.fund\")) {\r\n      timeout = 2000;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.createPopOver(tourStep);\r\n      chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\r\n      this.getWebUserTour(\"\", this.props.data[tourStep - 1], tourStep);\r\n\r\n      if (\r\n        this.props.data[tourStep - 1].mediaType &&\r\n        (this.props.data[tourStep - 1].mediaType === \"video\" ||\r\n          this.props.data[tourStep - 1].mediaType === \"audio\")\r\n      ) {\r\n        if (document.readyState === \"complete\") {\r\n          $(document).ready(() => {\r\n            // Stop playing websites audio or video\r\n            stopMediaPlaying();\r\n          });\r\n        } else if (\r\n          document.readyState === \"interactive\" &&\r\n          document.URL.includes(\"https://www.youtube.com/\")\r\n        ) {\r\n          $(document).ready(() => {\r\n            // Stop playing websites audio or video\r\n            stopMediaPlaying();\r\n          });\r\n        } else {\r\n          document.body.onload = function () {\r\n            // Stop playing websites audio or video\r\n            stopMediaPlaying();\r\n          };\r\n        }\r\n\r\n        // Add logo\r\n        this.addLogo();\r\n\r\n        setTimeout(() => {\r\n          document.querySelectorAll(\"video\").forEach((res) => {\r\n            if (res.className !== \"preview-video\") {\r\n              res.pause();\r\n            }\r\n          });\r\n        }, 2000);\r\n      }\r\n\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", this.resizeFunction);\r\n    }, timeout);\r\n  };\r\n\r\n  addLogo = () => {\r\n    // Add trailit logo\r\n    addTrailitLogo();\r\n  };\r\n\r\n  handleMessage(msg) {\r\n    setTimeout(() => {\r\n      chrome.storage.local.get(\r\n        [\r\n          \"trail_web_user_tour\",\r\n          \"tourStatus\",\r\n          \"tourType\",\r\n          \"tourStep\",\r\n          \"currentTourType\",\r\n        ],\r\n        function (items) {\r\n          this.createPopOver(items.tourStep);\r\n          this.getWebUserTour(\r\n            \"\",\r\n            this.props.data[items.tourStep - 1],\r\n            items.tourStep\r\n          );\r\n        }\r\n      );\r\n    }, 3000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Remove listener when this component unmounts\r\n    chrome.runtime.onMessage.removeListener(this.handleMessage);\r\n\r\n    // Remove event listener\r\n    window.removeEventListener(\"resize\", this.resizeFunction);\r\n\r\n    // Remove trailit logo\r\n    removeTrailitLogo();\r\n\r\n    this.setState({ isTourActive: false });\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return {\r\n      tourStep: props.tourStep,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * create popover based on their url\r\n   */\r\n  createPopOver = (step) => {\r\n    const { tourSteps } = this.state;\r\n\r\n    let content = this.props.data\r\n      .map((res, index) => {\r\n        let unqTarget = res.uniqueTarget;\r\n\r\n        if (resizeScreen()) {\r\n          if (res.unique_target_one != \"\") {\r\n            unqTarget = res.unique_target_one;\r\n          }\r\n        }\r\n\r\n        if (\r\n          res.url == this.props.data[step - 1].url &&\r\n          res.type == \"tooltip\" &&\r\n          document.querySelector(unqTarget) != null\r\n        ) {\r\n          tourSteps[`step${index + 1}`] = false;\r\n          res[\"step\"] = index + 1;\r\n          return res;\r\n        }\r\n      })\r\n      .filter((r) => r != undefined);\r\n\r\n    this.setState({ tourContent: content, tourSteps });\r\n  };\r\n\r\n  /**\r\n   * get currentweb user tour\r\n   */\r\n  getWebUserTour = (event, data, step) => {\r\n    let { tourSteps } = this.state;\r\n    let activeWeb = data;\r\n    let unqTarget = this.props.data[step - 1].uniqueTarget;\r\n\r\n    if (resizeScreen()) {\r\n      if (this.props.data[step - 1].unique_target_one != \"\") {\r\n        unqTarget = this.props.data[step - 1].unique_target_one;\r\n      }\r\n    }\r\n\r\n    if (document.querySelector(unqTarget) == null) {\r\n      this.props.toogleTargetDataNotFound(true);\r\n    } else {\r\n      // Call Add overlay function\r\n      addOverlay();\r\n\r\n      let targetElement = \"html, body\";\r\n      var docHeight = document.documentElement.scrollHeight;\r\n      let original = document.querySelector(unqTarget);\r\n      let bounding = original.getBoundingClientRect();\r\n      let offset = $(unqTarget).offset();\r\n\r\n      let leftPosition = offset.left;\r\n      let topPosition = offset.top;\r\n\r\n      setTimeout(() => {\r\n        if ($(unqTarget).offset() !== undefined) {\r\n          if (topPosition !== $(unqTarget).offset().top) {\r\n            // Call remove overlay function\r\n            removeOverlay();\r\n\r\n            // shadowRoot.querySelector('.trail_overlay').remove();\r\n            this.createPopOver(step);\r\n            this.getWebUserTour(event, data, step);\r\n          }\r\n        }\r\n      }, 1000);\r\n\r\n      // Call set overlay html function\r\n      setOverlayHtml(\r\n        window,\r\n        docHeight,\r\n        topPosition,\r\n        bounding,\r\n        leftPosition,\r\n        \"webUserTour\"\r\n      );\r\n\r\n      if (event != \"\") {\r\n        event.preventDefault();\r\n      }\r\n\r\n      const y =\r\n        document.querySelector(unqTarget).getBoundingClientRect().top +\r\n        document.querySelector(targetElement).scrollTop +\r\n        bounding.height -\r\n        300;\r\n      $(targetElement).stop().animate(\r\n        {\r\n          scrollTop: y,\r\n        },\r\n        1000\r\n      );\r\n\r\n      window.addEventListener(\"load\", () => {\r\n        setTimeout(() => {\r\n          $(targetElement).stop().animate(\r\n            {\r\n              scrollTop: y,\r\n            },\r\n            1000\r\n          );\r\n        }, 2000);\r\n      });\r\n\r\n      activeWeb = {\r\n        ...activeWeb,\r\n        uniqueTarget: unqTarget,\r\n      };\r\n\r\n      tourSteps[`step${step}`] = true;\r\n      this.setState({\r\n        curentTour: activeWeb,\r\n        uniqueTargetStatus: true,\r\n        tourStep: step,\r\n        tourSteps,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Manage popover web user tour button\r\n   * @data tooltip data\r\n   * @step tooltip current step\r\n   */\r\n  onClickToManagePopoverButton = async (event, tourSide) => {\r\n    this.props.toogleTargetDataNotFound(false);\r\n\r\n    let step =\r\n      tourSide === \"prev\" ? this.props.tourStep - 1 : this.props.tourStep + 1;\r\n\r\n    removeOverlay();\r\n\r\n    // document.getElementById('extension-div').shadowRoot.querySelector('.trail_overlay').remove();\r\n    $(\".trail_web_user_tour\").parents().css(\"z-index\", \"\");\r\n    $(\".trail_web_user_tour\").removeAttr(\"trail_web_user_tour\");\r\n\r\n    let { tourStep } = this.state;\r\n    let unqTarget = this.props.data[tourStep - 1].uniqueTarget;\r\n\r\n    if (resizeScreen()) {\r\n      if (this.props.data[tourStep - 1].unique_target_one != \"\") {\r\n        unqTarget = this.props.data[tourStep - 1].unique_target_one;\r\n      }\r\n    }\r\n\r\n    document.querySelector(unqTarget).classList.remove(\"trail_web_user_tour\");\r\n    if (matchUrl(this.props.data[step - 1].url, document.URL)) {\r\n      let type = this.props.data[step - 1].type;\r\n\r\n      if (type === \"tooltip\") {\r\n        this.props.tour(step, type, tourSide);\r\n      } else {\r\n        this.setState({ tourStep: step - 1 });\r\n        this.props.tour(step, type, tourSide);\r\n      }\r\n    } else {\r\n      // Set loading true to show overlay\r\n      this.props.setLoadingState(true);\r\n      let type = this.props.data[step - 1].type;\r\n      await this.props.tour(step, type, tourSide);\r\n      window.location.href = this.props.data[step - 1].url;\r\n      setTimeout(() => {\r\n        this.createPopOver(step);\r\n        this.getWebUserTour(event, this.props.data[step - 1], step);\r\n      }, 2000);\r\n    }\r\n\r\n    // Call remove overlay function\r\n  };\r\n\r\n  onClickToDoneTour = (data, step) => {\r\n    this.props.toogleTargetDataNotFound(false);\r\n    let { tourSteps } = this.state;\r\n\r\n    Object.keys(tourSteps).map((r, i) => {\r\n      tourSteps[r] = false;\r\n    });\r\n\r\n    this.setState({ tourSteps, tourStep: 1 });\r\n\r\n    this.props.toggle({ removePreviewTrails: true });\r\n  };\r\n\r\n  onLoadedEvent = (e) => {\r\n    let { uniqueTarget } = this.props.data[this.state.tourStep - 1];\r\n    let targetElement = \"html, body\";\r\n    let bounding = document.querySelector(uniqueTarget).getBoundingClientRect();\r\n    const y =\r\n      document.querySelector(uniqueTarget).getBoundingClientRect().top +\r\n      document.querySelector(targetElement).scrollTop +\r\n      bounding.height -\r\n      300;\r\n    $(targetElement).stop().animate(\r\n      {\r\n        scrollTop: y,\r\n      },\r\n      1000\r\n    );\r\n  };\r\n\r\n  onButtonCloseHandler = async (e) => {\r\n    this.props.toogleTargetDataNotFound(false);\r\n    let res = await this.props.closeButtonHandler(e);\r\n\r\n    return res;\r\n  };\r\n\r\n  render() {\r\n    const { tourSteps, tourStep, tourContent, uniqueTargetStatus } = this.state;\r\n    let preview = null;\r\n    let mediaTypeStatus;\r\n\r\n    if (\r\n      resizeScreen() &&\r\n      this.props.data[tourStep - 1].unique_target_one != \"\"\r\n    ) {\r\n      mediaTypeStatus = this.props.data[tourStep - 1].mobile_media_type;\r\n    } else {\r\n      mediaTypeStatus = this.props.data[tourStep - 1].mediaType;\r\n    }\r\n\r\n    if (mediaTypeStatus && mediaTypeStatus === \"video\") {\r\n      preview = (\r\n        <div className=\"tr_preview_video_bx\">\r\n          <video\r\n            className=\"preview-video\"\r\n            disablePictureInPicture\r\n            controlsList=\"nodownload\"\r\n            controls\r\n            onLoadedData={(e) => this.onLoadedEvent(e)}\r\n            allow=\"autoplay\"\r\n            autoPlay={true}\r\n          >\r\n            <source src={this.props.data[tourStep - 1].web_url} />\r\n          </video>\r\n        </div>\r\n      );\r\n    } else if (mediaTypeStatus && mediaTypeStatus === \"audio\") {\r\n      preview = (\r\n        <AudioTour\r\n          data={this.props.data}\r\n          toggle={this.props.toggle}\r\n          tourStep={this.props.tourStep}\r\n          tour={this.props.tour}\r\n          previewInTooltip\r\n        />\r\n      );\r\n    } else if (mediaTypeStatus && mediaTypeStatus === \"image\") {\r\n      preview = (\r\n        <div className=\"tr_preview_picture_bx\">\r\n          <img\r\n            className=\"preview-picture\"\r\n            src={this.props.data[tourStep - 1].web_url}\r\n            alt=\"preview-img\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.props.tooltipRef && (\r\n          <ContinueTourConfirmation\r\n            open={this.props.tooltipRef}\r\n            toggle={this.props.tooltipToggle}\r\n            continueTrail={this.continueTrailWithoutLogin}\r\n            toSignIn={this.toSignInWithoutLogin}\r\n          />\r\n        )}\r\n        {uniqueTargetStatus &&\r\n          matchUrl(this.props.data[tourStep - 1].url, document.URL) && (\r\n            <React.Fragment>\r\n              {tourContent.map((res, index) => {\r\n                let unTarget = resizeScreen()\r\n                  ? res.unique_target_one != \"\"\r\n                    ? res.unique_target_one\r\n                    : res.uniqueTarget\r\n                  : res.uniqueTarget;\r\n                let title, description;\r\n\r\n                if (resizeScreen() && res.unique_target_one != \"\") {\r\n                  title = res.mobile_title;\r\n                  description = res.mobile_description;\r\n                } else {\r\n                  title = res.title;\r\n                  description = res.description;\r\n                }\r\n\r\n                return (\r\n                  <Popover\r\n                    target={unTarget}\r\n                    container={\r\n                      document.getElementById(\"extension-div\").shadowRoot\r\n                    }\r\n                    className={`trail_tooltip_done ${\r\n                      mediaTypeStatus && mediaTypeStatus === \"text\"\r\n                        ? \"trail_text_only\"\r\n                        : \"\" || (mediaTypeStatus && mediaTypeStatus === \"video\")\r\n                        ? \"tr_video_only\"\r\n                        : \"\" || (mediaTypeStatus && mediaTypeStatus === \"image\")\r\n                        ? \"tr_picture_only\"\r\n                        : \"\" || (mediaTypeStatus && mediaTypeStatus === \"audio\")\r\n                        ? \"tr_audio_only\"\r\n                        : \"\"\r\n                    } ${resizeScreen() && \"mobile_preview_popover\"}`}\r\n                    placement=\"top\"\r\n                    isOpen={tourSteps[`step${res.step}`]}\r\n                  >\r\n                    {/* <button> */}\r\n                    <img\r\n                      alt=\"..\"\r\n                      className=\"trailit_IconRightBottom\"\r\n                      src={require(`../images/trailit_icon1.png`)}\r\n                      onClick={(e) => {\r\n                        // Call send tip open modal function\r\n                        this.props.onSendTipModalOpen();\r\n                      }}\r\n                    />\r\n                    {/* </button> */}\r\n                    <div className=\"trail_preview_bx\">\r\n                      <PopoverHeader\r\n                        className={`top ${\r\n                          resizeScreen() && \"tooltip_title_mobile\"\r\n                        }`}\r\n                      >\r\n                        {title}\r\n                      </PopoverHeader>\r\n                      <PopoverBody>\r\n                        {\r\n                          <span\r\n                            dangerouslySetInnerHTML={{ __html: description }}\r\n                          ></span>\r\n                        }\r\n                        {preview}\r\n                      </PopoverBody>\r\n                      <PopoverHeader\r\n                        className={`bottom ${\r\n                          resizeScreen() && \"tooltip_title_mobile\"\r\n                        }`}\r\n                      >\r\n                        {res.title}\r\n                      </PopoverHeader>\r\n                    </div>\r\n                    <div className=\"btn-wrap\">\r\n                      {this.props.data.length > 0 && (\r\n                        <Button\r\n                          disabled={this.props.onDone}\r\n                          type=\"link\"\r\n                          className=\"trial_button_close\"\r\n                          onClick={this.onButtonCloseHandler}\r\n                        >\r\n                          <CloseOutlined type=\"close\" />\r\n                        </Button>\r\n                      )}\r\n                      {1 < tourStep && (\r\n                        <Button\r\n                          disabled={this.props.onDone}\r\n                          type=\"link\"\r\n                          className=\"prev\"\r\n                          onClick={(e) =>\r\n                            this.onClickToManagePopoverButton(e, \"prev\")\r\n                          }\r\n                        >\r\n                          <LeftOutlined type=\"left\" />\r\n                        </Button>\r\n                      )}\r\n                      {this.props.data.length > tourStep && (\r\n                        <Button\r\n                          disabled={this.props.onDone}\r\n                          type=\"link\"\r\n                          className=\"next\"\r\n                          onClick={(e) => {\r\n                            this.handleWithoutLogin(\r\n                              e,\r\n                              \"next\",\r\n                              this.props.data[this.props.tourStep - 1].type,\r\n                              this.props.tourStep\r\n                            );\r\n                          }}\r\n                        >\r\n                          <RightOutlined type=\"right\" />\r\n                        </Button>\r\n                      )}\r\n                      {this.props.data.length === tourStep && (\r\n                        <Button\r\n                          disabled={this.props.onDone}\r\n                          type=\"link\"\r\n                          className=\"next\"\r\n                          onClick={() => this.onClickToDoneTour(res, tourStep)}\r\n                        >\r\n                          <RightOutlined type=\"right\" />\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </Popover>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WebUserTour;\r\n","/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/targetNotFound.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/Modal/CreateTourConfirmationModal.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/interceptor.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/stopePlayingMedia.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/account_creator.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/key_pair.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/textEditor.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/exponential-backoff.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/key_stores/index.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/socket.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/components/CreateNewTrailModal.js",["346","347","348","349","350","351","352","353","354","355","356"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/main.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/css/mainflip.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/code/sendtx.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/contract.js",["357"],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/errors.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/providers/provider.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/near-api-js/utils/network.js",[],"/home/chirag/Desktop/codezeros_company/working_project/trailit_project/trailit_extension/building_extension/src/common/celo/index.js",[],{"ruleId":"358","severity":1,"message":"359","line":523,"column":9,"nodeType":"360","messageId":"361","endLine":523,"endColumn":13},{"ruleId":"358","severity":1,"message":"362","line":546,"column":13,"nodeType":"360","messageId":"361","endLine":546,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":1214,"column":37,"nodeType":"365","messageId":"366","endLine":1214,"endColumn":39},{"ruleId":"363","severity":1,"message":"367","line":1215,"column":44,"nodeType":"365","messageId":"366","endLine":1215,"endColumn":46},{"ruleId":"358","severity":1,"message":"368","line":1993,"column":13,"nodeType":"360","messageId":"361","endLine":1993,"endColumn":28},{"ruleId":"358","severity":1,"message":"369","line":1993,"column":30,"nodeType":"360","messageId":"361","endLine":1993,"endColumn":38},{"ruleId":"363","severity":1,"message":"367","line":2158,"column":26,"nodeType":"365","messageId":"366","endLine":2158,"endColumn":28},{"ruleId":"363","severity":1,"message":"364","line":2522,"column":38,"nodeType":"365","messageId":"366","endLine":2522,"endColumn":40},{"ruleId":"363","severity":1,"message":"367","line":2639,"column":32,"nodeType":"365","messageId":"366","endLine":2639,"endColumn":34},{"ruleId":"370","severity":1,"message":"371","line":2866,"column":70,"nodeType":"372","messageId":"373","endLine":2866,"endColumn":72},{"ruleId":"363","severity":1,"message":"367","line":3241,"column":26,"nodeType":"365","messageId":"366","endLine":3241,"endColumn":28},{"ruleId":"358","severity":1,"message":"374","line":3360,"column":15,"nodeType":"360","messageId":"361","endLine":3360,"endColumn":20},{"ruleId":"358","severity":1,"message":"375","line":3716,"column":11,"nodeType":"360","messageId":"361","endLine":3716,"endColumn":19},{"ruleId":"358","severity":1,"message":"376","line":3751,"column":7,"nodeType":"360","messageId":"361","endLine":3751,"endColumn":11},{"ruleId":"358","severity":1,"message":"377","line":3780,"column":11,"nodeType":"360","messageId":"361","endLine":3780,"endColumn":28},{"ruleId":"378","replacedBy":"379"},{"ruleId":"380","replacedBy":"381"},{"ruleId":"358","severity":1,"message":"382","line":5,"column":7,"nodeType":"360","messageId":"361","endLine":5,"endColumn":13},{"ruleId":"383","severity":1,"message":"384","line":44,"column":19,"nodeType":"385","endLine":44,"endColumn":49},{"ruleId":"386","severity":1,"message":"387","line":44,"column":27,"nodeType":"388","messageId":"389","endLine":44,"endColumn":48},{"ruleId":"390","severity":1,"message":"391","line":45,"column":21,"nodeType":"385","endLine":45,"endColumn":97},{"ruleId":"358","severity":1,"message":"382","line":8,"column":7,"nodeType":"360","messageId":"361","endLine":8,"endColumn":13},{"ruleId":"363","severity":1,"message":"367","line":13,"column":14,"nodeType":"365","messageId":"366","endLine":13,"endColumn":16},{"ruleId":"392","severity":1,"message":"393","line":29,"column":8,"nodeType":"360","messageId":"394","endLine":29,"endColumn":10},{"ruleId":"370","severity":1,"message":"395","line":51,"column":19,"nodeType":"372","messageId":"396","endLine":51,"endColumn":21},{"ruleId":"358","severity":1,"message":"397","line":2,"column":10,"nodeType":"360","messageId":"361","endLine":2,"endColumn":16},{"ruleId":"358","severity":1,"message":"398","line":2,"column":49,"nodeType":"360","messageId":"361","endLine":2,"endColumn":60},{"ruleId":"358","severity":1,"message":"399","line":3,"column":10,"nodeType":"360","messageId":"361","endLine":3,"endColumn":14},{"ruleId":"358","severity":1,"message":"400","line":3,"column":16,"nodeType":"360","messageId":"361","endLine":3,"endColumn":21},{"ruleId":"358","severity":1,"message":"401","line":4,"column":8,"nodeType":"360","messageId":"361","endLine":4,"endColumn":12},{"ruleId":"378","replacedBy":"402"},{"ruleId":"380","replacedBy":"403"},{"ruleId":"358","severity":1,"message":"401","line":3,"column":8,"nodeType":"360","messageId":"361","endLine":3,"endColumn":12},{"ruleId":"358","severity":1,"message":"404","line":4,"column":8,"nodeType":"360","messageId":"361","endLine":4,"endColumn":9},{"ruleId":"363","severity":1,"message":"367","line":24,"column":38,"nodeType":"365","messageId":"366","endLine":24,"endColumn":40},{"ruleId":"378","replacedBy":"405"},{"ruleId":"380","replacedBy":"406"},{"ruleId":"407","severity":1,"message":"408","line":255,"column":6,"nodeType":"409","endLine":255,"endColumn":8,"suggestions":"410"},{"ruleId":"411","severity":1,"message":"412","line":212,"column":48,"nodeType":"413","messageId":"414","endLine":214,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":222,"column":48,"nodeType":"413","messageId":"414","endLine":225,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":232,"column":48,"nodeType":"413","messageId":"414","endLine":234,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":241,"column":48,"nodeType":"413","messageId":"414","endLine":243,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":255,"column":48,"nodeType":"413","messageId":"414","endLine":259,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":270,"column":48,"nodeType":"413","messageId":"414","endLine":279,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":286,"column":48,"nodeType":"413","messageId":"414","endLine":288,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":296,"column":48,"nodeType":"413","messageId":"414","endLine":298,"endColumn":10},{"ruleId":"370","severity":1,"message":"395","line":351,"column":35,"nodeType":"372","messageId":"396","endLine":351,"endColumn":37},{"ruleId":"415","severity":1,"message":"416","line":9,"column":63,"nodeType":"417","messageId":"418","endLine":9,"endColumn":80},{"ruleId":"419","severity":1,"message":"420","line":10,"column":63,"nodeType":"421","messageId":"422","endLine":10,"endColumn":64},{"ruleId":"423","severity":1,"message":"424","line":163,"column":24,"nodeType":"425","messageId":"426","endLine":163,"endColumn":31},{"ruleId":"370","severity":1,"message":"395","line":242,"column":58,"nodeType":"372","messageId":"396","endLine":242,"endColumn":60},{"ruleId":"411","severity":1,"message":"412","line":28,"column":48,"nodeType":"413","messageId":"414","endLine":30,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":39,"column":48,"nodeType":"413","messageId":"414","endLine":45,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":53,"column":48,"nodeType":"413","messageId":"414","endLine":55,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":61,"column":48,"nodeType":"413","messageId":"414","endLine":67,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":74,"column":48,"nodeType":"413","messageId":"414","endLine":83,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":91,"column":48,"nodeType":"413","messageId":"414","endLine":102,"endColumn":10},{"ruleId":"423","severity":1,"message":"424","line":92,"column":28,"nodeType":"427","messageId":"426","endLine":92,"endColumn":39},{"ruleId":"358","severity":1,"message":"428","line":7,"column":7,"nodeType":"360","messageId":"361","endLine":7,"endColumn":13},{"ruleId":"358","severity":1,"message":"429","line":8,"column":7,"nodeType":"360","messageId":"361","endLine":8,"endColumn":15},{"ruleId":"358","severity":1,"message":"430","line":4,"column":10,"nodeType":"360","messageId":"361","endLine":4,"endColumn":16},{"ruleId":"358","severity":1,"message":"382","line":8,"column":7,"nodeType":"360","messageId":"361","endLine":8,"endColumn":13},{"ruleId":"358","severity":1,"message":"431","line":84,"column":24,"nodeType":"360","messageId":"361","endLine":84,"endColumn":33},{"ruleId":"358","severity":1,"message":"432","line":84,"column":35,"nodeType":"360","messageId":"361","endLine":84,"endColumn":41},{"ruleId":"363","severity":1,"message":"367","line":186,"column":42,"nodeType":"365","messageId":"366","endLine":186,"endColumn":44},{"ruleId":"411","severity":1,"message":"412","line":89,"column":48,"nodeType":"413","messageId":"414","endLine":98,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":213,"column":48,"nodeType":"413","messageId":"414","endLine":240,"endColumn":10},{"ruleId":"370","severity":1,"message":"395","line":6,"column":43,"nodeType":"372","messageId":"396","endLine":6,"endColumn":45},{"ruleId":"370","severity":1,"message":"395","line":14,"column":43,"nodeType":"372","messageId":"396","endLine":14,"endColumn":45},{"ruleId":"411","severity":1,"message":"412","line":31,"column":48,"nodeType":"413","messageId":"414","endLine":36,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":44,"column":48,"nodeType":"413","messageId":"414","endLine":46,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":55,"column":48,"nodeType":"413","messageId":"414","endLine":58,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":68,"column":48,"nodeType":"413","messageId":"414","endLine":70,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":91,"column":48,"nodeType":"413","messageId":"414","endLine":100,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":109,"column":48,"nodeType":"413","messageId":"414","endLine":111,"endColumn":10},{"ruleId":"411","severity":1,"message":"412","line":119,"column":48,"nodeType":"413","messageId":"414","endLine":121,"endColumn":10},{"ruleId":"423","severity":1,"message":"424","line":133,"column":28,"nodeType":"427","messageId":"426","endLine":133,"endColumn":39},{"ruleId":"363","severity":1,"message":"367","line":39,"column":55,"nodeType":"365","messageId":"366","endLine":39,"endColumn":57},{"ruleId":"363","severity":1,"message":"367","line":40,"column":19,"nodeType":"365","messageId":"366","endLine":40,"endColumn":21},{"ruleId":"363","severity":1,"message":"367","line":47,"column":27,"nodeType":"365","messageId":"366","endLine":47,"endColumn":29},{"ruleId":"363","severity":1,"message":"364","line":49,"column":19,"nodeType":"365","messageId":"366","endLine":49,"endColumn":21},{"ruleId":"363","severity":1,"message":"367","line":84,"column":23,"nodeType":"365","messageId":"366","endLine":84,"endColumn":25},{"ruleId":"363","severity":1,"message":"367","line":85,"column":43,"nodeType":"365","messageId":"366","endLine":85,"endColumn":45},{"ruleId":"433","severity":1,"message":"434","line":169,"column":9,"nodeType":"425","messageId":"366","endLine":169,"endColumn":13,"fix":"435"},{"ruleId":"370","severity":1,"message":"436","line":195,"column":25,"nodeType":"372","messageId":"373","endLine":195,"endColumn":27},{"ruleId":"363","severity":1,"message":"364","line":199,"column":37,"nodeType":"365","messageId":"366","endLine":199,"endColumn":39},{"ruleId":"363","severity":1,"message":"367","line":205,"column":19,"nodeType":"365","messageId":"366","endLine":205,"endColumn":21},{"ruleId":"363","severity":1,"message":"367","line":206,"column":20,"nodeType":"365","messageId":"366","endLine":206,"endColumn":22},{"ruleId":"363","severity":1,"message":"364","line":214,"column":24,"nodeType":"365","messageId":"366","endLine":214,"endColumn":26},{"ruleId":"363","severity":1,"message":"364","line":228,"column":55,"nodeType":"365","messageId":"366","endLine":228,"endColumn":57},{"ruleId":"363","severity":1,"message":"364","line":271,"column":17,"nodeType":"365","messageId":"366","endLine":271,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":334,"column":59,"nodeType":"365","messageId":"366","endLine":334,"endColumn":61},{"ruleId":"370","severity":1,"message":"395","line":368,"column":39,"nodeType":"372","messageId":"396","endLine":368,"endColumn":41},{"ruleId":"363","severity":1,"message":"364","line":408,"column":55,"nodeType":"365","messageId":"366","endLine":408,"endColumn":57},{"ruleId":"363","severity":1,"message":"364","line":468,"column":43,"nodeType":"365","messageId":"366","endLine":468,"endColumn":45},{"ruleId":"363","severity":1,"message":"364","line":474,"column":61,"nodeType":"365","messageId":"366","endLine":474,"endColumn":63},{"ruleId":"358","severity":1,"message":"399","line":3,"column":3,"nodeType":"360","messageId":"361","endLine":3,"endColumn":7},{"ruleId":"358","severity":1,"message":"400","line":4,"column":3,"nodeType":"360","messageId":"361","endLine":4,"endColumn":8},{"ruleId":"358","severity":1,"message":"398","line":9,"column":3,"nodeType":"360","messageId":"361","endLine":9,"endColumn":14},{"ruleId":"358","severity":1,"message":"437","line":53,"column":9,"nodeType":"360","messageId":"361","endLine":53,"endColumn":18},{"ruleId":"358","severity":1,"message":"438","line":53,"column":20,"nodeType":"360","messageId":"361","endLine":53,"endColumn":26},{"ruleId":"358","severity":1,"message":"439","line":53,"column":28,"nodeType":"360","messageId":"361","endLine":53,"endColumn":36},{"ruleId":"433","severity":1,"message":"434","line":63,"column":9,"nodeType":"425","messageId":"366","endLine":63,"endColumn":13,"fix":"440"},{"ruleId":"363","severity":1,"message":"367","line":72,"column":25,"nodeType":"365","messageId":"366","endLine":72,"endColumn":27},{"ruleId":"358","severity":1,"message":"441","line":85,"column":19,"nodeType":"360","messageId":"361","endLine":85,"endColumn":31},{"ruleId":"383","severity":1,"message":"384","line":137,"column":21,"nodeType":"385","endLine":137,"endColumn":51},{"ruleId":"386","severity":1,"message":"387","line":137,"column":29,"nodeType":"388","messageId":"389","endLine":137,"endColumn":50},{"ruleId":"411","severity":1,"message":"412","line":37,"column":122,"nodeType":"413","messageId":"414","endLine":42,"endColumn":18},"no-unused-vars","'step' is defined but never used.","Identifier","unusedVar","'index' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'currentTourType' is assigned a value but never used.","'tourType' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'trail' is assigned a value but never used.","'position' is assigned a value but never used.","'open' is assigned a value but never used.","'localStorageCount' is assigned a value but never used.","no-native-reassign",["442"],"no-negated-in-lhs",["443"],"'chrome' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-self-assign","'el' is assigned to itself.","selfAssignment","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Button' is defined but never used.","'ModalFooter' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'Icon' is defined but never used.",["442"],["443"],"'$' is defined but never used.",["442"],["443"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onIframeBodyClick' and 'updateDescription'. Either include them or remove the dependency array.","ArrayExpression",["444"],"require-yield","This generator function does not have 'yield'.","FunctionExpression","missingYield","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","NewExpression","'sender' is assigned a value but never used.","'receiver' is assigned a value but never used.","'wallet' is defined but never used.","'toAddress' is assigned a value but never used.","'amount' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.",{"range":"445","text":"446"},"Array.prototype.map() expects a value to be returned at the end of arrow function.","'authToken' is defined but never used.","'reload' is defined but never used.","'userData' is defined but never used.",{"range":"447","text":"446"},"'followerList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"448","fix":"449"},[5026,5037],"",[1520,1531],"Update the dependencies array to be: [onIframeBodyClick, updateDescription]",{"range":"450","text":"451"},[7695,7697],"[onIframeBodyClick, updateDescription]"]